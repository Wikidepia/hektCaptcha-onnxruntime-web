{"version":3,"file":"ort-web.es6.min.js","mappings":"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","sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/string-utils.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/./node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/external umd {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/global","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => {\nreturn ","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return k.buffer!=C&&G(k.buffer),I}function t(){return k.buffer!=C&&G(k.buffer),F}function r(){return k.buffer!=C&&G(k.buffer),H}function a(){return k.buffer!=C&&G(k.buffer),P}function u(){return k.buffer!=C&&G(k.buffer),Y}var o,i,s;e=e||{},o||(o=void 0!==e?e:{}),o.ready=new Promise((function(e,n){i=e,s=n}));var f,c,l,p,m,d,h=Object.assign({},o),g=\"./this.program\",y=(e,n)=>{throw n},_=\"object\"==typeof window,b=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=o.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function T(e){return o.locateFile?o.locateFile(e,O):O+e}if(v){let e;O=b?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",d=()=>{m||(p=require(\"fs\"),m=require(\"path\"))},f=function(e,n){return d(),e=m.normalize(e),p.readFileSync(e,n?void 0:\"utf8\")},l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t)=>{d(),e=m.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof ie))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),y=(e,n)=>{if(V())throw process.exitCode=e,n;n instanceof ie||x(\"exiting due to exception: \"+n),process.exit(e)},o.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(_||b)&&(b?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},b&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),A=console.warn.bind(console);v&&(d(),M=e=>p.writeSync(1,e+\"\\n\"),A=e=>p.writeSync(2,e+\"\\n\"));var S,R=o.print||M,x=o.printErr||A;Object.assign(o,h),h=null,o.thisProgram&&(g=o.thisProgram),o.quit&&(y=o.quit),o.wasmBinary&&(S=o.wasmBinary);var E=o.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&re(\"no native wasm support detected\");var k,D,C,I,F,H,P,Y,U=!1,W=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function j(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&W)return W.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var u=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|u);else{var o=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|u<<6|o:(7&a)<<18|u<<12|o<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function N(e,n){return(e>>>=0)?j(t(),e,n):\"\"}function L(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var u=0;u<e.length;++u){var o=e.charCodeAt(u);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++u)),127>=o){if(t>=r)break;n[t++>>>0]=o}else{if(2047>=o){if(t+1>=r)break;n[t++>>>0]=192|o>>6}else{if(65535>=o){if(t+2>=r)break;n[t++>>>0]=224|o>>12}else{if(t+3>=r)break;n[t++>>>0]=240|o>>18,n[t++>>>0]=128|o>>12&63}n[t++>>>0]=128|o>>6&63}n[t++>>>0]=128|63&o}}return n[t>>>0]=0,t-a}function q(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function G(e){C=e,o.HEAP8=I=new Int8Array(e),o.HEAP16=new Int16Array(e),o.HEAP32=H=new Int32Array(e),o.HEAPU8=F=new Uint8Array(e),o.HEAPU16=new Uint16Array(e),o.HEAPU32=P=new Uint32Array(e),o.HEAPF32=new Float32Array(e),o.HEAPF64=Y=new Float64Array(e)}w&&(C=o.buffer);var B=o.INITIAL_MEMORY||16777216;if(w)k=o.wasmMemory,C=o.buffer;else if(o.wasmMemory)k=o.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:B/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");k&&(C=k.buffer),B=C.byteLength,G(C);var z,J=[],Q=[],K=[],X=[];function V(){return E||!1}function Z(){var e=o.preRun.shift();J.unshift(e)}var $,ee=0,ne=null,te=null;function re(e){throw w?postMessage({cmd:\"onAbort\",arg:e}):o.onAbort&&o.onAbort(e),x(e=\"Aborted(\"+e+\")\"),U=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function ae(){return $.startsWith(\"data:application/octet-stream;base64,\")}function ue(){var e=$;try{if(e==$&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){re(e)}}$=\"ort-wasm-threaded.wasm\",ae()||($=T($));var oe={};function ie(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){(e=pe.Ja[e])||re(),pe.Sa(e)}function fe(e){var n=pe.ab();if(!n)return 6;pe.Oa.push(n),pe.Ja[e.Ia]=n,n.Ia=e.Ia;var t={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ia};return n.Na=()=>{t.time=performance.now(),n.postMessage(t,e.lb)},n.loaded&&(n.Na(),delete n.Na),0}function ce(e){if(w)return je(1,1,e);V()||(pe.Ua(),o.onExit&&o.onExit(e),U=!0),y(e,new ie(e))}function le(e,n){if(!n&&w)throw he(e),\"unwind\";V()||w||(fn(),me(K),sn(0),Xe[1].length&&Ve(1,10),Xe[2].length&&Ve(2,10),pe.Ua()),ce(e)}var pe={Ma:[],Oa:[],Wa:[],Ja:{},bb:function(){w&&pe.cb()},nb:function(){},cb:function(){pe.receiveObjectTransfer=pe.fb,pe.threadInitTLS=pe.Va,pe.setExitStatus=pe.Ta,E=!1},Ta:function(){},Ua:function(){for(var e of Object.values(pe.Ja))pe.Sa(e);for(e of pe.Ma)e.terminate();pe.Ma=[]},Sa:function(e){var n=e.Ia;delete pe.Ja[n],pe.Ma.push(e),pe.Oa.splice(pe.Oa.indexOf(e),1),e.Ia=0,dn(n)},fb:function(){},Va:function(){pe.Wa.forEach((e=>e()))},eb:function(e,n){e.onmessage=t=>{var r=(t=t.data).cmd;if(e.Ia&&(pe.$a=e.Ia),t.targetThread&&t.targetThread!=un()){var a=pe.Ja[t.ob];a?a.postMessage(t,t.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Fe(t.queue):\"spawnThread\"===r?fe(t):\"cleanupThread\"===r?se(t.thread):\"killThread\"===r?(t=t.thread,r=pe.Ja[t],delete pe.Ja[t],r.terminate(),dn(t),pe.Oa.splice(pe.Oa.indexOf(r),1),r.Ia=0):\"cancelThread\"===r?pe.Ja[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n&&n(e),e.Na&&(e.Na(),delete e.Na)):\"print\"===r?R(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?x(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===r?o.onAbort&&o.onAbort(t.arg):r&&x(\"worker sent an unknown command \"+r);pe.$a=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:o.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:D})},Xa:function(){var e=T(\"ort-wasm-threaded.worker.js\");pe.Ma.push(new Worker(e))},ab:function(){return 0==pe.Ma.length&&(pe.Xa(),pe.eb(pe.Ma[0])),pe.Ma.pop()}};function me(e){for(;0<e.length;)e.shift()(o)}function de(e){var n=yn();return e=e(),_n(n),e}function he(e){if(w)return je(2,0,e);try{le(e)}catch(e){e instanceof ie||\"unwind\"==e||y(1,e)}}o.PThread=pe,o.establishStackSpace=function(){var e=un(),n=r()[e+44>>2>>>0];e=r()[e+48>>2>>>0],gn(n,n-e),_n(n)};var ge,ye,_e=[];function be(e,n,t,r){return w?je(3,1,e,n,t,r):ve(e,n,t,r)}function ve(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?be(e,n,t,r):(e={gb:t,Ia:e,Ya:r,lb:a},w?(e.mb=\"spawnThread\",postMessage(e,a),0):fe(e))}function we(e,n,t){return w?je(4,1,e,n,t):0}function Oe(e,n){if(w)return je(5,1,e,n)}function Te(e,n){if(w)return je(6,1,e,n)}function Me(e,n,t){if(w)return je(7,1,e,n,t)}function Ae(e,n,t){return w?je(8,1,e,n,t):0}function Se(e,n){if(w)return je(9,1,e,n)}function Re(e,n,t){if(w)return je(10,1,e,n,t)}function xe(e,n,t,r){if(w)return je(11,1,e,n,t,r)}function Ee(e,n,t,r){if(w)return je(12,1,e,n,t,r)}function ke(e,n,t,r){if(w)return je(13,1,e,n,t,r)}function De(e){if(w)return je(14,1,e)}function Ce(e,n){if(w)return je(15,1,e,n)}function Ie(e,n,t){if(w)return je(16,1,e,n,t)}function Fe(e){Atomics.store(r(),e>>2,1),un()&&mn(e),Atomics.compareExchange(r(),e>>2,1,0)}function He(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Pe(e,n,t,r,a,u){return w?je(17,1,e,n,t,r,a,u):-52}function Ye(e,n,t,r,a,u){if(w)return je(18,1,e,n,t,r,a,u)}function Ue(e){var t=q(e)+1,r=on(t);return r&&L(e,n(),r,t),r}function We(e,n,t){function u(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(w)return je(19,1,e,n,t);var o=(new Date).getFullYear(),i=new Date(o,0,1),s=new Date(o,6,1);o=i.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(o,f);r()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(o!=f),e=u(i),n=u(s),e=Ue(e),n=Ue(n),f<o?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)}function je(e,n){var t=arguments.length-2,r=arguments;return de((()=>{for(var a=bn(8*t),o=a>>3,i=0;i<t;i++){var s=r[2+i];u()[o+i>>>0]=s}return pn(e,t,a,n)}))}o.invokeEntryPoint=function(e,n){var t=_e[e];t||(e>=_e.length&&(_e.length=e+1),_e[e]=t=z.get(e)),e=t(n),V()?pe.Ta(e):hn(e)},o.executeNotifiedProxyingQueue=Fe,ye=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:w?()=>performance.now()-o.__performance_now_clock_drift:()=>performance.now();var Ne,Le=[],qe={};function Ge(){if(!Ne){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in qe)void 0===qe[e]?delete n[e]:n[e]=qe[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Ne=t}return Ne}function Be(e,t){if(w)return je(20,1,e,t);var r=0;return Ge().forEach((function(u,o){var i=t+r;for(o=a()[e+4*o>>2>>>0]=i,i=0;i<u.length;++i)n()[o++>>0>>>0]=u.charCodeAt(i);n()[o>>0>>>0]=0,r+=u.length+1})),0}function ze(e,n){if(w)return je(21,1,e,n);var t=Ge();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Je(e){return w?je(22,1,e):52}function Qe(e,n,t,r){return w?je(23,1,e,n,t,r):52}function Ke(e,n,t,r,a){return w?je(24,1,e,n,t,r,a):70}var Xe=[null,[],[]];function Ve(e,n){var t=Xe[e];0===n||10===n?((1===e?R:x)(j(t,0)),t.length=0):t.push(n)}function Ze(e,n,r,u){if(w)return je(25,1,e,n,r,u);for(var o=0,i=0;i<r;i++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++)Ve(e,t()[s+c>>>0]);o+=f}return a()[u>>2>>>0]=o,0}function $e(e){return 0==e%4&&(0!=e%100||0==e%400)}var en=[31,29,31,30,31,30,31,31,30,31,30,31],nn=[31,28,31,30,31,30,31,31,30,31,30,31];function tn(e,t,a,u){function o(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function i(e,n){return o(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Ka;for(e=new Date(new Date(e.La+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=($e(e.getFullYear())?en:nn)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[u+40>>2>>>0];for(var p in u={jb:r()[u>>2>>>0],ib:r()[u+4>>2>>>0],Pa:r()[u+8>>2>>>0],Ra:r()[u+12>>2>>>0],Qa:r()[u+16>>2>>>0],La:r()[u+20>>2>>>0],Ha:r()[u+24>>2>>>0],Ka:r()[u+28>>2>>>0],pb:r()[u+32>>2>>>0],hb:r()[u+36>>2>>>0],kb:l?N(l):\"\"},a=N(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Ha].substring(0,3)},\"%A\":function(e){return m[e.Ha]},\"%b\":function(e){return d[e.Qa].substring(0,3)},\"%B\":function(e){return d[e.Qa]},\"%C\":function(e){return i((e.La+1900)/100|0,2)},\"%d\":function(e){return i(e.Ra,2)},\"%e\":function(e){return o(e.Ra,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return i(e.Pa,2)},\"%I\":function(e){return 0==(e=e.Pa)?e=12:12<e&&(e-=12),i(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Qa-1;n+=($e(e.La+1900)?en:nn)[t++]);return i(e.Ra+n,3)},\"%m\":function(e){return i(e.Qa+1,2)},\"%M\":function(e){return i(e.ib,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Pa&&12>e.Pa?\"AM\":\"PM\"},\"%S\":function(e){return i(e.jb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Ha||7},\"%U\":function(e){return i(Math.floor((e.Ka+7-e.Ha)/7),2)},\"%V\":function(e){var n=Math.floor((e.Ka+7-(e.Ha+6)%7)/7);if(2>=(e.Ha+371-e.Ka-2)%7&&n++,n)53==n&&(4==(t=(e.Ha+371-e.Ka)%7)||3==t&&$e(e.La)||(n=1));else{n=52;var t=(e.Ha+7-e.Ka-1)%7;(4==t||5==t&&$e(e.La%400-1))&&n++}return i(n,2)},\"%w\":function(e){return e.Ha},\"%W\":function(e){return i(Math.floor((e.Ka+7-(e.Ha+6)%7)/7),2)},\"%y\":function(e){return(e.La+1900).toString().substring(2)},\"%Y\":function(e){return e.La+1900},\"%z\":function(e){var n=0<=(e=e.hb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.kb},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](u)));return p=function(e){var n=Array(q(e)+1);return L(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}pe.bb();var rn=[null,ce,he,be,we,Oe,Te,Me,Ae,Se,Re,xe,Ee,ke,De,Ce,Ie,Pe,Ye,We,Be,ze,Je,Qe,Ke,Ze],an={L:function(e){cn(e,!b,1,!_),pe.Va()},h:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):se(e)},D:ve,e:we,S:Oe,z:Te,B:Me,s:Ae,Q:Se,I:Re,P:xe,k:Ee,A:ke,w:De,R:Ce,y:Ie,p:function(){},j:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},x:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,n,t,r){if(e==n)setTimeout((()=>Fe(r)));else if(w)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=pe.Ja[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},V:function(e,n){e=new Date(1e3*He(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},m:function(e,n){e=new Date(1e3*He(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2>>>0]=a,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2>>>0]=e},n:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),u=new Date(n.getFullYear(),0,1),o=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=u.getTimezoneOffset(),s=Math.min(i,o);return 0>t?r()[e+32>>2>>>0]=Number(o!=i&&s==a):0<t!=(s==a)&&(o=Math.max(i,o),n.setTime(n.getTime()+6e4*((0<t?s:o)-a))),r()[e+24>>2>>>0]=n.getDay(),t=(n.getTime()-u.getTime())/864e5|0,r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},G:Pe,H:Ye,o:function e(n,t,r){e.Za||(e.Za=!0,We(n,t,r))},b:function(){re(\"\")},i:function(){if(!v&&!b){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";ge||(ge={}),ge[e]||(ge[e]=1,v&&(e=\"warning: \"+e),x(e))}},u:function(){return 4294901760},c:ye,O:function(e,n,r){t().copyWithin(e>>>0,n>>>0,n+r>>>0)},v:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},J:function(e,n,t){Le.length=n,t>>=3;for(var r=0;r<n;r++)Le[r]=u()[t+r>>>0];return(0>e?oe[-e-1]:rn[e]).apply(null,Le)},t:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var u=Math;a=Math.max(e,a),u=u.min.call(u,4294901760,a+(65536-a%65536)%65536);e:{try{k.grow(u-C.byteLength+65535>>>16),G(k.buffer);var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},T:function(){throw\"unwind\"},M:Be,N:ze,C:le,d:Je,g:Qe,q:Ke,f:Ze,a:k||o.wasmMemory,W:tn,r:function(e,n,t,r){return tn(e,n,t,r)}};!function(){function e(e,n){o.asm=e.exports,pe.Wa.push(o.asm.ua),z=o.asm.wa,Q.unshift(o.asm.X),D=n,w||(ee--,o.monitorRunDependencies&&o.monitorRunDependencies(ee),0==ee&&(null!==ne&&(clearInterval(ne),ne=null),te&&(e=te,te=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!S&&(_||b)){if(\"function\"==typeof fetch&&!$.startsWith(\"file://\"))return fetch($,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+$+\"'\";return e.arrayBuffer()})).catch((function(){return ue()}));if(c)return new Promise((function(e,n){c($,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return ue()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),re(e)}))}var r={a:an};if(w||(ee++,o.monitorRunDependencies&&o.monitorRunDependencies(ee)),o.instantiateWasm)try{return o.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(S||\"function\"!=typeof WebAssembly.instantiateStreaming||ae()||$.startsWith(\"file://\")||v||\"function\"!=typeof fetch?t(n):fetch($,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(s)}(),o.___wasm_call_ctors=function(){return(o.___wasm_call_ctors=o.asm.X).apply(null,arguments)},o._OrtInit=function(){return(o._OrtInit=o.asm.Y).apply(null,arguments)},o._OrtCreateSessionOptions=function(){return(o._OrtCreateSessionOptions=o.asm.Z).apply(null,arguments)},o._OrtAppendExecutionProvider=function(){return(o._OrtAppendExecutionProvider=o.asm._).apply(null,arguments)},o._OrtAddSessionConfigEntry=function(){return(o._OrtAddSessionConfigEntry=o.asm.$).apply(null,arguments)},o._OrtReleaseSessionOptions=function(){return(o._OrtReleaseSessionOptions=o.asm.aa).apply(null,arguments)},o._OrtCreateSession=function(){return(o._OrtCreateSession=o.asm.ba).apply(null,arguments)},o._OrtReleaseSession=function(){return(o._OrtReleaseSession=o.asm.ca).apply(null,arguments)},o._OrtGetInputCount=function(){return(o._OrtGetInputCount=o.asm.da).apply(null,arguments)},o._OrtGetOutputCount=function(){return(o._OrtGetOutputCount=o.asm.ea).apply(null,arguments)},o._OrtGetInputName=function(){return(o._OrtGetInputName=o.asm.fa).apply(null,arguments)},o._OrtGetOutputName=function(){return(o._OrtGetOutputName=o.asm.ga).apply(null,arguments)},o._OrtFree=function(){return(o._OrtFree=o.asm.ha).apply(null,arguments)},o._OrtCreateTensor=function(){return(o._OrtCreateTensor=o.asm.ia).apply(null,arguments)},o._OrtGetTensorData=function(){return(o._OrtGetTensorData=o.asm.ja).apply(null,arguments)},o._OrtReleaseTensor=function(){return(o._OrtReleaseTensor=o.asm.ka).apply(null,arguments)},o._OrtCreateRunOptions=function(){return(o._OrtCreateRunOptions=o.asm.la).apply(null,arguments)},o._OrtAddRunConfigEntry=function(){return(o._OrtAddRunConfigEntry=o.asm.ma).apply(null,arguments)},o._OrtReleaseRunOptions=function(){return(o._OrtReleaseRunOptions=o.asm.na).apply(null,arguments)},o._OrtRun=function(){return(o._OrtRun=o.asm.oa).apply(null,arguments)},o._OrtEndProfiling=function(){return(o._OrtEndProfiling=o.asm.pa).apply(null,arguments)};var un=o._pthread_self=function(){return(un=o._pthread_self=o.asm.qa).apply(null,arguments)},on=o._malloc=function(){return(on=o._malloc=o.asm.ra).apply(null,arguments)};o._free=function(){return(o._free=o.asm.sa).apply(null,arguments)};var sn=o._fflush=function(){return(sn=o._fflush=o.asm.ta).apply(null,arguments)};o.__emscripten_tls_init=function(){return(o.__emscripten_tls_init=o.asm.ua).apply(null,arguments)};var fn=o.___funcs_on_exit=function(){return(fn=o.___funcs_on_exit=o.asm.va).apply(null,arguments)},cn=o.__emscripten_thread_init=function(){return(cn=o.__emscripten_thread_init=o.asm.xa).apply(null,arguments)};o.__emscripten_thread_crashed=function(){return(o.__emscripten_thread_crashed=o.asm.ya).apply(null,arguments)};var ln,pn=o._emscripten_run_in_main_runtime_thread_js=function(){return(pn=o._emscripten_run_in_main_runtime_thread_js=o.asm.za).apply(null,arguments)},mn=o.__emscripten_proxy_execute_task_queue=function(){return(mn=o.__emscripten_proxy_execute_task_queue=o.asm.Aa).apply(null,arguments)},dn=o.__emscripten_thread_free_data=function(){return(dn=o.__emscripten_thread_free_data=o.asm.Ba).apply(null,arguments)},hn=o.__emscripten_thread_exit=function(){return(hn=o.__emscripten_thread_exit=o.asm.Ca).apply(null,arguments)},gn=o._emscripten_stack_set_limits=function(){return(gn=o._emscripten_stack_set_limits=o.asm.Da).apply(null,arguments)},yn=o.stackSave=function(){return(yn=o.stackSave=o.asm.Ea).apply(null,arguments)},_n=o.stackRestore=function(){return(_n=o.stackRestore=o.asm.Fa).apply(null,arguments)},bn=o.stackAlloc=function(){return(bn=o.stackAlloc=o.asm.Ga).apply(null,arguments)};function vn(){function e(){if(!ln&&(ln=!0,o.calledRun=!0,!U)&&(w||me(Q),i(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!w)){if(o.postRun)for(\"function\"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;){var e=o.postRun.shift();X.unshift(e)}me(X)}}if(!(0<ee))if(w)i(o),w||me(Q),postMessage({cmd:\"loaded\"});else{if(o.preRun)for(\"function\"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)Z();me(J),0<ee||(o.setStatus?(o.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){o.setStatus(\"\")}),1),e()}),1)):e())}}if(o.UTF8ToString=N,o.stringToUTF8=function(e,n,r){return L(e,t(),n,r)},o.lengthBytesUTF8=q,o.keepRuntimeAlive=V,o.wasmMemory=k,o.stackSave=yn,o.stackRestore=_n,o.stackAlloc=bn,o.ExitStatus=ie,o.PThread=pe,te=function e(){ln||vn(),ln||(te=e)},o.preInit)for(\"function\"==typeof o.preInit&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return vn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm) {\n  ortWasm = ortWasm || {};\n\n\nvar b;b||(b=typeof ortWasm !== 'undefined' ? ortWasm : {});var k,r;b.ready=new Promise(function(a,c){k=a;r=c});var aa=Object.assign({},b),t=\"./this.program\",ba=\"object\"==typeof window,u=\"function\"==typeof importScripts,x=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,z=\"\",A,B,C,fs,D,E;\nif(x)z=u?require(\"path\").dirname(z)+\"/\":__dirname+\"/\",E=()=>{D||(fs=require(\"fs\"),D=require(\"path\"))},A=function(a,c){E();a=D.normalize(a);return fs.readFileSync(a,c?void 0:\"utf8\")},C=a=>{a=A(a,!0);a.buffer||(a=new Uint8Array(a));return a},B=(a,c,e)=>{E();a=D.normalize(a);fs.readFile(a,function(f,g){f?e(f):c(g.buffer)})},1<process.argv.length&&(t=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\n}),b.inspect=function(){return\"[Emscripten Module object]\"};else if(ba||u)u?z=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(z=document.currentScript.src),_scriptDir&&(z=_scriptDir),0!==z.indexOf(\"blob:\")?z=z.substr(0,z.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):z=\"\",A=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.send(null);return c.responseText},u&&(C=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.responseType=\"arraybuffer\";c.send(null);return new Uint8Array(c.response)}),\nB=(a,c,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?c(f.response):e()};f.onerror=e;f.send(null)};var ca=b.print||console.log.bind(console),F=b.printErr||console.warn.bind(console);Object.assign(b,aa);aa=null;b.thisProgram&&(t=b.thisProgram);var G;b.wasmBinary&&(G=b.wasmBinary);var noExitRuntime=b.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&H(\"no native wasm support detected\");\nvar I,da=!1,ea=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction fa(a,c,e){c>>>=0;var f=c+e;for(e=c;a[e]&&!(e>=f);)++e;if(16<e-c&&a.buffer&&ea)return ea.decode(a.subarray(c,e));for(f=\"\";c<e;){var g=a[c++];if(g&128){var h=a[c++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[c++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[c++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function J(a,c){return(a>>>=0)?fa(K,a,c):\"\"}\nfunction L(a,c,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var p=a.charCodeAt(++h);l=65536+((l&1023)<<10)|p&1023}if(127>=l){if(e>=f)break;c[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;c[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;c[e++>>>0]=224|l>>12}else{if(e+3>=f)break;c[e++>>>0]=240|l>>18;c[e++>>>0]=128|l>>12&63}c[e++>>>0]=128|l>>6&63}c[e++>>>0]=128|l&63}}c[e>>>0]=0;return e-g}\nfunction M(a){for(var c=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?c++:2047>=f?c+=2:55296<=f&&57343>=f?(c+=4,++e):c+=3}return c}var ha,N,K,O,P;function ia(){var a=I.buffer;ha=a;b.HEAP8=N=new Int8Array(a);b.HEAP16=new Int16Array(a);b.HEAP32=O=new Int32Array(a);b.HEAPU8=K=new Uint8Array(a);b.HEAPU16=new Uint16Array(a);b.HEAPU32=P=new Uint32Array(a);b.HEAPF32=new Float32Array(a);b.HEAPF64=new Float64Array(a)}var ja=[],ka=[],la=[];function ma(){var a=b.preRun.shift();ja.unshift(a)}\nvar Q=0,R=null,S=null;function H(a){if(b.onAbort)b.onAbort(a);a=\"Aborted(\"+a+\")\";F(a);da=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");r(a);throw a;}function na(){return T.startsWith(\"data:application/octet-stream;base64,\")}var T;T=\"ort-wasm.wasm\";if(!na()){var oa=T;T=b.locateFile?b.locateFile(oa,z):z+oa}function pa(){var a=T;try{if(a==T&&G)return new Uint8Array(G);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){H(c)}}\nfunction qa(){if(!G&&(ba||u)){if(\"function\"==typeof fetch&&!T.startsWith(\"file://\"))return fetch(T,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+T+\"'\";return a.arrayBuffer()}).catch(function(){return pa()});if(B)return new Promise(function(a,c){B(T,function(e){a(new Uint8Array(e))},c)})}return Promise.resolve().then(function(){return pa()})}function U(a){for(;0<a.length;)a.shift()(b)}function ra(a){var c=M(a)+1,e=sa(c);e&&L(a,N,e,c);return e}\nfunction ta(a,c,e){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var p=l.getTimezoneOffset();O[a>>2>>>0]=60*Math.max(g,p);O[c>>2>>>0]=Number(g!=p);a=f(h);c=f(l);a=ra(a);c=ra(c);p<g?(P[e>>2>>>0]=a,P[e+4>>2>>>0]=c):(P[e>>2>>>0]=c,P[e+4>>2>>>0]=a)}function V(a,c,e){V.ra||(V.ra=!0,ta(a,c,e))}var W={};\nfunction xa(){if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:t||\"./this.program\"},c;for(c in W)void 0===W[c]?delete a[c]:a[c]=W[c];var e=[];for(c in a)e.push(c+\"=\"+a[c]);X=e}return X}var X,ya=[null,[],[]];function Y(a){return 0===a%4&&(0!==a%100||0===a%400)}var za=[31,29,31,30,31,30,31,31,30,31,30,31],Aa=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Ba(a){var c=Array(M(a)+1);L(a,c,0,c.length);return c}\nfunction Ca(a,c,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function h(d,m){return g(d,m,\"0\")}function l(d,m){function n(ua){return 0>ua?-1:0<ua?1:0}var y;0===(y=n(d.getFullYear()-m.getFullYear()))&&0===(y=n(d.getMonth()-m.getMonth()))&&(y=n(d.getDate()-m.getDate()));return y}function p(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var m=d.ma;for(d=new Date((new Date(d.na+1900,0,1)).getTime());0<m;){var n=d.getMonth(),y=(Y(d.getFullYear())?za:Aa)[n];if(m>y-d.getDate())m-=y-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=p(new Date(d.getFullYear(),\n0,4));n=p(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var v=O[f+40>>2>>>0];f={ua:O[f>>2>>>0],ta:O[f+4>>2>>>0],oa:O[f+8>>2>>>0],qa:O[f+12>>2>>>0],pa:O[f+16>>2>>>0],na:O[f+20>>2>>>0],ia:O[f+24>>2>>>0],ma:O[f+28>>2>>>0],wa:O[f+32>>2>>>0],sa:O[f+36>>2>>>0],va:v?J(v):\"\"};e=J(e);v={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var q in v)e=e.replace(new RegExp(q,\"g\"),v[q]);var va=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),wa=\"January February March April May June July August September October November December\".split(\" \");v={\"%a\":function(d){return va[d.ia].substring(0,3)},\"%A\":function(d){return va[d.ia]},\"%b\":function(d){return wa[d.pa].substring(0,\n3)},\"%B\":function(d){return wa[d.pa]},\"%C\":function(d){return h((d.na+1900)/100|0,2)},\"%d\":function(d){return h(d.qa,2)},\"%e\":function(d){return g(d.qa,2,\" \")},\"%g\":function(d){return w(d).toString().substring(2)},\"%G\":function(d){return w(d)},\"%H\":function(d){return h(d.oa,2)},\"%I\":function(d){d=d.oa;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.pa-1;m+=(Y(d.na+1900)?za:Aa)[n++]);return h(d.qa+m,3)},\"%m\":function(d){return h(d.pa+1,2)},\"%M\":function(d){return h(d.ta,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.oa&&12>d.oa?\"AM\":\"PM\"},\"%S\":function(d){return h(d.ua,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ia||7},\"%U\":function(d){return h(Math.floor((d.ma+7-d.ia)/7),2)},\"%V\":function(d){var m=Math.floor((d.ma+7-(d.ia+6)%7)/7);2>=(d.ia+371-d.ma-2)%7&&m++;if(m)53==m&&(n=(d.ia+371-d.ma)%7,4==n||3==n&&Y(d.na)||(m=1));else{m=52;var n=(d.ia+7-d.ma-1)%7;(4==n||5==n&&Y(d.na%400-1))&&m++}return h(m,2)},\"%w\":function(d){return d.ia},\"%W\":function(d){return h(Math.floor((d.ma+\n7-(d.ia+6)%7)/7),2)},\"%y\":function(d){return(d.na+1900).toString().substring(2)},\"%Y\":function(d){return d.na+1900},\"%z\":function(d){d=d.sa;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.va},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(q in v)e.includes(q)&&(e=e.replace(new RegExp(q,\"g\"),v[q](f)));e=e.replace(/\\0\\0/g,\"%\");q=Ba(e);if(q.length>c)return 0;N.set(q,a>>>0);return q.length-1}\nvar Da={d:function(){return 0},I:function(){},w:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(){},F:function(){},h:function(){},x:function(){},t:function(){},H:function(){},v:function(){},n:function(){},u:function(){H(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},o:function(){H(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},i:function(){return Date.now()},\nJ:function(){return!0},j:function(a,c){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[c>>2>>>0]=a.getUTCSeconds();O[c+4>>2>>>0]=a.getUTCMinutes();O[c+8>>2>>>0]=a.getUTCHours();O[c+12>>2>>>0]=a.getUTCDate();O[c+16>>2>>>0]=a.getUTCMonth();O[c+20>>2>>>0]=a.getUTCFullYear()-1900;O[c+24>>2>>>0]=a.getUTCDay();O[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},k:function(a,c){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[c>>2>>>0]=a.getSeconds();O[c+4>>2>>>0]=a.getMinutes();\nO[c+8>>2>>>0]=a.getHours();O[c+12>>2>>>0]=a.getDate();O[c+16>>2>>>0]=a.getMonth();O[c+20>>2>>>0]=a.getFullYear()-1900;O[c+24>>2>>>0]=a.getDay();var e=new Date(a.getFullYear(),0,1);O[c+28>>2>>>0]=(a.getTime()-e.getTime())/864E5|0;O[c+36>>2>>>0]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();O[c+32>>2>>>0]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},l:function(a){var c=new Date(O[a+20>>2>>>0]+1900,O[a+16>>2>>>0],O[a+12>>2>>>0],O[a+8>>\n2>>>0],O[a+4>>2>>>0],O[a>>2>>>0],0),e=O[a+32>>2>>>0],f=c.getTimezoneOffset(),g=new Date(c.getFullYear(),0,1),h=(new Date(c.getFullYear(),6,1)).getTimezoneOffset(),l=g.getTimezoneOffset(),p=Math.min(l,h);0>e?O[a+32>>2>>>0]=Number(h!=l&&p==f):0<e!=(p==f)&&(h=Math.max(l,h),c.setTime(c.getTime()+6E4*((0<e?p:h)-f)));O[a+24>>2>>>0]=c.getDay();O[a+28>>2>>>0]=(c.getTime()-g.getTime())/864E5|0;O[a>>2>>>0]=c.getSeconds();O[a+4>>2>>>0]=c.getMinutes();O[a+8>>2>>>0]=c.getHours();O[a+12>>2>>>0]=c.getDate();O[a+\n16>>2>>>0]=c.getMonth();return c.getTime()/1E3|0},z:function(){return-52},A:function(){},m:V,a:function(){H(\"\")},s:function(){return 4294901760},e:x?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),E:function(a,c,e){K.copyWithin(a>>>0,c>>>0,c+e>>>0)},b:function(a){var c=K.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=c*(1+.2/e);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);g=g.min.call(g,4294901760,f+(65536-f%65536)%65536);a:{try{I.grow(g-ha.byteLength+\n65535>>>16);ia();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},C:function(a,c){var e=0;xa().forEach(function(f,g){var h=c+e;g=P[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)N[g++>>0>>>0]=f.charCodeAt(h);N[g>>0>>>0]=0;e+=f.length+1});return 0},D:function(a,c){var e=xa();P[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});P[c>>2>>>0]=f;return 0},c:function(){return 52},g:function(){return 52},p:function(){return 70},f:function(a,c,e,f){for(var g=0,h=0;h<e;h++){var l=P[c>>2>>>0],\np=P[c+4>>2>>>0];c+=8;for(var w=0;w<p;w++){var v=K[l+w>>>0],q=ya[a];0===v||10===v?((1===a?ca:F)(fa(q,0)),q.length=0):q.push(v)}g+=p}P[f>>2>>>0]=g;return 0},K:Ca,q:function(a,c,e,f){return Ca(a,c,e,f)}};\n(function(){function a(g){b.asm=g.exports;I=b.asm.L;ia();ka.unshift(b.asm.M);Q--;b.monitorRunDependencies&&b.monitorRunDependencies(Q);0==Q&&(null!==R&&(clearInterval(R),R=null),S&&(g=S,S=null,g()))}function c(g){a(g.instance)}function e(g){return qa().then(function(h){return WebAssembly.instantiate(h,f)}).then(function(h){return h}).then(g,function(h){F(\"failed to asynchronously prepare wasm: \"+h);H(h)})}var f={a:Da};Q++;b.monitorRunDependencies&&b.monitorRunDependencies(Q);if(b.instantiateWasm)try{return b.instantiateWasm(f,\na)}catch(g){return F(\"Module.instantiateWasm callback failed with error: \"+g),!1}(function(){return G||\"function\"!=typeof WebAssembly.instantiateStreaming||na()||T.startsWith(\"file://\")||x||\"function\"!=typeof fetch?e(c):fetch(T,{credentials:\"same-origin\"}).then(function(g){return WebAssembly.instantiateStreaming(g,f).then(c,function(h){F(\"wasm streaming compile failed: \"+h);F(\"falling back to ArrayBuffer instantiation\");return e(c)})})})().catch(r);return{}})();\nb.___wasm_call_ctors=function(){return(b.___wasm_call_ctors=b.asm.M).apply(null,arguments)};b._OrtInit=function(){return(b._OrtInit=b.asm.N).apply(null,arguments)};b._OrtCreateSessionOptions=function(){return(b._OrtCreateSessionOptions=b.asm.O).apply(null,arguments)};b._OrtAppendExecutionProvider=function(){return(b._OrtAppendExecutionProvider=b.asm.P).apply(null,arguments)};b._OrtAddSessionConfigEntry=function(){return(b._OrtAddSessionConfigEntry=b.asm.Q).apply(null,arguments)};\nb._OrtReleaseSessionOptions=function(){return(b._OrtReleaseSessionOptions=b.asm.R).apply(null,arguments)};b._OrtCreateSession=function(){return(b._OrtCreateSession=b.asm.S).apply(null,arguments)};b._OrtReleaseSession=function(){return(b._OrtReleaseSession=b.asm.T).apply(null,arguments)};b._OrtGetInputCount=function(){return(b._OrtGetInputCount=b.asm.U).apply(null,arguments)};b._OrtGetOutputCount=function(){return(b._OrtGetOutputCount=b.asm.V).apply(null,arguments)};\nb._OrtGetInputName=function(){return(b._OrtGetInputName=b.asm.W).apply(null,arguments)};b._OrtGetOutputName=function(){return(b._OrtGetOutputName=b.asm.X).apply(null,arguments)};b._OrtFree=function(){return(b._OrtFree=b.asm.Y).apply(null,arguments)};b._OrtCreateTensor=function(){return(b._OrtCreateTensor=b.asm.Z).apply(null,arguments)};b._OrtGetTensorData=function(){return(b._OrtGetTensorData=b.asm._).apply(null,arguments)};\nb._OrtReleaseTensor=function(){return(b._OrtReleaseTensor=b.asm.$).apply(null,arguments)};b._OrtCreateRunOptions=function(){return(b._OrtCreateRunOptions=b.asm.aa).apply(null,arguments)};b._OrtAddRunConfigEntry=function(){return(b._OrtAddRunConfigEntry=b.asm.ba).apply(null,arguments)};b._OrtReleaseRunOptions=function(){return(b._OrtReleaseRunOptions=b.asm.ca).apply(null,arguments)};b._OrtRun=function(){return(b._OrtRun=b.asm.da).apply(null,arguments)};\nb._OrtEndProfiling=function(){return(b._OrtEndProfiling=b.asm.ea).apply(null,arguments)};var sa=b._malloc=function(){return(sa=b._malloc=b.asm.fa).apply(null,arguments)};b._free=function(){return(b._free=b.asm.ga).apply(null,arguments)};b._fflush=function(){return(b._fflush=b.asm.ha).apply(null,arguments)};\nvar Ea=b.stackSave=function(){return(Ea=b.stackSave=b.asm.ja).apply(null,arguments)},Fa=b.stackRestore=function(){return(Fa=b.stackRestore=b.asm.ka).apply(null,arguments)},Ga=b.stackAlloc=function(){return(Ga=b.stackAlloc=b.asm.la).apply(null,arguments)};b.UTF8ToString=J;b.stringToUTF8=function(a,c,e){return L(a,K,c,e)};b.lengthBytesUTF8=M;b.stackSave=Ea;b.stackRestore=Fa;b.stackAlloc=Ga;var Z;S=function Ha(){Z||Ia();Z||(S=Ha)};\nfunction Ia(){function a(){if(!Z&&(Z=!0,b.calledRun=!0,!da)){U(ka);k(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();la.unshift(c)}U(la)}}if(!(0<Q)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)ma();U(ja);0<Q||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1);a()},1)):a())}}\nif(b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Ia();\n\n\n  return ortWasm.ready\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.14.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={474:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return P.buffer!=D&&G(P.buffer),F}function r(){return P.buffer!=D&&G(P.buffer),I}function a(){return P.buffer!=D&&G(P.buffer),U}function o(){return P.buffer!=D&&G(P.buffer),H}function i(){return P.buffer!=D&&G(P.buffer),L}var s,u,c;e=e||{},s||(s=void 0!==e?e:{}),s.ready=new Promise((function(e,t){u=e,c=t}));var l,f,p,d,m,g,h=Object.assign({},s),y=\\\"./this.program\\\",v=(e,t)=>{throw t},_=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=s.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function A(e){return s.locateFile?s.locateFile(e,S):S+e}if(w){let t;S=b?n(908).dirname(S)+\\\"/\\\":\\\"//\\\",g=()=>{m||(d=n(384),m=n(908))},l=function(e,t){return g(),e=m.normalize(e),d.readFileSync(e,t?void 0:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{g(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof ue))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,t)=>{if(K())throw process.exitCode=e,t;t instanceof ue||x(\\\"exiting due to exception: \\\"+t),process.exit(e)},s.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=t.Worker}else(_||b)&&(b?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},b&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),M=console.warn.bind(console);w&&(g(),T=e=>d.writeSync(1,e+\\\"\\\\n\\\"),M=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var E,R=s.print||T,x=s.printErr||M;Object.assign(s,h),h=null,s.thisProgram&&(y=s.thisProgram),s.quit&&(v=s.quit),s.wasmBinary&&(E=s.wasmBinary);var C=s.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&ae(\\\"no native wasm support detected\\\");var P,k,D,F,I,U,H,L,W=!1,j=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function Y(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&j)return j.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?Y(r(),e,t):\\\"\\\"}function N(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function B(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function G(e){D=e,s.HEAP8=F=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=U=new Int32Array(e),s.HEAPU8=I=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=L=new Float64Array(e)}O&&(D=s.buffer);var q=s.INITIAL_MEMORY||16777216;if(O)P=s.wasmMemory,D=s.buffer;else if(s.wasmMemory)P=s.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");P&&(D=P.buffer),q=D.byteLength,G(D);var $,V=[],J=[],X=[],Q=[];function K(){return C||!1}function Z(){var e=s.preRun.shift();V.unshift(e)}var ee,te=0,ne=null,re=null;function ae(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):s.onAbort&&s.onAbort(e),x(e=\\\"Aborted(\\\"+e+\\\")\\\"),W=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function oe(){return ee.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ie(){var e=ee;try{if(e==ee&&E)return new Uint8Array(E);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ae(e)}}ee=\\\"ort-wasm-threaded.wasm\\\",oe()||(ee=A(ee));var se={};function ue(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function ce(e){(e=de.Ja[e])||ae(),de.Sa(e)}function le(e){var t=de.ab();if(!t)return 6;de.Oa.push(t),de.Ja[e.Ia]=t,t.Ia=e.Ia;var n={cmd:\\\"run\\\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ia};return t.Na=()=>{n.time=performance.now(),t.postMessage(n,e.lb)},t.loaded&&(t.Na(),delete t.Na),0}function fe(e){if(O)return Ye(1,1,e);K()||(de.Ua(),s.onExit&&s.onExit(e),W=!0),v(e,new ue(e))}function pe(e,t){if(!t&&O)throw he(e),\\\"unwind\\\";K()||O||(ct(),me(X),ut(0),Qe[1].length&&Ke(1,10),Qe[2].length&&Ke(2,10),de.Ua()),fe(e)}var de={Ma:[],Oa:[],Wa:[],Ja:{},bb:function(){O&&de.cb()},nb:function(){},cb:function(){de.receiveObjectTransfer=de.fb,de.threadInitTLS=de.Va,de.setExitStatus=de.Ta,C=!1},Ta:function(){},Ua:function(){for(var e of Object.values(de.Ja))de.Sa(e);for(e of de.Ma)e.terminate();de.Ma=[]},Sa:function(e){var t=e.Ia;delete de.Ja[t],de.Ma.push(e),de.Oa.splice(de.Oa.indexOf(e),1),e.Ia=0,mt(t)},fb:function(){},Va:function(){de.Wa.forEach((e=>e()))},eb:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Ia&&(de.$a=e.Ia),n.targetThread&&n.targetThread!=it()){var a=de.Ja[n.ob];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?Ie(n.queue):\\\"spawnThread\\\"===r?le(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=de.Ja[n],delete de.Ja[n],r.terminate(),mt(n),de.Oa.splice(de.Oa.indexOf(r),1),r.Ia=0):\\\"cancelThread\\\"===r?de.Ja[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Na&&(e.Na(),delete e.Na)):\\\"print\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?s.onAbort&&s.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);de.$a=void 0},e.onerror=e=>{throw x(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:k})},Xa:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");de.Ma.push(new Worker(e))},ab:function(){return 0==de.Ma.length&&(de.Xa(),de.eb(de.Ma[0])),de.Ma.pop()}};function me(e){for(;0<e.length;)e.shift()(s)}function ge(e){var t=yt();return e=e(),vt(t),e}function he(e){if(O)return Ye(2,0,e);try{pe(e)}catch(e){e instanceof ue||\\\"unwind\\\"==e||v(1,e)}}s.PThread=de,s.establishStackSpace=function(){var e=it(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],ht(t,t-e),vt(t)};var ye,ve,_e=[];function be(e,t,n,r){return O?Ye(3,1,e,t,n,r):we(e,t,n,r)}function we(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?be(e,t,n,r):(e={gb:n,Ia:e,Ya:r,lb:a},O?(e.mb=\\\"spawnThread\\\",postMessage(e,a),0):le(e))}function Oe(e,t,n){return O?Ye(4,1,e,t,n):0}function Se(e,t){if(O)return Ye(5,1,e,t)}function Ae(e,t){if(O)return Ye(6,1,e,t)}function Te(e,t,n){if(O)return Ye(7,1,e,t,n)}function Me(e,t,n){return O?Ye(8,1,e,t,n):0}function Ee(e,t){if(O)return Ye(9,1,e,t)}function Re(e,t,n){if(O)return Ye(10,1,e,t,n)}function xe(e,t,n,r){if(O)return Ye(11,1,e,t,n,r)}function Ce(e,t,n,r){if(O)return Ye(12,1,e,t,n,r)}function Pe(e,t,n,r){if(O)return Ye(13,1,e,t,n,r)}function ke(e){if(O)return Ye(14,1,e)}function De(e,t){if(O)return Ye(15,1,e,t)}function Fe(e,t,n){if(O)return Ye(16,1,e,t,n)}function Ie(e){Atomics.store(a(),e>>2,1),it()&&dt(e),Atomics.compareExchange(a(),e>>2,1,0)}function Ue(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function He(e,t,n,r,a,o){return O?Ye(17,1,e,t,n,r,a,o):-52}function Le(e,t,n,r,a,o){if(O)return Ye(18,1,e,t,n,r,a,o)}function We(e){var n=B(e)+1,r=st(n);return r&&N(e,t(),r,n),r}function je(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return Ye(19,1,e,t,n);var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(s),t=r(u),e=We(e),t=We(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function Ye(e,t){var n=arguments.length-2,r=arguments;return ge((()=>{for(var a=_t(8*n),o=a>>3,s=0;s<n;s++){var u=r[2+s];i()[o+s>>>0]=u}return pt(e,n,a,t)}))}s.invokeEntryPoint=function(e,t){var n=_e[e];n||(e>=_e.length&&(_e.length=e+1),_e[e]=n=$.get(e)),e=n(t),K()?de.Ta(e):gt(e)},s.executeNotifiedProxyingQueue=Ie,ve=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-s.__performance_now_clock_drift:()=>performance.now();var ze,Ne=[],Be={};function Ge(){if(!ze){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Be)void 0===Be[e]?delete t[e]:t[e]=Be[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);ze=n}return ze}function qe(e,n){if(O)return Ye(20,1,e,n);var r=0;return Ge().forEach((function(a,i){var s=n+r;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,r+=a.length+1})),0}function $e(e,t){if(O)return Ye(21,1,e,t);var n=Ge();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function Ve(e){return O?Ye(22,1,e):52}function Je(e,t,n,r){return O?Ye(23,1,e,t,n,r):52}function Xe(e,t,n,r,a){return O?Ye(24,1,e,t,n,r,a):70}var Qe=[null,[],[]];function Ke(e,t){var n=Qe[e];0===t||10===t?((1===e?R:x)(Y(n,0)),n.length=0):n.push(t)}function Ze(e,t,n,a){if(O)return Ye(25,1,e,t,n,a);for(var i=0,s=0;s<n;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++)Ke(e,r()[u+l>>>0]);i+=c}return o()[a>>2>>>0]=i,0}function et(e){return 0==e%4&&(0!=e%100||0==e%400)}var tt=[31,29,31,30,31,30,31,31,30,31,30,31],nt=[31,28,31,30,31,30,31,31,30,31,30,31];function rt(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Ka;for(e=new Date(new Date(e.La+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(et(e.getFullYear())?tt:nt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={jb:a()[o>>2>>>0],ib:a()[o+4>>2>>>0],Pa:a()[o+8>>2>>>0],Ra:a()[o+12>>2>>>0],Qa:a()[o+16>>2>>>0],La:a()[o+20>>2>>>0],Ha:a()[o+24>>2>>>0],Ka:a()[o+28>>2>>>0],pb:a()[o+32>>2>>>0],hb:a()[o+36>>2>>>0],kb:f?z(f):\\\"\\\"},r=z(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Ha].substring(0,3)},\\\"%A\\\":function(e){return d[e.Ha]},\\\"%b\\\":function(e){return m[e.Qa].substring(0,3)},\\\"%B\\\":function(e){return m[e.Qa]},\\\"%C\\\":function(e){return s((e.La+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.Ra,2)},\\\"%e\\\":function(e){return i(e.Ra,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return s(e.Pa,2)},\\\"%I\\\":function(e){return 0==(e=e.Pa)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Qa-1;t+=(et(e.La+1900)?tt:nt)[n++]);return s(e.Ra+t,3)},\\\"%m\\\":function(e){return s(e.Qa+1,2)},\\\"%M\\\":function(e){return s(e.ib,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Pa&&12>e.Pa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.jb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ha||7},\\\"%U\\\":function(e){return s(Math.floor((e.Ka+7-e.Ha)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Ka+7-(e.Ha+6)%7)/7);if(2>=(e.Ha+371-e.Ka-2)%7&&t++,t)53==t&&(4==(n=(e.Ha+371-e.Ka)%7)||3==n&&et(e.La)||(t=1));else{t=52;var n=(e.Ha+7-e.Ka-1)%7;(4==n||5==n&&et(e.La%400-1))&&t++}return s(t,2)},\\\"%w\\\":function(e){return e.Ha},\\\"%W\\\":function(e){return s(Math.floor((e.Ka+7-(e.Ha+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.La+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.La+1900},\\\"%z\\\":function(e){var t=0<=(e=e.hb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.kb},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(B(e)+1);return N(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}de.bb();var at=[null,fe,he,be,Oe,Se,Ae,Te,Me,Ee,Re,xe,Ce,Pe,ke,De,Fe,He,Le,je,qe,$e,Ve,Je,Xe,Ze],ot={L:function(e){lt(e,!b,1,!_),de.Va()},h:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},D:we,e:Oe,S:Se,z:Ae,B:Te,s:Me,Q:Ee,I:Re,P:xe,k:Ce,A:Pe,w:ke,R:De,y:Fe,p:function(){},j:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},x:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>Ie(r)));else if(O)postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(e=de.Ja[e]))return;e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},K:function(){return-1},V:function(e,t){e=new Date(1e3*Ue(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},m:function(e,t){e=new Date(1e3*Ue(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},n:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=o.getTimezoneOffset(),u=Math.min(s,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=s&&u==r):0<n!=(u==r)&&(i=Math.max(s,i),t.setTime(t.getTime()+6e4*((0<n?u:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:He,H:Le,o:function e(t,n,r){e.Za||(e.Za=!0,je(t,n,r))},b:function(){ae(\\\"\\\")},i:function(){if(!w&&!b){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";ye||(ye={}),ye[e]||(ye[e]=1,w&&(e=\\\"warning: \\\"+e),x(e))}},u:function(){return 4294901760},c:ve,O:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},v:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Ne.length=t,n>>=3;for(var r=0;r<t;r++)Ne[r]=i()[n+r>>>0];return(0>e?se[-e-1]:at[e]).apply(null,Ne)},t:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{P.grow(o-D.byteLength+65535>>>16),G(P.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\\\"unwind\\\"},M:qe,N:$e,C:pe,d:Ve,g:Je,q:Xe,f:Ze,a:P||s.wasmMemory,W:rt,r:function(e,t,n,r){return rt(e,t,n,r)}};!function(){function e(e,t){s.asm=e.exports,de.Wa.push(s.asm.ua),$=s.asm.wa,J.unshift(s.asm.X),k=t,O||(te--,s.monitorRunDependencies&&s.monitorRunDependencies(te),0==te&&(null!==ne&&(clearInterval(ne),ne=null),re&&(e=re,re=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!E&&(_||b)){if(\\\"function\\\"==typeof fetch&&!ee.startsWith(\\\"file://\\\"))return fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+ee+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ie()}));if(f)return new Promise((function(e,t){f(ee,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ie()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\\\"failed to asynchronously prepare wasm: \\\"+e),ae(e)}))}var r={a:ot};if(O||(te++,s.monitorRunDependencies&&s.monitorRunDependencies(te)),s.instantiateWasm)try{return s.instantiateWasm(r,e)}catch(e){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(E||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||oe()||ee.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?n(t):fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\\\"wasm streaming compile failed: \\\"+e),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),s.___wasm_call_ctors=function(){return(s.___wasm_call_ctors=s.asm.X).apply(null,arguments)},s._OrtInit=function(){return(s._OrtInit=s.asm.Y).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.Z).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm._).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.$).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.aa).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ba).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.ca).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.da).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.ea).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.fa).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ga).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.ha).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.ia).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ja).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.ka).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.la).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.ma).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.na).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.oa).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.pa).apply(null,arguments)};var it=s._pthread_self=function(){return(it=s._pthread_self=s.asm.qa).apply(null,arguments)},st=s._malloc=function(){return(st=s._malloc=s.asm.ra).apply(null,arguments)};s._free=function(){return(s._free=s.asm.sa).apply(null,arguments)};var ut=s._fflush=function(){return(ut=s._fflush=s.asm.ta).apply(null,arguments)};s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.ua).apply(null,arguments)};var ct=s.___funcs_on_exit=function(){return(ct=s.___funcs_on_exit=s.asm.va).apply(null,arguments)},lt=s.__emscripten_thread_init=function(){return(lt=s.__emscripten_thread_init=s.asm.xa).apply(null,arguments)};s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.ya).apply(null,arguments)};var ft,pt=s._emscripten_run_in_main_runtime_thread_js=function(){return(pt=s._emscripten_run_in_main_runtime_thread_js=s.asm.za).apply(null,arguments)},dt=s.__emscripten_proxy_execute_task_queue=function(){return(dt=s.__emscripten_proxy_execute_task_queue=s.asm.Aa).apply(null,arguments)},mt=s.__emscripten_thread_free_data=function(){return(mt=s.__emscripten_thread_free_data=s.asm.Ba).apply(null,arguments)},gt=s.__emscripten_thread_exit=function(){return(gt=s.__emscripten_thread_exit=s.asm.Ca).apply(null,arguments)},ht=s._emscripten_stack_set_limits=function(){return(ht=s._emscripten_stack_set_limits=s.asm.Da).apply(null,arguments)},yt=s.stackSave=function(){return(yt=s.stackSave=s.asm.Ea).apply(null,arguments)},vt=s.stackRestore=function(){return(vt=s.stackRestore=s.asm.Fa).apply(null,arguments)},_t=s.stackAlloc=function(){return(_t=s.stackAlloc=s.asm.Ga).apply(null,arguments)};function bt(){function e(){if(!ft&&(ft=!0,s.calledRun=!0,!W)&&(O||me(J),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!O)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();Q.unshift(e)}me(Q)}}if(!(0<te))if(O)u(s),O||me(J),postMessage({cmd:\\\"loaded\\\"});else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)Z();me(V),0<te||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.UTF8ToString=z,s.stringToUTF8=function(e,t,n){return N(e,r(),t,n)},s.lengthBytesUTF8=B,s.keepRuntimeAlive=K,s.wasmMemory=P,s.stackSave=yt,s.stackRestore=vt,s.stackAlloc=_t,s.ExitStatus=ue,s.PThread=de,re=function e(){ft||bt(),ft||(re=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return bt(),e.ready});e.exports=r},932:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,s,u,c,l,f=Object.assign({},t),p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,m=\\\"function\\\"==typeof importScripts,g=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";g?(h=m?n(908).dirname(h)+\\\"/\\\":\\\"//\\\",l=()=>{c||(u=n(384),c=n(908))},o=function(e,t){return l(),e=c.normalize(e),u.readFileSync(e,t?void 0:\\\"utf8\\\")},s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),u.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||m)&&(m?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},m&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,v=t.print||console.log.bind(console),_=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(y=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&Y(\\\"no native wasm support detected\\\");var b,w,O,S,A,T,M=!1,E=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function R(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&E)return E.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function x(e,t){return(e>>>=0)?R(S,e,t):\\\"\\\"}function C(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function P(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function k(){var e=b.buffer;w=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=T=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var D=[],F=[],I=[];function U(){var e=t.preRun.shift();D.unshift(e)}var H,L=0,W=null,j=null;function Y(e){throw t.onAbort&&t.onAbort(e),_(e=\\\"Aborted(\\\"+e+\\\")\\\"),M=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function z(){return H.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(H=\\\"ort-wasm.wasm\\\",!z()){var N=H;H=t.locateFile?t.locateFile(N,h):h+N}function B(){var e=H;try{if(e==H&&y)return new Uint8Array(y);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){Y(e)}}function G(e){for(;0<e.length;)e.shift()(t)}function q(e){var t=P(e)+1,n=ne(t);return n&&C(e,O,n,t),n}var $={};function V(){if(!J){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in $)void 0===$[e]?delete t[e]:t[e]=$[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);J=n}return J}var J,X=[null,[],[]];function Q(e){return 0==e%4&&(0!=e%100||0==e%400)}var K=[31,29,31,30,31,30,31,31,30,31,30,31],Z=[31,28,31,30,31,30,31,31,30,31,30,31];function ee(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.ma;for(e=new Date(new Date(e.na+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Q(e.getFullYear())?K:Z)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=A[r+40>>2>>>0];for(var l in r={ua:A[r>>2>>>0],ta:A[r+4>>2>>>0],oa:A[r+8>>2>>>0],qa:A[r+12>>2>>>0],pa:A[r+16>>2>>>0],na:A[r+20>>2>>>0],ia:A[r+24>>2>>>0],ma:A[r+28>>2>>>0],wa:A[r+32>>2>>>0],sa:A[r+36>>2>>>0],va:c?x(c):\\\"\\\"},n=x(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ia].substring(0,3)},\\\"%A\\\":function(e){return f[e.ia]},\\\"%b\\\":function(e){return p[e.pa].substring(0,3)},\\\"%B\\\":function(e){return p[e.pa]},\\\"%C\\\":function(e){return o((e.na+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.qa,2)},\\\"%e\\\":function(e){return a(e.qa,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.oa,2)},\\\"%I\\\":function(e){return 0==(e=e.oa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.pa-1;t+=(Q(e.na+1900)?K:Z)[n++]);return o(e.qa+t,3)},\\\"%m\\\":function(e){return o(e.pa+1,2)},\\\"%M\\\":function(e){return o(e.ta,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.oa&&12>e.oa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.ua,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ia||7},\\\"%U\\\":function(e){return o(Math.floor((e.ma+7-e.ia)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.ma+7-(e.ia+6)%7)/7);if(2>=(e.ia+371-e.ma-2)%7&&t++,t)53==t&&(4==(n=(e.ia+371-e.ma)%7)||3==n&&Q(e.na)||(t=1));else{t=52;var n=(e.ia+7-e.ma-1)%7;(4==n||5==n&&Q(e.na%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ia},\\\"%W\\\":function(e){return o(Math.floor((e.ma+7-(e.ia+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.na+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.na+1900},\\\"%z\\\":function(e){var t=0<=(e=e.sa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.va},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(P(e)+1);return C(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(O.set(l,e>>>0),l.length-1)}var te={d:function(){return 0},I:function(){},w:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(){},F:function(){},h:function(){},x:function(){},t:function(){},H:function(){},v:function(){},n:function(){},u:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},o:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},i:function(){return Date.now()},J:function(){return!0},j:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getUTCSeconds(),A[t+4>>2>>>0]=e.getUTCMinutes(),A[t+8>>2>>>0]=e.getUTCHours(),A[t+12>>2>>>0]=e.getUTCDate(),A[t+16>>2>>>0]=e.getUTCMonth(),A[t+20>>2>>>0]=e.getUTCFullYear()-1900,A[t+24>>2>>>0]=e.getUTCDay(),A[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},k:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),A[t+20>>2>>>0]=e.getFullYear()-1900,A[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);A[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,A[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),A[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},l:function(e){var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),n=A[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),s=Math.min(i,o);return 0>n?A[e+32>>2>>>0]=Number(o!=i&&s==r):0<n!=(s==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},z:function(){return-52},A:function(){},m:function e(t,n,r){e.ra||(e.ra=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();A[e>>2>>>0]=60*Math.max(a,s),A[t>>2>>>0]=Number(a!=s),e=r(o),t=r(i),e=q(e),t=q(t),s<a?(T[n>>2>>>0]=e,T[n+4>>2>>>0]=t):(T[n>>2>>>0]=t,T[n+4>>2>>>0]=e)}(t,n,r))},a:function(){Y(\\\"\\\")},s:function(){return 4294901760},e:g?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),E:function(e,t,n){S.copyWithin(e>>>0,t>>>0,t+n>>>0)},b:function(e){var t=S.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{b.grow(a-w.byteLength+65535>>>16),k();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},C:function(e,t){var n=0;return V().forEach((function(r,a){var o=t+n;for(a=T[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)O[a++>>0>>>0]=r.charCodeAt(o);O[a>>0>>>0]=0,n+=r.length+1})),0},D:function(e,t){var n=V();T[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),T[t>>2>>>0]=r,0},c:function(){return 52},g:function(){return 52},p:function(){return 70},f:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=T[t>>2>>>0],s=T[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var c=S[i+u>>>0],l=X[e];0===c||10===c?((1===e?v:_)(R(l,0)),l.length=0):l.push(c)}a+=s}return T[r>>2>>>0]=a,0},K:ee,q:function(e,t,n,r){return ee(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,b=t.asm.L,k(),F.unshift(t.asm.M),L--,t.monitorRunDependencies&&t.monitorRunDependencies(L),0==L&&(null!==W&&(clearInterval(W),W=null),j&&(e=j,j=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!y&&(d||m)){if(\\\"function\\\"==typeof fetch&&!H.startsWith(\\\"file://\\\"))return fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+H+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return B()}));if(i)return new Promise((function(e,t){i(H,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return B()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){_(\\\"failed to asynchronously prepare wasm: \\\"+e),Y(e)}))}var o={a:te};if(L++,t.monitorRunDependencies&&t.monitorRunDependencies(L),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return _(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||z()||H.startsWith(\\\"file://\\\")||g||\\\"function\\\"!=typeof fetch?r(n):fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return _(\\\"wasm streaming compile failed: \\\"+e),_(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.M).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.N).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.O).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.P).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.Q).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.R).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.S).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.T).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.U).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.V).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.W).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.X).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.Y).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.Z).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm._).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.$).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.aa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ba).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ca).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.da).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ea).apply(null,arguments)};var ne=t._malloc=function(){return(ne=t._malloc=t.asm.fa).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ga).apply(null,arguments)},t._fflush=function(){return(t._fflush=t.asm.ha).apply(null,arguments)};var re,ae=t.stackSave=function(){return(ae=t.stackSave=t.asm.ja).apply(null,arguments)},oe=t.stackRestore=function(){return(oe=t.stackRestore=t.asm.ka).apply(null,arguments)},ie=t.stackAlloc=function(){return(ie=t.stackAlloc=t.asm.la).apply(null,arguments)};function se(){function e(){if(!re&&(re=!0,t.calledRun=!0,!M)){if(G(F),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();I.unshift(e)}G(I)}}if(!(0<L)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)U();G(D),0<L||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.UTF8ToString=x,t.stringToUTF8=function(e,t,n){return C(e,S,t,n)},t.lengthBytesUTF8=P,t.stackSave=ae,t.stackRestore=oe,t.stackAlloc=ie,j=function e(){re||se(),re||(j=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return se(),e.ready});e.exports=r},967:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",r,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},586:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setRunOptions=e=>{const t=(0,o.getInstance)();let n=0;const i=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=(0,a.allocWasmString)(e.tag,i)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can't set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(967),a=n(983),o=n(361);t.setSessionOptions=e=>{const t=(0,o.getInstance)();let n=0;const i=[],s=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")})(s);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(s.graphOptimizationLevel=\\\"all\\\");const u=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(s.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(s.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(s.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(s.executionMode=\\\"sequential\\\");const c=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(s.executionMode);let l=0;if(void 0!==(null==e?void 0:e.logId)&&(l=(0,a.allocWasmString)(e.logId,i)),void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);if(void 0===(null==e?void 0:e.enableProfiling)&&(s.enableProfiling=!1),n=t._OrtCreateSessionOptions(u,!!s.enableCpuMemArena,!!s.enableMemPattern,c,!!s.enableProfiling,0,l,s.logSeverityLevel,s.logVerbosityLevel),0===n)throw new Error(\\\"Can't create session options\\\");return(null==e?void 0:e.executionProviders)&&((e,t,n)=>{for(const r of t){let t=\\\"string\\\"==typeof r?r:r.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${t}`)}const i=(0,a.allocWasmString)(t,n);if(0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,i))throw new Error(`Can't append execution provider: ${t}`)}})(n,e.executionProviders,i),void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);if(0!==t._OrtAddSessionConfigEntry(n,o,s))throw new Error(`Can't set a session config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),i.forEach(t._free),e}}},983:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const r=n(361);t.allocWasmString=(e,t)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=void 0;const r=n(586),a=n(919),o=n(983),i=n(361);t.initOrt=(e,t)=>{const n=(0,i.getInstance)()._OrtInit(e,t);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const s=new Map;t.createSessionAllocate=e=>{const t=(0,i.getInstance)(),n=t._malloc(e.byteLength);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,i.getInstance)();let r=0,o=0,u=[];try{if([o,u]=(0,a.setSessionOptions)(t),r=n._OrtCreateSession(e[0],e[1],o),0===r)throw new Error(\\\"Can't create a session\\\")}finally{n._free(e[0]),n._OrtReleaseSessionOptions(o),u.forEach(n._free)}const c=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],d=[],m=[];for(let e=0;e<c;e++){const t=n._OrtGetInputName(r,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");p.push(t),f.push(n.UTF8ToString(t))}for(let e=0;e<l;e++){const t=n._OrtGetOutputName(r,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");m.push(t),d.push(n.UTF8ToString(t))}return s.set(r,[r,p,m]),[r,f,d]},t.createSession=(e,n)=>{const r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=e=>{const t=(0,i.getInstance)(),n=s.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),s.delete(e)};const u=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},c=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},l=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}};t.run=(e,t,n,a,f)=>{const p=(0,i.getInstance)(),d=s.get(e);if(!d)throw new Error(\\\"invalid session id\\\");const m=d[0],g=d[1],h=d[2],y=t.length,v=a.length;let _=0,b=[];const w=[],O=[];try{[_,b]=(0,r.setRunOptions)(f);for(let e=0;e<y;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let i,s;if(Array.isArray(a)){s=4*a.length,i=p._malloc(s),O.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);p.HEAPU32[e++]=(0,o.allocWasmString)(a[t],O)}}else s=a.byteLength,i=p._malloc(s),O.push(i),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,s),i);const c=p.stackSave(),l=p.stackAlloc(4*r.length);try{let e=l/4;r.forEach((t=>p.HEAP32[e++]=t));const n=p._OrtCreateTensor(u(t),i,s,l,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");w.push(n)}finally{p.stackRestore(c)}}const e=p.stackSave(),i=p.stackAlloc(4*y),s=p.stackAlloc(4*y),d=p.stackAlloc(4*v),S=p.stackAlloc(4*v);try{let n=i/4,r=s/4,o=d/4,u=S/4;for(let e=0;e<y;e++)p.HEAPU32[n++]=w[e],p.HEAPU32[r++]=g[t[e]];for(let e=0;e<v;e++)p.HEAPU32[o++]=0,p.HEAPU32[u++]=h[a[e]];let f=p._OrtRun(m,s,i,y,S,v,d,_);const b=[];if(0===f)for(let e=0;e<v;e++){const t=p.HEAPU32[d/4+e],n=p.stackSave(),r=p.stackAlloc(16);let a,o=0;try{if(f=p._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==f)throw new Error(`Can't access output tensor data. error code = ${f}`);let e=r/4;const i=p.HEAPU32[e++];o=p.HEAPU32[e++];const s=p.HEAPU32[e++],u=p.HEAPU32[e++],d=[];for(let e=0;e<u;e++)d.push(p.HEAPU32[s/4+e]);p._OrtFree(s);const m=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=c(i),\\\"string\\\"===a){const e=[];let t=o/4;for(let n=0;n<m;n++){const r=p.HEAPU32[t++],a=n===m-1?void 0:p.HEAPU32[t]-r;e.push(p.UTF8ToString(r,a))}b.push([a,d,e])}else{const e=new(l(a))(m);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(p.HEAPU8.subarray(o,o+e.byteLength)),b.push([a,d,e])}}finally{p.stackRestore(n),\\\"string\\\"===a&&o&&p._free(o),p._OrtReleaseTensor(t)}}if(0===f)return b;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(e)}}finally{w.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(_),b.forEach(p._free)}},t.endProfiling=e=>{const t=(0,i.getInstance)(),n=s.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}u((r=r.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const u=o(n(449)),c=s(n(932)),l=n(474);let f,p=!1,d=!1,m=!1;const g=(e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";t.initializeWebAssembly=e=>i(void 0,void 0,void 0,(function*(){if(p)return Promise.resolve();if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(m)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");d=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),s=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,h=g(!1,o),y=g(i,o),v=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[y]:void 0;let _=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{_=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const r=o?l:c.default,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):e===h?null!=v?v:(null!=s?s:t)+y:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=u.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{d=!1,p=!0,f=t,e()}),(e=>{d=!1,m=!0,t(e)}))}))),yield Promise.race(b),_)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)})),t.getInstance=()=>{if(p&&f)return f;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!p||d||m||(d=!0,null===(e=f.PThread)||void 0===e||e.terminateAllThreads(),f=void 0,d=!1,p=!1,m=!0)}},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const e=n(349),t=n(361);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})));break;case\\\"init-ort\\\":try{const{numThreads:t,loggingLevel:r}=n.data.in;(0,e.initOrt)(t,r),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=n.data.in,r=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:r})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:r}=n.data.in,a=(0,e.createSessionFinalize)(t,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=(0,e.createSession)(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in,s=(0,e.run)(t,r,a,o,i);postMessage({type:\\\"run\\\",out:s},(0,e.extractTransferableBuffers)(s))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","_scriptDir","e","document","currentScript","src","n","k","buffer","C","G","I","t","F","r","H","P","u","Y","o","s","ready","Promise","f","c","l","p","m","d","h","Object","assign","g","y","_","window","b","importScripts","v","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","O","T","locateFile","__dirname","normalize","readFileSync","Uint8Array","readFile","argv","length","replace","slice","on","ie","V","exitCode","x","exit","inspect","console","error","Worker","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","M","log","bind","A","warn","writeSync","S","R","print","printErr","thisProgram","quit","wasmBinary","E","noExitRuntime","WebAssembly","re","D","U","W","TextDecoder","j","decode","SharedArrayBuffer","subarray","String","fromCharCode","N","L","charCodeAt","q","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","B","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","z","J","Q","K","X","Z","preRun","shift","unshift","$","ee","ne","te","postMessage","cmd","arg","onAbort","RuntimeError","ae","startsWith","ue","oe","this","name","message","se","pe","Ja","Sa","fe","ab","Oa","push","Ia","start_routine","gb","Ya","pthread_ptr","Na","time","now","lb","loaded","ce","je","Ua","onExit","le","he","fn","me","sn","Xe","Ve","Ma","Wa","bb","cb","nb","receiveObjectTransfer","fb","threadInitTLS","Va","setExitStatus","Ta","values","terminate","splice","dn","forEach","eb","onmessage","data","$a","targetThread","un","ob","transferList","Fe","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","Xa","pop","de","yn","_n","PThread","establishStackSpace","gn","ge","ye","_e","be","ve","mb","we","Oe","Te","Me","Ae","Se","Re","xe","Ee","ke","De","Ce","Ie","Atomics","store","mn","compareExchange","He","Pe","Ye","Ue","We","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","Number","arguments","bn","pn","invokeEntryPoint","get","hn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Ne","Le","qe","Ge","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Be","ze","Je","Qe","Ke","Ze","$e","en","nn","tn","toString","getMonth","getDate","getDay","Ka","La","getTime","setDate","setMonth","setFullYear","jb","ib","Pa","Ra","Qa","Ha","pb","hb","kb","RegExp","split","substring","floor","abs","includes","Array","set","rn","an","cn","setTimeout","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","min","setTime","Za","copyWithin","hardwareConcurrency","apply","call","grow","asm","ua","wa","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","_OrtCreateSessionOptions","_OrtAppendExecutionProvider","_OrtAddSessionConfigEntry","_OrtReleaseSessionOptions","aa","_OrtCreateSession","ba","_OrtReleaseSession","ca","_OrtGetInputCount","da","_OrtGetOutputCount","ea","_OrtGetInputName","fa","_OrtGetOutputName","ga","_OrtFree","ha","_OrtCreateTensor","ia","_OrtGetTensorData","ja","_OrtReleaseTensor","ka","_OrtCreateRunOptions","la","_OrtAddRunConfigEntry","ma","_OrtReleaseRunOptions","na","_OrtRun","oa","_OrtEndProfiling","pa","_pthread_self","qa","_malloc","ra","_free","sa","_fflush","ta","__emscripten_tls_init","___funcs_on_exit","va","__emscripten_thread_init","xa","__emscripten_thread_crashed","ya","ln","_emscripten_run_in_main_runtime_thread_js","za","__emscripten_proxy_execute_task_queue","Aa","__emscripten_thread_free_data","Ba","__emscripten_thread_exit","Ca","_emscripten_stack_set_limits","Da","stackSave","Ea","stackRestore","Fa","stackAlloc","Ga","vn","calledRun","onRuntimeInitialized","postRun","setStatus","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","undefined","fs","ctx","params","offset","index","pending","reject","err","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","__esModule","Guid","guid","TypeError","value","EMPTY","isGuid","validator","create","gen","createEmpty","parse","raw","count","out","random","equals","other","isEmpty","toJSON","Long","wasm","Instance","Module","low","high","unsigned","isLong","obj","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","result","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","bytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","int32","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","version","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","finish","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","onnxjsBackend","init","createSessionHandler","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","env","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","wasmBackend","initWasm","handler","OnnxruntimeWebAssemblySessionHandler","registerBackend","AttributeWithCacheKeyImpl","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","static","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","dispose","isBackend","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","canvas","OffscreenCanvas","createElement","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","checkTimer","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","eventRes","endSync","toFixed","currentTime","previousPointer","started","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","graphInputTypes","graphInputDims","_model","promisify","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","path","getLogLevel","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","executionProviders","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}