{"version":3,"file":"ort-web.min.js","mappings":"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","sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/jsep/backend-webgpu.ts","webpack://onnxruntime-web/./lib/wasm/jsep/init.ts","webpack://onnxruntime-web/./lib/wasm/jsep/log.ts","webpack://onnxruntime-web/./lib/wasm/jsep/util.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/types.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/string-utils.ts","webpack://onnxruntime-web/./lib/wasm/wasm-common.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/../node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/external umd {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/global","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    const data = getTargetBuffer();\n    data.set(new Uint8Array(arrayBuffer));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    return new Float32Array(this.module.HEAP8.buffer, this.data, ShapeUtil.size(this.dims));\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get customData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    const backend = new WebGpuBackend();\n    await backend.initialize();\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<typeof env.logLevel>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(env.logLevel!);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (env.debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  constructor(private backend: WebGpuBackend /* , private reuseBuffer: boolean */) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n    // GPU copy\n    this.backend.getCommandEncoder().copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    // !!!\n    // !!! IMPORTANT: TODO: whether we should keep the storage buffer every time, or always create new ones.\n    // !!!                  This need to be figured out by performance test results.\n    // !!!\n\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    // create gpu buffer\n    const gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: cachedData.originalSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, cachedData.originalSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      buffer.destroy();\n    }\n    for (const buffer of this.buffersPending) {\n      buffer.destroy();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['Relu', [unaryOps.relu]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.customData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.customData.wT) {\n    context.customData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly customData: {[key: string]: unknown};\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {init as initJsep} from './jsep/init';\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {getInstance, initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n\n      // TODO: support JSEP in worker\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n\n    // init JSEP if available\n    await initJsep(getInstance());\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\nimport {logLevelStringToEnum} from './wasm-common';\n\nlet ortInit: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          throw new Error('Can\\'t create a tensor');\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode === 0) {\n        for (let i = 0; i < outputCount; i++) {\n          const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n          const beforeGetTensorDataStack = wasm.stackSave();\n          // stack allocate 4 pointer value\n          const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n          let type: Tensor.Type|undefined, dataOffset = 0;\n          try {\n            errorCode = wasm._OrtGetTensorData(\n                tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n            if (errorCode !== 0) {\n              throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n            }\n            let tensorDataIndex = tensorDataOffset / 4;\n            const dataType = wasm.HEAPU32[tensorDataIndex++];\n            dataOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n            const dims = [];\n            for (let i = 0; i < dimsLength; i++) {\n              dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n            }\n            wasm._OrtFree(dimsOffset);\n\n            const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n            type = tensorDataTypeEnumToString(dataType);\n            if (type === 'string') {\n              const stringData: string[] = [];\n              let dataIndex = dataOffset / 4;\n              for (let i = 0; i < size; i++) {\n                const offset = wasm.HEAPU32[dataIndex++];\n                const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n              }\n              output.push([type, dims, stringData]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                  .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data]);\n            }\n          } finally {\n            wasm.stackRestore(beforeGetTensorDataStack);\n            if (type === 'string' && dataOffset) {\n              wasm._free(dataOffset);\n            }\n            wasm._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n\n      if (errorCode === 0) {\n        return output;\n      } else {\n        throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n      }\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(wasm._OrtReleaseTensor);\n    inputAllocs.forEach(wasm._free);\n\n    wasm._OrtReleaseRunOptions(runOptionsHandle);\n    runOptionsAllocs.forEach(wasm._free);\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.15.1\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={899:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",r,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},918:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setRunOptions=e=>{const t=(0,o.getInstance)();let n=0;const i=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=(0,a.allocWasmString)(e.tag,i)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can't set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},622:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setSessionOptions=e=>{var t,n,i,s;const u=(0,o.getInstance)();let c=0;const l=[],f=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(f);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=f.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),p=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(n=f.executionMode)&&void 0!==n?n:\\\"sequential\\\"),d=\\\"string\\\"==typeof f.logId?(0,a.allocWasmString)(f.logId,l):0,m=null!==(i=f.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log serverity level is not valid: ${m}`);const g=null!==(s=f.logVerbosityLevel)&&void 0!==s?s:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\\\"string\\\"==typeof f.optimizedModelFilePath?(0,a.allocWasmString)(f.optimizedModelFilePath,l):0;if(c=u._OrtCreateSessionOptions(e,!!f.enableCpuMemArena,!!f.enableMemPattern,p,!!f.enableProfiling,0,d,m,g,h),0===c)throw new Error(\\\"Can't create session options\\\");return f.executionProviders&&((e,t,n)=>{for(const r of t){let t=\\\"string\\\"==typeof r?r:r.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${t}`)}const i=(0,a.allocWasmString)(t,n);if(0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,i))throw new Error(`Can't append execution provider: ${t}`)}})(c,f.executionProviders,l),void 0!==f.extra&&(0,r.iterateExtraOptions)(f.extra,\\\"\\\",new WeakSet,((e,t)=>{const n=(0,a.allocWasmString)(e,l),r=(0,a.allocWasmString)(t,l);if(0!==u._OrtAddSessionConfigEntry(c,n,r))throw new Error(`Can't set a session config entry: ${e} - ${t}`)})),[c,l]}catch(e){throw 0!==c&&u._OrtReleaseSessionOptions(c),l.forEach(u._free),e}}},444:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const r=n(263);t.allocWasmString=(e,t)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=void 0;const r=n(918),a=n(622),o=n(444),i=n(917),s=n(263);t.initOrt=(e,t)=>{const n=(0,s.getInstance)()._OrtInit(e,t);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const u=new Map;t.createSessionAllocate=e=>{const t=(0,s.getInstance)(),n=t._malloc(e.byteLength);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,s.getInstance)();let r=0,o=0,i=[];try{if([o,i]=(0,a.setSessionOptions)(t),r=n._OrtCreateSession(e[0],e[1],o),0===r)throw new Error(\\\"Can't create a session\\\")}finally{n._free(e[0]),0!==o&&n._OrtReleaseSessionOptions(o),i.forEach(n._free)}const c=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],d=[],m=[];for(let e=0;e<c;e++){const t=n._OrtGetInputName(r,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");p.push(t),f.push(n.UTF8ToString(t))}for(let e=0;e<l;e++){const t=n._OrtGetOutputName(r,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");m.push(t),d.push(n.UTF8ToString(t))}return u.set(r,[r,p,m]),[r,f,d]},t.createSession=(e,n)=>{const r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=e=>{const t=(0,s.getInstance)(),n=u.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),u.delete(e)},t.run=async(e,t,n,a,c)=>{const l=(0,s.getInstance)(),f=u.get(e);if(!f)throw new Error(\\\"invalid session id\\\");const p=f[0],d=f[1],m=f[2],g=t.length,h=a.length;let y=0,v=[];const w=[],b=[];try{[y,v]=(0,r.setRunOptions)(c);for(let e=0;e<g;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let s,u;if(Array.isArray(a)){u=4*a.length,s=l._malloc(u),b.push(s);let e=s/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);l.HEAPU32[e++]=(0,o.allocWasmString)(a[t],b)}}else u=a.byteLength,s=l._malloc(u),b.push(s),l.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),s);const c=l.stackSave(),f=l.stackAlloc(4*r.length);try{let e=f/4;r.forEach((t=>l.HEAP32[e++]=t));const n=l._OrtCreateTensor((0,i.tensorDataTypeStringToEnum)(t),s,u,f,r.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");w.push(n)}finally{l.stackRestore(c)}}const e=l.stackSave(),s=l.stackAlloc(4*g),u=l.stackAlloc(4*g),f=l.stackAlloc(4*h),_=l.stackAlloc(4*h);try{let e=s/4,n=u/4,r=f/4,o=_/4;for(let r=0;r<g;r++)l.HEAPU32[e++]=w[r],l.HEAPU32[n++]=d[t[r]];for(let e=0;e<h;e++)l.HEAPU32[r++]=0,l.HEAPU32[o++]=m[a[e]];let c=l._OrtRun(p,u,s,g,_,h,f,y);const v=l.jsepRunPromise;v&&void 0!==v.then&&(c=await v);const b=[];if(0===c)for(let e=0;e<h;e++){const t=l.HEAPU32[f/4+e],n=l.stackSave(),r=l.stackAlloc(16);let a,o=0;try{if(c=l._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==c)throw new Error(`Can't access output tensor data. error code = ${c}`);let e=r/4;const n=l.HEAPU32[e++];o=l.HEAPU32[e++];const s=l.HEAPU32[e++],u=l.HEAPU32[e++],f=[];for(let e=0;e<u;e++)f.push(l.HEAPU32[s/4+e]);l._OrtFree(s);const p=0===f.length?1:f.reduce(((e,t)=>e*t));if(a=(0,i.tensorDataTypeEnumToString)(n),\\\"string\\\"===a){const e=[];let t=o/4;for(let n=0;n<p;n++){const r=l.HEAPU32[t++],a=n===p-1?void 0:l.HEAPU32[t]-r;e.push(l.UTF8ToString(r,a))}b.push([a,f,e])}else{const e=new((0,i.tensorTypeToTypedArrayConstructor)(a))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(l.HEAPU8.subarray(o,o+e.byteLength)),b.push([a,f,e])}}finally{l.stackRestore(n),\\\"string\\\"===a&&o&&l._free(o),l._OrtReleaseTensor(t)}}if(0===c)return b;throw new Error(`failed to call OrtRun(). error code = ${c}.`)}finally{l.stackRestore(e)}}finally{w.forEach(l._OrtReleaseTensor),b.forEach(l._free),l._OrtReleaseRunOptions(y),v.forEach(l._free)}},t.endProfiling=e=>{const t=(0,s.getInstance)(),n=u.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const i=o(n(449)),s=n(932),u=n(474);let c,l=!1,f=!1,p=!1;t.initializeWebAssembly=async e=>{if(l)return Promise.resolve();if(f)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(p)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");f=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),d=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),m=e.wasmPaths,g=\\\"string\\\"==typeof m?m:void 0,h=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(d,o),y=\\\"object\\\"==typeof m?m[h]:void 0;let v=!1;const w=[];if(t>0&&w.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),w.push(new Promise(((e,t)=>{const r=o?u:s,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=g?g:t)+h:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=i.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{f=!1,l=!0,c=t,e()}),(e=>{f=!1,p=!0,t(e)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(l&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!l||f||p||(f=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,f=!1,l=!1,p=!0)}},474:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return F.buffer!=k&&B(F.buffer),D}function r(){return F.buffer!=k&&B(F.buffer),I}function a(){return F.buffer!=k&&B(F.buffer),U}function o(){return F.buffer!=k&&B(F.buffer),H}function i(){return F.buffer!=k&&B(F.buffer),W}var s,u,c;e=e||{},s||(s=void 0!==e?e:{}),s.ready=new Promise((function(e,t){u=e,c=t}));var l,f,p,d,m,g,h=Object.assign({},s),y=\\\"./this.program\\\",v=(e,t)=>{throw t},w=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,_=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=s.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function T(e){return s.locateFile?s.locateFile(e,S):S+e}if(_){let t;S=b?n(908).dirname(S)+\\\"/\\\":\\\"//\\\",g=()=>{m||(d=n(384),m=n(908))},l=function(e,t){return g(),e=m.normalize(e),d.readFileSync(e,t?void 0:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{g(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof ie))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,t)=>{if(C)throw process.exitCode=e,t;t instanceof ie||x(\\\"exiting due to exception: \\\"+t),process.exit(e)},s.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=t.Worker}else(w||b)&&(b?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",_||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},b&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));_&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var A=console.log.bind(console),E=console.warn.bind(console);_&&(g(),A=e=>d.writeSync(1,e+\\\"\\\\n\\\"),E=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,R=s.print||A,x=s.printErr||E;Object.assign(s,h),h=null,s.thisProgram&&(y=s.thisProgram),s.quit&&(v=s.quit),s.wasmBinary&&(M=s.wasmBinary);var C=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&ne(\\\"no native wasm support detected\\\");var F,P,k,D,I,U,H,W,j=!1,Y=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function L(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&Y)return Y.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?L(r(),e,t):\\\"\\\"}function G(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function N(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function B(e){k=e,s.HEAP8=D=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=U=new Int32Array(e),s.HEAPU8=I=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=W=new Float64Array(e)}O&&(k=s.buffer);var $=s.INITIAL_MEMORY||16777216;if(O)F=s.wasmMemory,k=s.buffer;else if(s.wasmMemory)F=s.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:$/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),_&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");F&&(k=F.buffer),$=k.byteLength,B(k);var q,V=[],J=[],X=[];function Q(){var e=s.preRun.shift();V.unshift(e)}var K,Z=0,ee=null,te=null;function ne(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):s.onAbort&&s.onAbort(e),x(e=\\\"Aborted(\\\"+e+\\\")\\\"),j=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function re(){return K.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ae(){var e=K;try{if(e==K&&M)return new Uint8Array(M);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ne(e)}}K=\\\"ort-wasm-threaded.wasm\\\",re()||(K=T(K));var oe={};function ie(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function se(e){(e=fe.Ha[e])||ne(),fe.Qa(e)}function ue(e){var t=fe.Ya();if(!t)return 6;fe.Ma.push(t),fe.Ha[e.Ga]=t,t.Ga=e.Ga;var n={cmd:\\\"run\\\",start_routine:e.cb,arg:e.Va,pthread_ptr:e.Ga};return t.La=()=>{n.time=performance.now(),t.postMessage(n,e.jb)},t.loaded&&(t.La(),delete t.La),0}function ce(e){if(O)return We(1,1,e);C||(fe.eb(),s.onExit&&s.onExit(e),j=!0),v(e,new ie(e))}function le(e,t){if(!t&&O)throw de(e),\\\"unwind\\\";ce(e)}var fe={Ka:[],Ma:[],Ta:[],Ha:{},Za:function(){O&&fe.$a()},lb:function(){},$a:function(){fe.receiveObjectTransfer=fe.bb,fe.threadInitTLS=fe.Sa,fe.setExitStatus=fe.Ra,C=!1},Ra:function(){},eb:function(){for(var e of Object.values(fe.Ha))fe.Qa(e);for(e of fe.Ka)e.terminate();fe.Ka=[]},Qa:function(e){var t=e.Ga;delete fe.Ha[t],fe.Ka.push(e),fe.Ma.splice(fe.Ma.indexOf(e),1),e.Ga=0,ut(t)},bb:function(){},Sa:function(){fe.Ta.forEach((e=>e()))},ab:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Ga&&(fe.Xa=e.Ga),n.targetThread&&n.targetThread!=nt()){var a=fe.Ha[n.mb];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?Pe(n.queue):\\\"spawnThread\\\"===r?ue(n):\\\"cleanupThread\\\"===r?se(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=fe.Ha[n],delete fe.Ha[n],r.terminate(),ut(n),fe.Ma.splice(fe.Ma.indexOf(r),1),r.Ga=0):\\\"cancelThread\\\"===r?fe.Ha[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.La&&(e.La(),delete e.La)):\\\"print\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?s.onAbort&&s.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);fe.Xa=void 0},e.onerror=e=>{throw x(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},_&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:P})},Ua:function(){var e=T(\\\"ort-wasm-threaded.worker.js\\\");fe.Ka.push(new Worker(e))},Ya:function(){return 0==fe.Ka.length&&(fe.Ua(),fe.ab(fe.Ka[0])),fe.Ka.pop()}};function pe(e){for(;0<e.length;)e.shift()(s)}function de(e){if(O)return We(2,0,e);try{le(e)}catch(e){e instanceof ie||\\\"unwind\\\"==e||v(1,e)}}s.PThread=fe,s.establishStackSpace=function(){var e=nt(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],lt(t,t-e),pt(t)};var me,ge,he=[];function ye(e,t,n,r){return O?We(3,1,e,t,n,r):ve(e,t,n,r)}function ve(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?ye(e,t,n,r):(e={cb:n,Ga:e,Va:r,jb:a},O?(e.kb=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function we(e,t,n){return O?We(4,1,e,t,n):0}function be(e,t){if(O)return We(5,1,e,t)}function _e(e,t){if(O)return We(6,1,e,t)}function Oe(e,t,n){if(O)return We(7,1,e,t,n)}function Se(e,t,n){return O?We(8,1,e,t,n):0}function Te(e,t){if(O)return We(9,1,e,t)}function Ae(e,t,n){if(O)return We(10,1,e,t,n)}function Ee(e,t,n,r){if(O)return We(11,1,e,t,n,r)}function Me(e,t,n,r){if(O)return We(12,1,e,t,n,r)}function Re(e,t,n,r){if(O)return We(13,1,e,t,n,r)}function xe(e){if(O)return We(14,1,e)}function Ce(e,t){if(O)return We(15,1,e,t)}function Fe(e,t,n){if(O)return We(16,1,e,t,n)}function Pe(e){Atomics.store(a(),e>>2,1),nt()&&st(e),Atomics.compareExchange(a(),e>>2,1,0)}function ke(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function De(e,t,n,r,a,o){return O?We(17,1,e,t,n,r,a,o):-52}function Ie(e,t,n,r,a,o){if(O)return We(18,1,e,t,n,r,a,o)}function Ue(e){var n=N(e)+1,r=rt(n);return r&&G(e,t(),r,n),r}function He(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return We(19,1,e,t,n);var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(s),t=r(u),e=Ue(e),t=Ue(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function We(e,t){var n=arguments.length-2,r=arguments;return function(e){var t=ft();return e=e(),pt(t),e}((()=>{for(var a=dt(8*n),o=a>>3,s=0;s<n;s++){var u=r[2+s];i()[o+s>>>0]=u}return it(e,n,a,t)}))}s.invokeEntryPoint=function(e,t){var n=he[e];n||(e>=he.length&&(he.length=e+1),he[e]=n=q.get(e)),e=n(t),C?fe.Ra(e):ct(e)},s.executeNotifiedProxyingQueue=Pe,ge=_?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-s.__performance_now_clock_drift:()=>performance.now();var je,Ye=[],Le={};function ze(){if(!je){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Le)void 0===Le[e]?delete t[e]:t[e]=Le[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);je=n}return je}function Ge(e,n){if(O)return We(20,1,e,n);var r=0;return ze().forEach((function(a,i){var s=n+r;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Ne(e,t){if(O)return We(21,1,e,t);var n=ze();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function Be(e){return O?We(22,1,e):52}function $e(e,t,n,r){return O?We(23,1,e,t,n,r):52}function qe(e,t,n,r,a){return O?We(24,1,e,t,n,r,a):70}var Ve=[null,[],[]];function Je(e,t,n,a){if(O)return We(25,1,e,t,n,a);for(var i=0,s=0;s<n;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=r()[u+l>>>0],p=Ve[e];0===f||10===f?((1===e?R:x)(L(p,0)),p.length=0):p.push(f)}i+=c}return o()[a>>2>>>0]=i,0}function Xe(e){return 0==e%4&&(0!=e%100||0==e%400)}var Qe=[31,29,31,30,31,30,31,31,30,31,30,31],Ke=[31,28,31,30,31,30,31,31,30,31,30,31];function Ze(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Ia;for(e=new Date(new Date(e.Ja+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Xe(e.getFullYear())?Qe:Ke)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={hb:a()[o>>2>>>0],gb:a()[o+4>>2>>>0],Na:a()[o+8>>2>>>0],Pa:a()[o+12>>2>>>0],Oa:a()[o+16>>2>>>0],Ja:a()[o+20>>2>>>0],Fa:a()[o+24>>2>>>0],Ia:a()[o+28>>2>>>0],nb:a()[o+32>>2>>>0],fb:a()[o+36>>2>>>0],ib:f?z(f):\\\"\\\"},r=z(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Fa].substring(0,3)},\\\"%A\\\":function(e){return d[e.Fa]},\\\"%b\\\":function(e){return m[e.Oa].substring(0,3)},\\\"%B\\\":function(e){return m[e.Oa]},\\\"%C\\\":function(e){return s((e.Ja+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.Pa,2)},\\\"%e\\\":function(e){return i(e.Pa,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return s(e.Na,2)},\\\"%I\\\":function(e){return 0==(e=e.Na)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Oa-1;t+=(Xe(e.Ja+1900)?Qe:Ke)[n++]);return s(e.Pa+t,3)},\\\"%m\\\":function(e){return s(e.Oa+1,2)},\\\"%M\\\":function(e){return s(e.gb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Na&&12>e.Na?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.hb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Fa||7},\\\"%U\\\":function(e){return s(Math.floor((e.Ia+7-e.Fa)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Ia+7-(e.Fa+6)%7)/7);if(2>=(e.Fa+371-e.Ia-2)%7&&t++,t)53==t&&(4==(n=(e.Fa+371-e.Ia)%7)||3==n&&Xe(e.Ja)||(t=1));else{t=52;var n=(e.Fa+7-e.Ia-1)%7;(4==n||5==n&&Xe(e.Ja%400-1))&&t++}return s(t,2)},\\\"%w\\\":function(e){return e.Fa},\\\"%W\\\":function(e){return s(Math.floor((e.Ia+7-(e.Fa+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Ja+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Ja+1900},\\\"%z\\\":function(e){var t=0<=(e=e.fb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.ib},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(N(e)+1);return G(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}fe.Za();var et=[null,ce,de,ye,we,be,_e,Oe,Se,Te,Ae,Ee,Me,Re,xe,Ce,Fe,De,Ie,He,Ge,Ne,Be,$e,qe,Je],tt={L:function(e){at(e,!b,1,!w),fe.Sa()},h:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):se(e)},D:ve,e:we,S:be,z:_e,B:Oe,s:Se,Q:Te,I:Ae,P:Ee,k:Me,A:Re,w:xe,R:Ce,y:Fe,p:function(){},j:function(){ne(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},x:function(){ne(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>Pe(r)));else if(O)postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(e=fe.Ha[e]))return;e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},K:function(){return-1},V:function(e,t){e=new Date(1e3*ke(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},m:function(e,t){e=new Date(1e3*ke(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},n:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=o.getTimezoneOffset(),u=Math.min(s,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=s&&u==r):0<n!=(u==r)&&(i=Math.max(s,i),t.setTime(t.getTime()+6e4*((0<n?u:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:De,H:Ie,o:function e(t,n,r){e.Wa||(e.Wa=!0,He(t,n,r))},b:function(){ne(\\\"\\\")},i:function(){if(!_&&!b){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";me||(me={}),me[e]||(me[e]=1,_&&(e=\\\"warning: \\\"+e),x(e))}},u:function(){return 4294901760},c:ge,O:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},v:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Ye.length=t,n>>=3;for(var r=0;r<t;r++)Ye[r]=i()[n+r>>>0];return(0>e?oe[-e-1]:et[e]).apply(null,Ye)},t:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{F.grow(o-k.byteLength+65535>>>16),B(F.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\\\"unwind\\\"},M:Ge,N:Ne,C:le,d:Be,g:$e,q:qe,f:Je,a:F||s.wasmMemory,W:Ze,r:function(e,t,n,r){return Ze(e,t,n,r)}};!function(){function e(e,t){s.asm=e.exports,fe.Ta.push(s.asm.ta),q=s.asm.wa,J.unshift(s.asm.X),P=t,O||(Z--,s.monitorRunDependencies&&s.monitorRunDependencies(Z),0==Z&&(null!==ee&&(clearInterval(ee),ee=null),te&&(e=te,te=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(w||b)){if(\\\"function\\\"==typeof fetch&&!K.startsWith(\\\"file://\\\"))return fetch(K,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+K+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ae()}));if(f)return new Promise((function(e,t){f(K,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ae()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\\\"failed to asynchronously prepare wasm: \\\"+e),ne(e)}))}var r={a:tt};if(O||(Z++,s.monitorRunDependencies&&s.monitorRunDependencies(Z)),s.instantiateWasm)try{return s.instantiateWasm(r,e)}catch(e){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||re()||K.startsWith(\\\"file://\\\")||_||\\\"function\\\"!=typeof fetch?n(t):fetch(K,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\\\"wasm streaming compile failed: \\\"+e),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),s.___wasm_call_ctors=function(){return(s.___wasm_call_ctors=s.asm.X).apply(null,arguments)},s._OrtInit=function(){return(s._OrtInit=s.asm.Y).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.Z).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm._).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.$).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.aa).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ba).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.ca).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.da).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.ea).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.fa).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ga).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.ha).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.ia).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ja).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.ka).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.la).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.ma).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.na).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.oa).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.pa).apply(null,arguments)};var nt=s._pthread_self=function(){return(nt=s._pthread_self=s.asm.qa).apply(null,arguments)},rt=s._malloc=function(){return(rt=s._malloc=s.asm.ra).apply(null,arguments)};s._free=function(){return(s._free=s.asm.sa).apply(null,arguments)},s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.ta).apply(null,arguments)};var at=s.__emscripten_thread_init=function(){return(at=s.__emscripten_thread_init=s.asm.ua).apply(null,arguments)};s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.va).apply(null,arguments)};var ot,it=s._emscripten_run_in_main_runtime_thread_js=function(){return(it=s._emscripten_run_in_main_runtime_thread_js=s.asm.xa).apply(null,arguments)},st=s.__emscripten_proxy_execute_task_queue=function(){return(st=s.__emscripten_proxy_execute_task_queue=s.asm.ya).apply(null,arguments)},ut=s.__emscripten_thread_free_data=function(){return(ut=s.__emscripten_thread_free_data=s.asm.za).apply(null,arguments)},ct=s.__emscripten_thread_exit=function(){return(ct=s.__emscripten_thread_exit=s.asm.Aa).apply(null,arguments)},lt=s._emscripten_stack_set_limits=function(){return(lt=s._emscripten_stack_set_limits=s.asm.Ba).apply(null,arguments)},ft=s.stackSave=function(){return(ft=s.stackSave=s.asm.Ca).apply(null,arguments)},pt=s.stackRestore=function(){return(pt=s.stackRestore=s.asm.Da).apply(null,arguments)},dt=s.stackAlloc=function(){return(dt=s.stackAlloc=s.asm.Ea).apply(null,arguments)};function mt(){function e(){if(!ot&&(ot=!0,s.calledRun=!0,!j)&&(O||pe(J),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!O)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();X.unshift(e)}pe(X)}}if(!(0<Z))if(O)u(s),O||pe(J),postMessage({cmd:\\\"loaded\\\"});else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)Q();pe(V),0<Z||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.UTF8ToString=z,s.stringToUTF8=function(e,t,n){return G(e,r(),t,n)},s.lengthBytesUTF8=N,s.keepRuntimeAlive=function(){return C},s.wasmMemory=F,s.stackSave=ft,s.stackRestore=pt,s.stackAlloc=dt,s.ExitStatus=ie,s.PThread=fe,te=function e(){ot||mt(),ot||(te=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return mt(),e.ready});e.exports=r},932:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,s,u,c,l,f=Object.assign({},t),p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,m=\\\"function\\\"==typeof importScripts,g=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";g?(h=m?n(908).dirname(h)+\\\"/\\\":\\\"//\\\",l=()=>{c||(u=n(384),c=n(908))},o=function(e,t){return l(),e=c.normalize(e),u.readFileSync(e,t?void 0:\\\"utf8\\\")},s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),u.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||m)&&(m?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},m&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,v=t.print||console.log.bind(console),w=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(y=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&L(\\\"no native wasm support detected\\\");var b,_,O,S,T,A,E=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function R(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&M)return M.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function x(e,t){return(e>>>=0)?R(S,e,t):\\\"\\\"}function C(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function F(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function P(){var e=b.buffer;_=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=T=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=A=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var k=[],D=[],I=[];function U(){var e=t.preRun.shift();k.unshift(e)}var H,W=0,j=null,Y=null;function L(e){throw t.onAbort&&t.onAbort(e),w(e=\\\"Aborted(\\\"+e+\\\")\\\"),E=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function z(){return H.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(H=\\\"ort-wasm.wasm\\\",!z()){var G=H;H=t.locateFile?t.locateFile(G,h):h+G}function N(){var e=H;try{if(e==H&&y)return new Uint8Array(y);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){L(e)}}function B(e){for(;0<e.length;)e.shift()(t)}function $(e){var t=F(e)+1,n=ne(t);return n&&C(e,O,n,t),n}var q={};function V(){if(!J){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in q)void 0===q[e]?delete t[e]:t[e]=q[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);J=n}return J}var J,X=[null,[],[]];function Q(e){return 0==e%4&&(0!=e%100||0==e%400)}var K=[31,29,31,30,31,30,31,31,30,31,30,31],Z=[31,28,31,30,31,30,31,31,30,31,30,31];function ee(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.la;for(e=new Date(new Date(e.ma+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Q(e.getFullYear())?K:Z)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=T[r+40>>2>>>0];for(var l in r={ta:T[r>>2>>>0],sa:T[r+4>>2>>>0],na:T[r+8>>2>>>0],pa:T[r+12>>2>>>0],oa:T[r+16>>2>>>0],ma:T[r+20>>2>>>0],ha:T[r+24>>2>>>0],la:T[r+28>>2>>>0],va:T[r+32>>2>>>0],ra:T[r+36>>2>>>0],ua:c?x(c):\\\"\\\"},n=x(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ha].substring(0,3)},\\\"%A\\\":function(e){return f[e.ha]},\\\"%b\\\":function(e){return p[e.oa].substring(0,3)},\\\"%B\\\":function(e){return p[e.oa]},\\\"%C\\\":function(e){return o((e.ma+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.pa,2)},\\\"%e\\\":function(e){return a(e.pa,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.na,2)},\\\"%I\\\":function(e){return 0==(e=e.na)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.oa-1;t+=(Q(e.ma+1900)?K:Z)[n++]);return o(e.pa+t,3)},\\\"%m\\\":function(e){return o(e.oa+1,2)},\\\"%M\\\":function(e){return o(e.sa,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.na&&12>e.na?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.ta,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ha||7},\\\"%U\\\":function(e){return o(Math.floor((e.la+7-e.ha)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.la+7-(e.ha+6)%7)/7);if(2>=(e.ha+371-e.la-2)%7&&t++,t)53==t&&(4==(n=(e.ha+371-e.la)%7)||3==n&&Q(e.ma)||(t=1));else{t=52;var n=(e.ha+7-e.la-1)%7;(4==n||5==n&&Q(e.ma%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ha},\\\"%W\\\":function(e){return o(Math.floor((e.la+7-(e.ha+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.ma+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.ma+1900},\\\"%z\\\":function(e){var t=0<=(e=e.ra);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.ua},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(F(e)+1);return C(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(O.set(l,e>>>0),l.length-1)}var te={d:function(){return 0},I:function(){},w:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(){},F:function(){},h:function(){},x:function(){},t:function(){},H:function(){},v:function(){},n:function(){},u:function(){L(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},o:function(){L(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},i:function(){return Date.now()},J:function(){return!0},j:function(e,t){e=new Date(1e3*(A[e>>>2]+4294967296*T[e+4>>>2])),T[t>>2>>>0]=e.getUTCSeconds(),T[t+4>>2>>>0]=e.getUTCMinutes(),T[t+8>>2>>>0]=e.getUTCHours(),T[t+12>>2>>>0]=e.getUTCDate(),T[t+16>>2>>>0]=e.getUTCMonth(),T[t+20>>2>>>0]=e.getUTCFullYear()-1900,T[t+24>>2>>>0]=e.getUTCDay(),T[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},k:function(e,t){e=new Date(1e3*(A[e>>>2]+4294967296*T[e+4>>>2])),T[t>>2>>>0]=e.getSeconds(),T[t+4>>2>>>0]=e.getMinutes(),T[t+8>>2>>>0]=e.getHours(),T[t+12>>2>>>0]=e.getDate(),T[t+16>>2>>>0]=e.getMonth(),T[t+20>>2>>>0]=e.getFullYear()-1900,T[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);T[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,T[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),T[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},l:function(e){var t=new Date(T[e+20>>2>>>0]+1900,T[e+16>>2>>>0],T[e+12>>2>>>0],T[e+8>>2>>>0],T[e+4>>2>>>0],T[e>>2>>>0],0),n=T[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),s=Math.min(i,o);return 0>n?T[e+32>>2>>>0]=Number(o!=i&&s==r):0<n!=(s==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),T[e+24>>2>>>0]=t.getDay(),T[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,T[e>>2>>>0]=t.getSeconds(),T[e+4>>2>>>0]=t.getMinutes(),T[e+8>>2>>>0]=t.getHours(),T[e+12>>2>>>0]=t.getDate(),T[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},z:function(){return-52},A:function(){},m:function e(t,n,r){e.qa||(e.qa=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();T[e>>2>>>0]=60*Math.max(a,s),T[t>>2>>>0]=Number(a!=s),e=r(o),t=r(i),e=$(e),t=$(t),s<a?(A[n>>2>>>0]=e,A[n+4>>2>>>0]=t):(A[n>>2>>>0]=t,A[n+4>>2>>>0]=e)}(t,n,r))},a:function(){L(\\\"\\\")},s:function(){return 4294901760},e:g?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),E:function(e,t,n){S.copyWithin(e>>>0,t>>>0,t+n>>>0)},b:function(e){var t=S.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{b.grow(a-_.byteLength+65535>>>16),P();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},C:function(e,t){var n=0;return V().forEach((function(r,a){var o=t+n;for(a=A[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)O[a++>>0>>>0]=r.charCodeAt(o);O[a>>0>>>0]=0,n+=r.length+1})),0},D:function(e,t){var n=V();A[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),A[t>>2>>>0]=r,0},c:function(){return 52},g:function(){return 52},p:function(){return 70},f:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=A[t>>2>>>0],s=A[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var c=S[i+u>>>0],l=X[e];0===c||10===c?((1===e?v:w)(R(l,0)),l.length=0):l.push(c)}a+=s}return A[r>>2>>>0]=a,0},K:ee,q:function(e,t,n,r){return ee(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,b=t.asm.L,P(),D.unshift(t.asm.M),W--,t.monitorRunDependencies&&t.monitorRunDependencies(W),0==W&&(null!==j&&(clearInterval(j),j=null),Y&&(e=Y,Y=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!y&&(d||m)){if(\\\"function\\\"==typeof fetch&&!H.startsWith(\\\"file://\\\"))return fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+H+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return N()}));if(i)return new Promise((function(e,t){i(H,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return N()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){w(\\\"failed to asynchronously prepare wasm: \\\"+e),L(e)}))}var o={a:te};if(W++,t.monitorRunDependencies&&t.monitorRunDependencies(W),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return w(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||z()||H.startsWith(\\\"file://\\\")||g||\\\"function\\\"!=typeof fetch?r(n):fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return w(\\\"wasm streaming compile failed: \\\"+e),w(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.M).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.N).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.O).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.P).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.Q).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.R).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.S).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.T).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.U).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.V).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.W).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.X).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.Y).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.Z).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm._).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.$).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.aa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ba).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ca).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.da).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ea).apply(null,arguments)};var ne=t._malloc=function(){return(ne=t._malloc=t.asm.fa).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ga).apply(null,arguments)};var re,ae=t.stackSave=function(){return(ae=t.stackSave=t.asm.ia).apply(null,arguments)},oe=t.stackRestore=function(){return(oe=t.stackRestore=t.asm.ja).apply(null,arguments)},ie=t.stackAlloc=function(){return(ie=t.stackAlloc=t.asm.ka).apply(null,arguments)};function se(){function e(){if(!re&&(re=!0,t.calledRun=!0,!E)){if(B(D),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();I.unshift(e)}B(I)}}if(!(0<W)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)U();B(k),0<W||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.UTF8ToString=x,t.stringToUTF8=function(e,t,n){return C(e,S,t,n)},t.lengthBytesUTF8=F,t.stackSave=ae,t.stackRestore=oe,t.stackAlloc=ie,Y=function e(){re||se(),re||(Y=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return se(),e.ready});e.exports=r},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const e=n(259),t=n(263);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})));break;case\\\"init-ort\\\":try{const{numThreads:t,loggingLevel:r}=n.data.in;(0,e.initOrt)(t,r),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=n.data.in,r=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:r})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:r}=n.data.in,a=(0,e.createSessionFinalize)(t,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=(0,e.createSession)(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in;(0,e.run)(t,r,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return F.buffer!=D&&L(F.buffer),C}function t(){return F.buffer!=D&&L(F.buffer),I}function r(){return F.buffer!=D&&L(F.buffer),H}function a(){return F.buffer!=D&&L(F.buffer),P}function u(){return F.buffer!=D&&L(F.buffer),Y}var o,i,s;e=e||{},o||(o=void 0!==e?e:{}),o.ready=new Promise((function(e,n){i=e,s=n}));var f,c,l,p,m,d,h=Object.assign({},o),g=\"./this.program\",y=(e,n)=>{throw n},_=\"object\"==typeof window,b=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=o.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function T(e){return o.locateFile?o.locateFile(e,O):O+e}if(v){let e;O=b?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",d=()=>{m||(p=require(\"fs\"),m=require(\"path\"))},f=function(e,n){return d(),e=m.normalize(e),p.readFileSync(e,n?void 0:\"utf8\")},l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t)=>{d(),e=m.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof ue))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),y=(e,n)=>{if(E)throw process.exitCode=e,n;n instanceof ue||x(\"exiting due to exception: \"+n),process.exit(e)},o.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(_||b)&&(b?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},b&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),A=console.warn.bind(console);v&&(d(),M=e=>p.writeSync(1,e+\"\\n\"),A=e=>p.writeSync(2,e+\"\\n\"));var S,R=o.print||M,x=o.printErr||A;Object.assign(o,h),h=null,o.thisProgram&&(g=o.thisProgram),o.quit&&(y=o.quit),o.wasmBinary&&(S=o.wasmBinary);var E=o.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ne(\"no native wasm support detected\");var F,k,D,C,I,H,P,Y,U=!1,G=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function W(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&G)return G.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var u=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|u);else{var o=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|u<<6|o:(7&a)<<18|u<<12|o<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(e,n){return(e>>>=0)?W(t(),e,n):\"\"}function N(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var u=0;u<e.length;++u){var o=e.charCodeAt(u);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++u)),127>=o){if(t>=r)break;n[t++>>>0]=o}else{if(2047>=o){if(t+1>=r)break;n[t++>>>0]=192|o>>6}else{if(65535>=o){if(t+2>=r)break;n[t++>>>0]=224|o>>12}else{if(t+3>=r)break;n[t++>>>0]=240|o>>18,n[t++>>>0]=128|o>>12&63}n[t++>>>0]=128|o>>6&63}n[t++>>>0]=128|63&o}}return n[t>>>0]=0,t-a}function q(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function L(e){D=e,o.HEAP8=C=new Int8Array(e),o.HEAP16=new Int16Array(e),o.HEAP32=H=new Int32Array(e),o.HEAPU8=I=new Uint8Array(e),o.HEAPU16=new Uint16Array(e),o.HEAPU32=P=new Uint32Array(e),o.HEAPF32=new Float32Array(e),o.HEAPF64=Y=new Float64Array(e)}w&&(D=o.buffer);var B=o.INITIAL_MEMORY||16777216;if(w)F=o.wasmMemory,D=o.buffer;else if(o.wasmMemory)F=o.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:B/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");F&&(D=F.buffer),B=D.byteLength,L(D);var z,J=[],K=[],X=[];function Q(){var e=o.preRun.shift();J.unshift(e)}var V,Z=0,$=null,ee=null;function ne(e){throw w?postMessage({cmd:\"onAbort\",arg:e}):o.onAbort&&o.onAbort(e),x(e=\"Aborted(\"+e+\")\"),U=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function te(){return V.startsWith(\"data:application/octet-stream;base64,\")}function re(){var e=V;try{if(e==V&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ne(e)}}V=\"ort-wasm-threaded.wasm\",te()||(V=T(V));var ae={};function ue(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function oe(e){(e=ce.Ha[e])||ne(),ce.Qa(e)}function ie(e){var n=ce.Ya();if(!n)return 6;ce.Ma.push(n),ce.Ha[e.Ga]=n,n.Ga=e.Ga;var t={cmd:\"run\",start_routine:e.cb,arg:e.Va,pthread_ptr:e.Ga};return n.La=()=>{t.time=performance.now(),n.postMessage(t,e.jb)},n.loaded&&(n.La(),delete n.La),0}function se(e){if(w)return Ye(1,1,e);E||(ce.eb(),o.onExit&&o.onExit(e),U=!0),y(e,new ue(e))}function fe(e,n){if(!n&&w)throw pe(e),\"unwind\";se(e)}var ce={Ka:[],Ma:[],Ta:[],Ha:{},Za:function(){w&&ce.$a()},lb:function(){},$a:function(){ce.receiveObjectTransfer=ce.bb,ce.threadInitTLS=ce.Sa,ce.setExitStatus=ce.Ra,E=!1},Ra:function(){},eb:function(){for(var e of Object.values(ce.Ha))ce.Qa(e);for(e of ce.Ka)e.terminate();ce.Ka=[]},Qa:function(e){var n=e.Ga;delete ce.Ha[n],ce.Ka.push(e),ce.Ma.splice(ce.Ma.indexOf(e),1),e.Ga=0,sn(n)},bb:function(){},Sa:function(){ce.Ta.forEach((e=>e()))},ab:function(e,n){e.onmessage=t=>{var r=(t=t.data).cmd;if(e.Ga&&(ce.Xa=e.Ga),t.targetThread&&t.targetThread!=nn()){var a=ce.Ha[t.mb];a?a.postMessage(t,t.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?ke(t.queue):\"spawnThread\"===r?ie(t):\"cleanupThread\"===r?oe(t.thread):\"killThread\"===r?(t=t.thread,r=ce.Ha[t],delete ce.Ha[t],r.terminate(),sn(t),ce.Ma.splice(ce.Ma.indexOf(r),1),r.Ga=0):\"cancelThread\"===r?ce.Ha[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n&&n(e),e.La&&(e.La(),delete e.La)):\"print\"===r?R(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?x(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===r?o.onAbort&&o.onAbort(t.arg):r&&x(\"worker sent an unknown command \"+r);ce.Xa=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:o.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:k})},Ua:function(){var e=T(\"ort-wasm-threaded.worker.js\");ce.Ka.push(new Worker(e))},Ya:function(){return 0==ce.Ka.length&&(ce.Ua(),ce.ab(ce.Ka[0])),ce.Ka.pop()}};function le(e){for(;0<e.length;)e.shift()(o)}function pe(e){if(w)return Ye(2,0,e);try{fe(e)}catch(e){e instanceof ue||\"unwind\"==e||y(1,e)}}o.PThread=ce,o.establishStackSpace=function(){var e=nn(),n=r()[e+44>>2>>>0];e=r()[e+48>>2>>>0],cn(n,n-e),pn(n)};var me,de,he=[];function ge(e,n,t,r){return w?Ye(3,1,e,n,t,r):ye(e,n,t,r)}function ye(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?ge(e,n,t,r):(e={cb:t,Ga:e,Va:r,jb:a},w?(e.kb=\"spawnThread\",postMessage(e,a),0):ie(e))}function _e(e,n,t){return w?Ye(4,1,e,n,t):0}function be(e,n){if(w)return Ye(5,1,e,n)}function ve(e,n){if(w)return Ye(6,1,e,n)}function we(e,n,t){if(w)return Ye(7,1,e,n,t)}function Oe(e,n,t){return w?Ye(8,1,e,n,t):0}function Te(e,n){if(w)return Ye(9,1,e,n)}function Me(e,n,t){if(w)return Ye(10,1,e,n,t)}function Ae(e,n,t,r){if(w)return Ye(11,1,e,n,t,r)}function Se(e,n,t,r){if(w)return Ye(12,1,e,n,t,r)}function Re(e,n,t,r){if(w)return Ye(13,1,e,n,t,r)}function xe(e){if(w)return Ye(14,1,e)}function Ee(e,n){if(w)return Ye(15,1,e,n)}function Fe(e,n,t){if(w)return Ye(16,1,e,n,t)}function ke(e){Atomics.store(r(),e>>2,1),nn()&&on(e),Atomics.compareExchange(r(),e>>2,1,0)}function De(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Ce(e,n,t,r,a,u){return w?Ye(17,1,e,n,t,r,a,u):-52}function Ie(e,n,t,r,a,u){if(w)return Ye(18,1,e,n,t,r,a,u)}function He(e){var t=q(e)+1,r=tn(t);return r&&N(e,n(),r,t),r}function Pe(e,n,t){function u(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(w)return Ye(19,1,e,n,t);var o=(new Date).getFullYear(),i=new Date(o,0,1),s=new Date(o,6,1);o=i.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(o,f);r()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(o!=f),e=u(i),n=u(s),e=He(e),n=He(n),f<o?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)}function Ye(e,n){var t=arguments.length-2,r=arguments;return function(e){var n=ln();return e=e(),pn(n),e}((()=>{for(var a=mn(8*t),o=a>>3,i=0;i<t;i++){var s=r[2+i];u()[o+i>>>0]=s}return un(e,t,a,n)}))}o.invokeEntryPoint=function(e,n){var t=he[e];t||(e>=he.length&&(he.length=e+1),he[e]=t=z.get(e)),e=t(n),E?ce.Ra(e):fn(e)},o.executeNotifiedProxyingQueue=ke,de=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:w?()=>performance.now()-o.__performance_now_clock_drift:()=>performance.now();var Ue,Ge=[],We={};function je(){if(!Ue){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in We)void 0===We[e]?delete n[e]:n[e]=We[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Ue=t}return Ue}function Ne(e,t){if(w)return Ye(20,1,e,t);var r=0;return je().forEach((function(u,o){var i=t+r;for(o=a()[e+4*o>>2>>>0]=i,i=0;i<u.length;++i)n()[o++>>0>>>0]=u.charCodeAt(i);n()[o>>0>>>0]=0,r+=u.length+1})),0}function qe(e,n){if(w)return Ye(21,1,e,n);var t=je();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Le(e){return w?Ye(22,1,e):52}function Be(e,n,t,r){return w?Ye(23,1,e,n,t,r):52}function ze(e,n,t,r,a){return w?Ye(24,1,e,n,t,r,a):70}var Je=[null,[],[]];function Ke(e,n,r,u){if(w)return Ye(25,1,e,n,r,u);for(var o=0,i=0;i<r;i++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++){var l=t()[s+c>>>0],p=Je[e];0===l||10===l?((1===e?R:x)(W(p,0)),p.length=0):p.push(l)}o+=f}return a()[u>>2>>>0]=o,0}function Xe(e){return 0==e%4&&(0!=e%100||0==e%400)}var Qe=[31,29,31,30,31,30,31,31,30,31,30,31],Ve=[31,28,31,30,31,30,31,31,30,31,30,31];function Ze(e,t,a,u){function o(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function i(e,n){return o(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Ia;for(e=new Date(new Date(e.Ja+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(Xe(e.getFullYear())?Qe:Ve)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[u+40>>2>>>0];for(var p in u={hb:r()[u>>2>>>0],gb:r()[u+4>>2>>>0],Na:r()[u+8>>2>>>0],Pa:r()[u+12>>2>>>0],Oa:r()[u+16>>2>>>0],Ja:r()[u+20>>2>>>0],Fa:r()[u+24>>2>>>0],Ia:r()[u+28>>2>>>0],nb:r()[u+32>>2>>>0],fb:r()[u+36>>2>>>0],ib:l?j(l):\"\"},a=j(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Fa].substring(0,3)},\"%A\":function(e){return m[e.Fa]},\"%b\":function(e){return d[e.Oa].substring(0,3)},\"%B\":function(e){return d[e.Oa]},\"%C\":function(e){return i((e.Ja+1900)/100|0,2)},\"%d\":function(e){return i(e.Pa,2)},\"%e\":function(e){return o(e.Pa,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return i(e.Na,2)},\"%I\":function(e){return 0==(e=e.Na)?e=12:12<e&&(e-=12),i(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Oa-1;n+=(Xe(e.Ja+1900)?Qe:Ve)[t++]);return i(e.Pa+n,3)},\"%m\":function(e){return i(e.Oa+1,2)},\"%M\":function(e){return i(e.gb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Na&&12>e.Na?\"AM\":\"PM\"},\"%S\":function(e){return i(e.hb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Fa||7},\"%U\":function(e){return i(Math.floor((e.Ia+7-e.Fa)/7),2)},\"%V\":function(e){var n=Math.floor((e.Ia+7-(e.Fa+6)%7)/7);if(2>=(e.Fa+371-e.Ia-2)%7&&n++,n)53==n&&(4==(t=(e.Fa+371-e.Ia)%7)||3==t&&Xe(e.Ja)||(n=1));else{n=52;var t=(e.Fa+7-e.Ia-1)%7;(4==t||5==t&&Xe(e.Ja%400-1))&&n++}return i(n,2)},\"%w\":function(e){return e.Fa},\"%W\":function(e){return i(Math.floor((e.Ia+7-(e.Fa+6)%7)/7),2)},\"%y\":function(e){return(e.Ja+1900).toString().substring(2)},\"%Y\":function(e){return e.Ja+1900},\"%z\":function(e){var n=0<=(e=e.fb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.ib},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](u)));return p=function(e){var n=Array(q(e)+1);return N(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}ce.Za();var $e=[null,se,pe,ge,_e,be,ve,we,Oe,Te,Me,Ae,Se,Re,xe,Ee,Fe,Ce,Ie,Pe,Ne,qe,Le,Be,ze,Ke],en={L:function(e){rn(e,!b,1,!_),ce.Sa()},h:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):oe(e)},D:ye,e:_e,S:be,z:ve,B:we,s:Oe,Q:Te,I:Me,P:Ae,k:Se,A:Re,w:xe,R:Ee,y:Fe,p:function(){},j:function(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},x:function(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,n,t,r){if(e==n)setTimeout((()=>ke(r)));else if(w)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=ce.Ha[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},V:function(e,n){e=new Date(1e3*De(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},m:function(e,n){e=new Date(1e3*De(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2>>>0]=a,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2>>>0]=e},n:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),u=new Date(n.getFullYear(),0,1),o=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=u.getTimezoneOffset(),s=Math.min(i,o);return 0>t?r()[e+32>>2>>>0]=Number(o!=i&&s==a):0<t!=(s==a)&&(o=Math.max(i,o),n.setTime(n.getTime()+6e4*((0<t?s:o)-a))),r()[e+24>>2>>>0]=n.getDay(),t=(n.getTime()-u.getTime())/864e5|0,r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},G:Ce,H:Ie,o:function e(n,t,r){e.Wa||(e.Wa=!0,Pe(n,t,r))},b:function(){ne(\"\")},i:function(){if(!v&&!b){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";me||(me={}),me[e]||(me[e]=1,v&&(e=\"warning: \"+e),x(e))}},u:function(){return 4294901760},c:de,O:function(e,n,r){t().copyWithin(e>>>0,n>>>0,n+r>>>0)},v:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},J:function(e,n,t){Ge.length=n,t>>=3;for(var r=0;r<n;r++)Ge[r]=u()[t+r>>>0];return(0>e?ae[-e-1]:$e[e]).apply(null,Ge)},t:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var u=Math;a=Math.max(e,a),u=u.min.call(u,4294901760,a+(65536-a%65536)%65536);e:{try{F.grow(u-D.byteLength+65535>>>16),L(F.buffer);var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},T:function(){throw\"unwind\"},M:Ne,N:qe,C:fe,d:Le,g:Be,q:ze,f:Ke,a:F||o.wasmMemory,W:Ze,r:function(e,n,t,r){return Ze(e,n,t,r)}};!function(){function e(e,n){o.asm=e.exports,ce.Ta.push(o.asm.ta),z=o.asm.wa,K.unshift(o.asm.X),k=n,w||(Z--,o.monitorRunDependencies&&o.monitorRunDependencies(Z),0==Z&&(null!==$&&(clearInterval($),$=null),ee&&(e=ee,ee=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!S&&(_||b)){if(\"function\"==typeof fetch&&!V.startsWith(\"file://\"))return fetch(V,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+V+\"'\";return e.arrayBuffer()})).catch((function(){return re()}));if(c)return new Promise((function(e,n){c(V,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return re()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),ne(e)}))}var r={a:en};if(w||(Z++,o.monitorRunDependencies&&o.monitorRunDependencies(Z)),o.instantiateWasm)try{return o.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(S||\"function\"!=typeof WebAssembly.instantiateStreaming||te()||V.startsWith(\"file://\")||v||\"function\"!=typeof fetch?t(n):fetch(V,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(s)}(),o.___wasm_call_ctors=function(){return(o.___wasm_call_ctors=o.asm.X).apply(null,arguments)},o._OrtInit=function(){return(o._OrtInit=o.asm.Y).apply(null,arguments)},o._OrtCreateSessionOptions=function(){return(o._OrtCreateSessionOptions=o.asm.Z).apply(null,arguments)},o._OrtAppendExecutionProvider=function(){return(o._OrtAppendExecutionProvider=o.asm._).apply(null,arguments)},o._OrtAddSessionConfigEntry=function(){return(o._OrtAddSessionConfigEntry=o.asm.$).apply(null,arguments)},o._OrtReleaseSessionOptions=function(){return(o._OrtReleaseSessionOptions=o.asm.aa).apply(null,arguments)},o._OrtCreateSession=function(){return(o._OrtCreateSession=o.asm.ba).apply(null,arguments)},o._OrtReleaseSession=function(){return(o._OrtReleaseSession=o.asm.ca).apply(null,arguments)},o._OrtGetInputCount=function(){return(o._OrtGetInputCount=o.asm.da).apply(null,arguments)},o._OrtGetOutputCount=function(){return(o._OrtGetOutputCount=o.asm.ea).apply(null,arguments)},o._OrtGetInputName=function(){return(o._OrtGetInputName=o.asm.fa).apply(null,arguments)},o._OrtGetOutputName=function(){return(o._OrtGetOutputName=o.asm.ga).apply(null,arguments)},o._OrtFree=function(){return(o._OrtFree=o.asm.ha).apply(null,arguments)},o._OrtCreateTensor=function(){return(o._OrtCreateTensor=o.asm.ia).apply(null,arguments)},o._OrtGetTensorData=function(){return(o._OrtGetTensorData=o.asm.ja).apply(null,arguments)},o._OrtReleaseTensor=function(){return(o._OrtReleaseTensor=o.asm.ka).apply(null,arguments)},o._OrtCreateRunOptions=function(){return(o._OrtCreateRunOptions=o.asm.la).apply(null,arguments)},o._OrtAddRunConfigEntry=function(){return(o._OrtAddRunConfigEntry=o.asm.ma).apply(null,arguments)},o._OrtReleaseRunOptions=function(){return(o._OrtReleaseRunOptions=o.asm.na).apply(null,arguments)},o._OrtRun=function(){return(o._OrtRun=o.asm.oa).apply(null,arguments)},o._OrtEndProfiling=function(){return(o._OrtEndProfiling=o.asm.pa).apply(null,arguments)};var nn=o._pthread_self=function(){return(nn=o._pthread_self=o.asm.qa).apply(null,arguments)},tn=o._malloc=function(){return(tn=o._malloc=o.asm.ra).apply(null,arguments)};o._free=function(){return(o._free=o.asm.sa).apply(null,arguments)},o.__emscripten_tls_init=function(){return(o.__emscripten_tls_init=o.asm.ta).apply(null,arguments)};var rn=o.__emscripten_thread_init=function(){return(rn=o.__emscripten_thread_init=o.asm.ua).apply(null,arguments)};o.__emscripten_thread_crashed=function(){return(o.__emscripten_thread_crashed=o.asm.va).apply(null,arguments)};var an,un=o._emscripten_run_in_main_runtime_thread_js=function(){return(un=o._emscripten_run_in_main_runtime_thread_js=o.asm.xa).apply(null,arguments)},on=o.__emscripten_proxy_execute_task_queue=function(){return(on=o.__emscripten_proxy_execute_task_queue=o.asm.ya).apply(null,arguments)},sn=o.__emscripten_thread_free_data=function(){return(sn=o.__emscripten_thread_free_data=o.asm.za).apply(null,arguments)},fn=o.__emscripten_thread_exit=function(){return(fn=o.__emscripten_thread_exit=o.asm.Aa).apply(null,arguments)},cn=o._emscripten_stack_set_limits=function(){return(cn=o._emscripten_stack_set_limits=o.asm.Ba).apply(null,arguments)},ln=o.stackSave=function(){return(ln=o.stackSave=o.asm.Ca).apply(null,arguments)},pn=o.stackRestore=function(){return(pn=o.stackRestore=o.asm.Da).apply(null,arguments)},mn=o.stackAlloc=function(){return(mn=o.stackAlloc=o.asm.Ea).apply(null,arguments)};function dn(){function e(){if(!an&&(an=!0,o.calledRun=!0,!U)&&(w||le(K),i(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!w)){if(o.postRun)for(\"function\"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;){var e=o.postRun.shift();X.unshift(e)}le(X)}}if(!(0<Z))if(w)i(o),w||le(K),postMessage({cmd:\"loaded\"});else{if(o.preRun)for(\"function\"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)Q();le(J),0<Z||(o.setStatus?(o.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){o.setStatus(\"\")}),1),e()}),1)):e())}}if(o.UTF8ToString=j,o.stringToUTF8=function(e,n,r){return N(e,t(),n,r)},o.lengthBytesUTF8=q,o.keepRuntimeAlive=function(){return E},o.wasmMemory=F,o.stackSave=ln,o.stackRestore=pn,o.stackAlloc=mn,o.ExitStatus=ue,o.PThread=ce,ee=function e(){an||dn(),an||(ee=e)},o.preInit)for(\"function\"==typeof o.preInit&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return dn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm) {\n  ortWasm = ortWasm || {};\n\n\nnull;var b;b||(b=typeof ortWasm !== 'undefined' ? ortWasm : {});var k,r;b.ready=new Promise(function(a,c){k=a;r=c});var aa=Object.assign({},b),t=\"./this.program\",ba=\"object\"==typeof window,u=\"function\"==typeof importScripts,x=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,z=\"\",A,B,C,fs,D,E;\nif(x)z=u?require(\"path\").dirname(z)+\"/\":__dirname+\"/\",E=()=>{D||(fs=require(\"fs\"),D=require(\"path\"))},A=function(a,c){E();a=D.normalize(a);return fs.readFileSync(a,c?void 0:\"utf8\")},C=a=>{a=A(a,!0);a.buffer||(a=new Uint8Array(a));return a},B=(a,c,e)=>{E();a=D.normalize(a);fs.readFile(a,function(f,g){f?e(f):c(g.buffer)})},1<process.argv.length&&(t=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\n}),b.inspect=function(){return\"[Emscripten Module object]\"};else if(ba||u)u?z=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(z=document.currentScript.src),_scriptDir&&(z=_scriptDir),0!==z.indexOf(\"blob:\")?z=z.substr(0,z.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):z=\"\",A=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.send(null);return c.responseText},u&&(C=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.responseType=\"arraybuffer\";c.send(null);return new Uint8Array(c.response)}),\nB=(a,c,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?c(f.response):e()};f.onerror=e;f.send(null)};var ca=b.print||console.log.bind(console),F=b.printErr||console.warn.bind(console);Object.assign(b,aa);aa=null;b.thisProgram&&(t=b.thisProgram);var G;b.wasmBinary&&(G=b.wasmBinary);var noExitRuntime=b.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&H(\"no native wasm support detected\");\nvar I,da=!1,ea=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction fa(a,c,e){c>>>=0;var f=c+e;for(e=c;a[e]&&!(e>=f);)++e;if(16<e-c&&a.buffer&&ea)return ea.decode(a.subarray(c,e));for(f=\"\";c<e;){var g=a[c++];if(g&128){var h=a[c++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[c++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[c++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function J(a,c){return(a>>>=0)?fa(K,a,c):\"\"}\nfunction L(a,c,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var p=a.charCodeAt(++h);l=65536+((l&1023)<<10)|p&1023}if(127>=l){if(e>=f)break;c[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;c[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;c[e++>>>0]=224|l>>12}else{if(e+3>=f)break;c[e++>>>0]=240|l>>18;c[e++>>>0]=128|l>>12&63}c[e++>>>0]=128|l>>6&63}c[e++>>>0]=128|l&63}}c[e>>>0]=0;return e-g}\nfunction M(a){for(var c=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?c++:2047>=f?c+=2:55296<=f&&57343>=f?(c+=4,++e):c+=3}return c}var ha,N,K,O,P;function ia(){var a=I.buffer;ha=a;b.HEAP8=N=new Int8Array(a);b.HEAP16=new Int16Array(a);b.HEAP32=O=new Int32Array(a);b.HEAPU8=K=new Uint8Array(a);b.HEAPU16=new Uint16Array(a);b.HEAPU32=P=new Uint32Array(a);b.HEAPF32=new Float32Array(a);b.HEAPF64=new Float64Array(a)}var ja=[],ka=[],la=[];function ma(){var a=b.preRun.shift();ja.unshift(a)}\nvar Q=0,R=null,S=null;function H(a){if(b.onAbort)b.onAbort(a);a=\"Aborted(\"+a+\")\";F(a);da=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");r(a);throw a;}function na(){return T.startsWith(\"data:application/octet-stream;base64,\")}var T;T=\"ort-wasm.wasm\";if(!na()){var oa=T;T=b.locateFile?b.locateFile(oa,z):z+oa}function pa(){var a=T;try{if(a==T&&G)return new Uint8Array(G);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){H(c)}}\nfunction qa(){if(!G&&(ba||u)){if(\"function\"==typeof fetch&&!T.startsWith(\"file://\"))return fetch(T,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+T+\"'\";return a.arrayBuffer()}).catch(function(){return pa()});if(B)return new Promise(function(a,c){B(T,function(e){a(new Uint8Array(e))},c)})}return Promise.resolve().then(function(){return pa()})}function U(a){for(;0<a.length;)a.shift()(b)}function ra(a){var c=M(a)+1,e=sa(c);e&&L(a,N,e,c);return e}\nfunction ta(a,c,e){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var p=l.getTimezoneOffset();O[a>>2>>>0]=60*Math.max(g,p);O[c>>2>>>0]=Number(g!=p);a=f(h);c=f(l);a=ra(a);c=ra(c);p<g?(P[e>>2>>>0]=a,P[e+4>>2>>>0]=c):(P[e>>2>>>0]=c,P[e+4>>2>>>0]=a)}function V(a,c,e){V.qa||(V.qa=!0,ta(a,c,e))}var W={};\nfunction xa(){if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:t||\"./this.program\"},c;for(c in W)void 0===W[c]?delete a[c]:a[c]=W[c];var e=[];for(c in a)e.push(c+\"=\"+a[c]);X=e}return X}var X,ya=[null,[],[]];function Y(a){return 0===a%4&&(0!==a%100||0===a%400)}var za=[31,29,31,30,31,30,31,31,30,31,30,31],Aa=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Ba(a){var c=Array(M(a)+1);L(a,c,0,c.length);return c}\nfunction Ca(a,c,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function h(d,m){return g(d,m,\"0\")}function l(d,m){function n(ua){return 0>ua?-1:0<ua?1:0}var y;0===(y=n(d.getFullYear()-m.getFullYear()))&&0===(y=n(d.getMonth()-m.getMonth()))&&(y=n(d.getDate()-m.getDate()));return y}function p(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var m=d.la;for(d=new Date((new Date(d.ma+1900,0,1)).getTime());0<m;){var n=d.getMonth(),y=(Y(d.getFullYear())?za:Aa)[n];if(m>y-d.getDate())m-=y-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=p(new Date(d.getFullYear(),\n0,4));n=p(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var v=O[f+40>>2>>>0];f={ta:O[f>>2>>>0],sa:O[f+4>>2>>>0],na:O[f+8>>2>>>0],pa:O[f+12>>2>>>0],oa:O[f+16>>2>>>0],ma:O[f+20>>2>>>0],ha:O[f+24>>2>>>0],la:O[f+28>>2>>>0],va:O[f+32>>2>>>0],ra:O[f+36>>2>>>0],ua:v?J(v):\"\"};e=J(e);v={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var q in v)e=e.replace(new RegExp(q,\"g\"),v[q]);var va=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),wa=\"January February March April May June July August September October November December\".split(\" \");v={\"%a\":function(d){return va[d.ha].substring(0,3)},\"%A\":function(d){return va[d.ha]},\"%b\":function(d){return wa[d.oa].substring(0,\n3)},\"%B\":function(d){return wa[d.oa]},\"%C\":function(d){return h((d.ma+1900)/100|0,2)},\"%d\":function(d){return h(d.pa,2)},\"%e\":function(d){return g(d.pa,2,\" \")},\"%g\":function(d){return w(d).toString().substring(2)},\"%G\":function(d){return w(d)},\"%H\":function(d){return h(d.na,2)},\"%I\":function(d){d=d.na;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.oa-1;m+=(Y(d.ma+1900)?za:Aa)[n++]);return h(d.pa+m,3)},\"%m\":function(d){return h(d.oa+1,2)},\"%M\":function(d){return h(d.sa,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.na&&12>d.na?\"AM\":\"PM\"},\"%S\":function(d){return h(d.ta,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ha||7},\"%U\":function(d){return h(Math.floor((d.la+7-d.ha)/7),2)},\"%V\":function(d){var m=Math.floor((d.la+7-(d.ha+6)%7)/7);2>=(d.ha+371-d.la-2)%7&&m++;if(m)53==m&&(n=(d.ha+371-d.la)%7,4==n||3==n&&Y(d.ma)||(m=1));else{m=52;var n=(d.ha+7-d.la-1)%7;(4==n||5==n&&Y(d.ma%400-1))&&m++}return h(m,2)},\"%w\":function(d){return d.ha},\"%W\":function(d){return h(Math.floor((d.la+\n7-(d.ha+6)%7)/7),2)},\"%y\":function(d){return(d.ma+1900).toString().substring(2)},\"%Y\":function(d){return d.ma+1900},\"%z\":function(d){d=d.ra;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.ua},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(q in v)e.includes(q)&&(e=e.replace(new RegExp(q,\"g\"),v[q](f)));e=e.replace(/\\0\\0/g,\"%\");q=Ba(e);if(q.length>c)return 0;N.set(q,a>>>0);return q.length-1}\nvar Da={d:function(){return 0},I:function(){},w:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(){},F:function(){},h:function(){},x:function(){},t:function(){},H:function(){},v:function(){},n:function(){},u:function(){H(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},o:function(){H(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},i:function(){return Date.now()},\nJ:function(){return!0},j:function(a,c){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[c>>2>>>0]=a.getUTCSeconds();O[c+4>>2>>>0]=a.getUTCMinutes();O[c+8>>2>>>0]=a.getUTCHours();O[c+12>>2>>>0]=a.getUTCDate();O[c+16>>2>>>0]=a.getUTCMonth();O[c+20>>2>>>0]=a.getUTCFullYear()-1900;O[c+24>>2>>>0]=a.getUTCDay();O[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},k:function(a,c){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[c>>2>>>0]=a.getSeconds();O[c+4>>2>>>0]=a.getMinutes();\nO[c+8>>2>>>0]=a.getHours();O[c+12>>2>>>0]=a.getDate();O[c+16>>2>>>0]=a.getMonth();O[c+20>>2>>>0]=a.getFullYear()-1900;O[c+24>>2>>>0]=a.getDay();var e=new Date(a.getFullYear(),0,1);O[c+28>>2>>>0]=(a.getTime()-e.getTime())/864E5|0;O[c+36>>2>>>0]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();O[c+32>>2>>>0]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},l:function(a){var c=new Date(O[a+20>>2>>>0]+1900,O[a+16>>2>>>0],O[a+12>>2>>>0],O[a+8>>\n2>>>0],O[a+4>>2>>>0],O[a>>2>>>0],0),e=O[a+32>>2>>>0],f=c.getTimezoneOffset(),g=new Date(c.getFullYear(),0,1),h=(new Date(c.getFullYear(),6,1)).getTimezoneOffset(),l=g.getTimezoneOffset(),p=Math.min(l,h);0>e?O[a+32>>2>>>0]=Number(h!=l&&p==f):0<e!=(p==f)&&(h=Math.max(l,h),c.setTime(c.getTime()+6E4*((0<e?p:h)-f)));O[a+24>>2>>>0]=c.getDay();O[a+28>>2>>>0]=(c.getTime()-g.getTime())/864E5|0;O[a>>2>>>0]=c.getSeconds();O[a+4>>2>>>0]=c.getMinutes();O[a+8>>2>>>0]=c.getHours();O[a+12>>2>>>0]=c.getDate();O[a+\n16>>2>>>0]=c.getMonth();return c.getTime()/1E3|0},z:function(){return-52},A:function(){},m:V,a:function(){H(\"\")},s:function(){return 4294901760},e:x?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),E:function(a,c,e){K.copyWithin(a>>>0,c>>>0,c+e>>>0)},b:function(a){var c=K.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=c*(1+.2/e);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);g=g.min.call(g,4294901760,f+(65536-f%65536)%65536);a:{try{I.grow(g-ha.byteLength+\n65535>>>16);ia();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},C:function(a,c){var e=0;xa().forEach(function(f,g){var h=c+e;g=P[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)N[g++>>0>>>0]=f.charCodeAt(h);N[g>>0>>>0]=0;e+=f.length+1});return 0},D:function(a,c){var e=xa();P[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});P[c>>2>>>0]=f;return 0},c:function(){return 52},g:function(){return 52},p:function(){return 70},f:function(a,c,e,f){for(var g=0,h=0;h<e;h++){var l=P[c>>2>>>0],\np=P[c+4>>2>>>0];c+=8;for(var w=0;w<p;w++){var v=K[l+w>>>0],q=ya[a];0===v||10===v?((1===a?ca:F)(fa(q,0)),q.length=0):q.push(v)}g+=p}P[f>>2>>>0]=g;return 0},K:Ca,q:function(a,c,e,f){return Ca(a,c,e,f)}};\n(function(){function a(g){b.asm=g.exports;I=b.asm.L;ia();ka.unshift(b.asm.M);Q--;b.monitorRunDependencies&&b.monitorRunDependencies(Q);0==Q&&(null!==R&&(clearInterval(R),R=null),S&&(g=S,S=null,g()))}function c(g){a(g.instance)}function e(g){return qa().then(function(h){return WebAssembly.instantiate(h,f)}).then(function(h){return h}).then(g,function(h){F(\"failed to asynchronously prepare wasm: \"+h);H(h)})}var f={a:Da};Q++;b.monitorRunDependencies&&b.monitorRunDependencies(Q);if(b.instantiateWasm)try{return b.instantiateWasm(f,\na)}catch(g){return F(\"Module.instantiateWasm callback failed with error: \"+g),!1}(function(){return G||\"function\"!=typeof WebAssembly.instantiateStreaming||na()||T.startsWith(\"file://\")||x||\"function\"!=typeof fetch?e(c):fetch(T,{credentials:\"same-origin\"}).then(function(g){return WebAssembly.instantiateStreaming(g,f).then(c,function(h){F(\"wasm streaming compile failed: \"+h);F(\"falling back to ArrayBuffer instantiation\");return e(c)})})})().catch(r);return{}})();\nb.___wasm_call_ctors=function(){return(b.___wasm_call_ctors=b.asm.M).apply(null,arguments)};b._OrtInit=function(){return(b._OrtInit=b.asm.N).apply(null,arguments)};b._OrtCreateSessionOptions=function(){return(b._OrtCreateSessionOptions=b.asm.O).apply(null,arguments)};b._OrtAppendExecutionProvider=function(){return(b._OrtAppendExecutionProvider=b.asm.P).apply(null,arguments)};b._OrtAddSessionConfigEntry=function(){return(b._OrtAddSessionConfigEntry=b.asm.Q).apply(null,arguments)};\nb._OrtReleaseSessionOptions=function(){return(b._OrtReleaseSessionOptions=b.asm.R).apply(null,arguments)};b._OrtCreateSession=function(){return(b._OrtCreateSession=b.asm.S).apply(null,arguments)};b._OrtReleaseSession=function(){return(b._OrtReleaseSession=b.asm.T).apply(null,arguments)};b._OrtGetInputCount=function(){return(b._OrtGetInputCount=b.asm.U).apply(null,arguments)};b._OrtGetOutputCount=function(){return(b._OrtGetOutputCount=b.asm.V).apply(null,arguments)};\nb._OrtGetInputName=function(){return(b._OrtGetInputName=b.asm.W).apply(null,arguments)};b._OrtGetOutputName=function(){return(b._OrtGetOutputName=b.asm.X).apply(null,arguments)};b._OrtFree=function(){return(b._OrtFree=b.asm.Y).apply(null,arguments)};b._OrtCreateTensor=function(){return(b._OrtCreateTensor=b.asm.Z).apply(null,arguments)};b._OrtGetTensorData=function(){return(b._OrtGetTensorData=b.asm._).apply(null,arguments)};\nb._OrtReleaseTensor=function(){return(b._OrtReleaseTensor=b.asm.$).apply(null,arguments)};b._OrtCreateRunOptions=function(){return(b._OrtCreateRunOptions=b.asm.aa).apply(null,arguments)};b._OrtAddRunConfigEntry=function(){return(b._OrtAddRunConfigEntry=b.asm.ba).apply(null,arguments)};b._OrtReleaseRunOptions=function(){return(b._OrtReleaseRunOptions=b.asm.ca).apply(null,arguments)};b._OrtRun=function(){return(b._OrtRun=b.asm.da).apply(null,arguments)};\nb._OrtEndProfiling=function(){return(b._OrtEndProfiling=b.asm.ea).apply(null,arguments)};var sa=b._malloc=function(){return(sa=b._malloc=b.asm.fa).apply(null,arguments)};b._free=function(){return(b._free=b.asm.ga).apply(null,arguments)};var Ea=b.stackSave=function(){return(Ea=b.stackSave=b.asm.ia).apply(null,arguments)},Fa=b.stackRestore=function(){return(Fa=b.stackRestore=b.asm.ja).apply(null,arguments)},Ga=b.stackAlloc=function(){return(Ga=b.stackAlloc=b.asm.ka).apply(null,arguments)};\nb.UTF8ToString=J;b.stringToUTF8=function(a,c,e){return L(a,K,c,e)};b.lengthBytesUTF8=M;b.stackSave=Ea;b.stackRestore=Fa;b.stackAlloc=Ga;var Z;S=function Ha(){Z||Ia();Z||(S=Ha)};\nfunction Ia(){function a(){if(!Z&&(Z=!0,b.calledRun=!0,!da)){U(ka);k(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();la.unshift(c)}U(la)}}if(!(0<Q)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)ma();U(ja);0<Q||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1);a()},1)):a())}}\nif(b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Ia();\n\n\n  return ortWasm.ready\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initWasm","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","onnxjsBackend","registerBackend","wasmBackend","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","version","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","document","OffscreenCanvas","createElement","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","response","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","currentKernelCustomData","kernelCustomData","gpu","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","webgpu","profilingMode","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","kernelPersistentData","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","inputGpuDataTypesToString","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","getTargetBuffer","download","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","TensorViewImpl","getFloat32Array","HEAP8","newDims","ComputeContextImpl","customData","contextDataOffset","heapU32","HEAPU32","opKernelContext","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","WebGpuBackend","isSourceGpu","HEAPU8","dataOffset","logLevelPrefix","LOG","messageLevel","logLevelStringToEnum","level","args","isChannelLast","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","acosh","asinh","atanh","pool","clipV10","cosh","parseAlphaAttributes","erf","parseGlobalMaxPoolAttributes","reciprocal","sinh","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","workPerThread","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","outputSize","vectorize","sharedDimension","dimA","shaderHelper","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","outputIndicesHelper","createIndicesHelper","calcOffsetImpl","o2iImpl","iType","assignment","indicesVariableDeclaration","o2iCall","singleAssignment","expressionA","expressionB","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","i2oImpl","i2oExpression","isPtr","ShaderHelperImpl","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","createShaderHelper","createGroupedConvProgramInfoLoader","squeezeOutputShapeFunction","getActicationSnippet","inputStorageBuffersDeclarations","xIndicesHelper","wIndicesHelper","createGroupedConvProgramInfo","weightTransposeAttribute","auto_pad","kernel_shape","wIsConst","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","activation_params","calculateAlpha","calculateC","m","broadcastM","broadcastN","offsetC","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","permAttr","inputIndicesHelper","permFunctionBody","datasize","expression","createElementwiseProgramShader","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","queryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","isSafeInteger","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","iterateExtraOptions","prefix","seen","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initOrt","loggingLevel","core","getInstance","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","extra","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","ortInit","path","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtAddSessionConfigEntry","_OrtReleaseSessionOptions","dataLength","lengthBytesUTF8","_malloc","stringToUTF8","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","BigInt64Array","errorCode","_OrtInit","activeSessions","modelDataOffset","sessionHandle","_OrtCreateSession","_OrtGetInputCount","outputCount","_OrtGetOutputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","HEAP32","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","scriptSourceCode","what","race","PThread","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","_scriptDir","F","L","I","H","P","u","Y","ready","l","h","importScripts","process","versions","ENVIRONMENT_IS_PTHREAD","O","T","__dirname","normalize","readFileSync","argv","on","ue","E","exitCode","exit","inspect","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","A","warn","writeSync","S","R","print","printErr","thisProgram","quit","wasmBinary","noExitRuntime","ne","U","G","W","String","fromCharCode","charCodeAt","q","HEAP16","HEAPU16","HEAPF32","HEAPF64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","J","Q","preRun","V","Z","$","ee","cmd","onAbort","RuntimeError","te","startsWith","re","ae","oe","ce","Ha","Qa","ie","Ya","Ma","Ga","start_routine","cb","Va","pthread_ptr","La","time","jb","loaded","se","Ye","eb","onExit","fe","pe","Ka","Ta","Za","$a","lb","receiveObjectTransfer","threadInitTLS","Sa","setExitStatus","Ra","sn","ab","Xa","targetThread","nn","mb","transferList","ke","thread","threadId","text","alert","filename","lineno","urlOrBlob","wasmModule","Ua","le","establishStackSpace","cn","pn","me","de","he","ge","ye","kb","_e","be","ve","we","Oe","Te","Me","Ae","Se","Re","xe","Ee","Fe","Atomics","store","compareExchange","De","Ce","Ie","He","tn","Pe","toTimeString","getFullYear","getTimezoneOffset","arguments","ln","mn","un","invokeEntryPoint","fn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Ue","Ge","We","je","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Ne","qe","Le","Be","ze","Je","Ke","Xe","Qe","Ve","Ze","getMonth","getDate","getDay","Ia","Ja","getTime","setDate","setMonth","setFullYear","hb","gb","Na","Pa","Oa","Fa","nb","ib","includes","$e","en","rn","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","setTime","Wa","copyWithin","apply","grow","asm","ta","wa","monitorRunDependencies","clearInterval","instance","credentials","ok","catch","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","pa","_pthread_self","qa","ra","sa","__emscripten_tls_init","__emscripten_thread_init","ua","__emscripten_thread_crashed","va","an","_emscripten_run_in_main_runtime_thread_js","xa","__emscripten_proxy_execute_task_queue","ya","__emscripten_thread_free_data","za","__emscripten_thread_exit","Aa","_emscripten_stack_set_limits","Ba","Ca","Da","Ea","dn","calledRun","onRuntimeInitialized","postRun","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","pending","base64","string","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","toJSON","Instance","Module","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","refAttrName","newBuffer","emptyArray","writer","uint32","float","int64","fork","ldelim","int32","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSONOptions","ValueInfoProto","TypeProto","metadataProps","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}