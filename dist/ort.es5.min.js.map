{"version":3,"file":"ort.es5.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/backend-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/env.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/env-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/tensor-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/tensor.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/inference-session-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/inference-session.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/./node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return k.buffer!=C&&G(k.buffer),I}function t(){return k.buffer!=C&&G(k.buffer),F}function r(){return k.buffer!=C&&G(k.buffer),H}function a(){return k.buffer!=C&&G(k.buffer),P}function u(){return k.buffer!=C&&G(k.buffer),Y}var o,i,s;e=e||{},o||(o=void 0!==e?e:{}),o.ready=new Promise((function(e,n){i=e,s=n}));var f,c,l,p,m,d,h=Object.assign({},o),g=\"./this.program\",y=(e,n)=>{throw n},_=\"object\"==typeof window,b=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=o.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function T(e){return o.locateFile?o.locateFile(e,O):O+e}if(v){let e;O=b?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",d=()=>{m||(p=require(\"fs\"),m=require(\"path\"))},f=function(e,n){return d(),e=m.normalize(e),p.readFileSync(e,n?void 0:\"utf8\")},l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t)=>{d(),e=m.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof ie))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),y=(e,n)=>{if(V())throw process.exitCode=e,n;n instanceof ie||x(\"exiting due to exception: \"+n),process.exit(e)},o.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(_||b)&&(b?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},b&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),A=console.warn.bind(console);v&&(d(),M=e=>p.writeSync(1,e+\"\\n\"),A=e=>p.writeSync(2,e+\"\\n\"));var S,R=o.print||M,x=o.printErr||A;Object.assign(o,h),h=null,o.thisProgram&&(g=o.thisProgram),o.quit&&(y=o.quit),o.wasmBinary&&(S=o.wasmBinary);var E=o.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&re(\"no native wasm support detected\");var k,D,C,I,F,H,P,Y,U=!1,W=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function j(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&W)return W.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var u=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|u);else{var o=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|u<<6|o:(7&a)<<18|u<<12|o<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function N(e,n){return(e>>>=0)?j(t(),e,n):\"\"}function L(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var u=0;u<e.length;++u){var o=e.charCodeAt(u);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++u)),127>=o){if(t>=r)break;n[t++>>>0]=o}else{if(2047>=o){if(t+1>=r)break;n[t++>>>0]=192|o>>6}else{if(65535>=o){if(t+2>=r)break;n[t++>>>0]=224|o>>12}else{if(t+3>=r)break;n[t++>>>0]=240|o>>18,n[t++>>>0]=128|o>>12&63}n[t++>>>0]=128|o>>6&63}n[t++>>>0]=128|63&o}}return n[t>>>0]=0,t-a}function q(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function G(e){C=e,o.HEAP8=I=new Int8Array(e),o.HEAP16=new Int16Array(e),o.HEAP32=H=new Int32Array(e),o.HEAPU8=F=new Uint8Array(e),o.HEAPU16=new Uint16Array(e),o.HEAPU32=P=new Uint32Array(e),o.HEAPF32=new Float32Array(e),o.HEAPF64=Y=new Float64Array(e)}w&&(C=o.buffer);var B=o.INITIAL_MEMORY||16777216;if(w)k=o.wasmMemory,C=o.buffer;else if(o.wasmMemory)k=o.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:B/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");k&&(C=k.buffer),B=C.byteLength,G(C);var z,J=[],Q=[],K=[],X=[];function V(){return E||!1}function Z(){var e=o.preRun.shift();J.unshift(e)}var $,ee=0,ne=null,te=null;function re(e){throw w?postMessage({cmd:\"onAbort\",arg:e}):o.onAbort&&o.onAbort(e),x(e=\"Aborted(\"+e+\")\"),U=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function ae(){return $.startsWith(\"data:application/octet-stream;base64,\")}function ue(){var e=$;try{if(e==$&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){re(e)}}$=\"ort-wasm-threaded.wasm\",ae()||($=T($));var oe={};function ie(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){(e=pe.Ja[e])||re(),pe.Sa(e)}function fe(e){var n=pe.ab();if(!n)return 6;pe.Oa.push(n),pe.Ja[e.Ia]=n,n.Ia=e.Ia;var t={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ia};return n.Na=()=>{t.time=performance.now(),n.postMessage(t,e.lb)},n.loaded&&(n.Na(),delete n.Na),0}function ce(e){if(w)return je(1,1,e);V()||(pe.Ua(),o.onExit&&o.onExit(e),U=!0),y(e,new ie(e))}function le(e,n){if(!n&&w)throw he(e),\"unwind\";V()||w||(fn(),me(K),sn(0),Xe[1].length&&Ve(1,10),Xe[2].length&&Ve(2,10),pe.Ua()),ce(e)}var pe={Ma:[],Oa:[],Wa:[],Ja:{},bb:function(){w&&pe.cb()},nb:function(){},cb:function(){pe.receiveObjectTransfer=pe.fb,pe.threadInitTLS=pe.Va,pe.setExitStatus=pe.Ta,E=!1},Ta:function(){},Ua:function(){for(var e of Object.values(pe.Ja))pe.Sa(e);for(e of pe.Ma)e.terminate();pe.Ma=[]},Sa:function(e){var n=e.Ia;delete pe.Ja[n],pe.Ma.push(e),pe.Oa.splice(pe.Oa.indexOf(e),1),e.Ia=0,dn(n)},fb:function(){},Va:function(){pe.Wa.forEach((e=>e()))},eb:function(e,n){e.onmessage=t=>{var r=(t=t.data).cmd;if(e.Ia&&(pe.$a=e.Ia),t.targetThread&&t.targetThread!=un()){var a=pe.Ja[t.ob];a?a.postMessage(t,t.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Fe(t.queue):\"spawnThread\"===r?fe(t):\"cleanupThread\"===r?se(t.thread):\"killThread\"===r?(t=t.thread,r=pe.Ja[t],delete pe.Ja[t],r.terminate(),dn(t),pe.Oa.splice(pe.Oa.indexOf(r),1),r.Ia=0):\"cancelThread\"===r?pe.Ja[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n&&n(e),e.Na&&(e.Na(),delete e.Na)):\"print\"===r?R(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?x(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===r?o.onAbort&&o.onAbort(t.arg):r&&x(\"worker sent an unknown command \"+r);pe.$a=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:o.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:D})},Xa:function(){var e=T(\"ort-wasm-threaded.worker.js\");pe.Ma.push(new Worker(e))},ab:function(){return 0==pe.Ma.length&&(pe.Xa(),pe.eb(pe.Ma[0])),pe.Ma.pop()}};function me(e){for(;0<e.length;)e.shift()(o)}function de(e){var n=yn();return e=e(),_n(n),e}function he(e){if(w)return je(2,0,e);try{le(e)}catch(e){e instanceof ie||\"unwind\"==e||y(1,e)}}o.PThread=pe,o.establishStackSpace=function(){var e=un(),n=r()[e+44>>2>>>0];e=r()[e+48>>2>>>0],gn(n,n-e),_n(n)};var ge,ye,_e=[];function be(e,n,t,r){return w?je(3,1,e,n,t,r):ve(e,n,t,r)}function ve(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?be(e,n,t,r):(e={gb:t,Ia:e,Ya:r,lb:a},w?(e.mb=\"spawnThread\",postMessage(e,a),0):fe(e))}function we(e,n,t){return w?je(4,1,e,n,t):0}function Oe(e,n){if(w)return je(5,1,e,n)}function Te(e,n){if(w)return je(6,1,e,n)}function Me(e,n,t){if(w)return je(7,1,e,n,t)}function Ae(e,n,t){return w?je(8,1,e,n,t):0}function Se(e,n){if(w)return je(9,1,e,n)}function Re(e,n,t){if(w)return je(10,1,e,n,t)}function xe(e,n,t,r){if(w)return je(11,1,e,n,t,r)}function Ee(e,n,t,r){if(w)return je(12,1,e,n,t,r)}function ke(e,n,t,r){if(w)return je(13,1,e,n,t,r)}function De(e){if(w)return je(14,1,e)}function Ce(e,n){if(w)return je(15,1,e,n)}function Ie(e,n,t){if(w)return je(16,1,e,n,t)}function Fe(e){Atomics.store(r(),e>>2,1),un()&&mn(e),Atomics.compareExchange(r(),e>>2,1,0)}function He(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Pe(e,n,t,r,a,u){return w?je(17,1,e,n,t,r,a,u):-52}function Ye(e,n,t,r,a,u){if(w)return je(18,1,e,n,t,r,a,u)}function Ue(e){var t=q(e)+1,r=on(t);return r&&L(e,n(),r,t),r}function We(e,n,t){function u(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(w)return je(19,1,e,n,t);var o=(new Date).getFullYear(),i=new Date(o,0,1),s=new Date(o,6,1);o=i.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(o,f);r()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(o!=f),e=u(i),n=u(s),e=Ue(e),n=Ue(n),f<o?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)}function je(e,n){var t=arguments.length-2,r=arguments;return de((()=>{for(var a=bn(8*t),o=a>>3,i=0;i<t;i++){var s=r[2+i];u()[o+i>>>0]=s}return pn(e,t,a,n)}))}o.invokeEntryPoint=function(e,n){var t=_e[e];t||(e>=_e.length&&(_e.length=e+1),_e[e]=t=z.get(e)),e=t(n),V()?pe.Ta(e):hn(e)},o.executeNotifiedProxyingQueue=Fe,ye=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:w?()=>performance.now()-o.__performance_now_clock_drift:()=>performance.now();var Ne,Le=[],qe={};function Ge(){if(!Ne){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in qe)void 0===qe[e]?delete n[e]:n[e]=qe[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Ne=t}return Ne}function Be(e,t){if(w)return je(20,1,e,t);var r=0;return Ge().forEach((function(u,o){var i=t+r;for(o=a()[e+4*o>>2>>>0]=i,i=0;i<u.length;++i)n()[o++>>0>>>0]=u.charCodeAt(i);n()[o>>0>>>0]=0,r+=u.length+1})),0}function ze(e,n){if(w)return je(21,1,e,n);var t=Ge();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Je(e){return w?je(22,1,e):52}function Qe(e,n,t,r){return w?je(23,1,e,n,t,r):52}function Ke(e,n,t,r,a){return w?je(24,1,e,n,t,r,a):70}var Xe=[null,[],[]];function Ve(e,n){var t=Xe[e];0===n||10===n?((1===e?R:x)(j(t,0)),t.length=0):t.push(n)}function Ze(e,n,r,u){if(w)return je(25,1,e,n,r,u);for(var o=0,i=0;i<r;i++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++)Ve(e,t()[s+c>>>0]);o+=f}return a()[u>>2>>>0]=o,0}function $e(e){return 0==e%4&&(0!=e%100||0==e%400)}var en=[31,29,31,30,31,30,31,31,30,31,30,31],nn=[31,28,31,30,31,30,31,31,30,31,30,31];function tn(e,t,a,u){function o(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function i(e,n){return o(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Ka;for(e=new Date(new Date(e.La+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=($e(e.getFullYear())?en:nn)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[u+40>>2>>>0];for(var p in u={jb:r()[u>>2>>>0],ib:r()[u+4>>2>>>0],Pa:r()[u+8>>2>>>0],Ra:r()[u+12>>2>>>0],Qa:r()[u+16>>2>>>0],La:r()[u+20>>2>>>0],Ha:r()[u+24>>2>>>0],Ka:r()[u+28>>2>>>0],pb:r()[u+32>>2>>>0],hb:r()[u+36>>2>>>0],kb:l?N(l):\"\"},a=N(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Ha].substring(0,3)},\"%A\":function(e){return m[e.Ha]},\"%b\":function(e){return d[e.Qa].substring(0,3)},\"%B\":function(e){return d[e.Qa]},\"%C\":function(e){return i((e.La+1900)/100|0,2)},\"%d\":function(e){return i(e.Ra,2)},\"%e\":function(e){return o(e.Ra,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return i(e.Pa,2)},\"%I\":function(e){return 0==(e=e.Pa)?e=12:12<e&&(e-=12),i(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Qa-1;n+=($e(e.La+1900)?en:nn)[t++]);return i(e.Ra+n,3)},\"%m\":function(e){return i(e.Qa+1,2)},\"%M\":function(e){return i(e.ib,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Pa&&12>e.Pa?\"AM\":\"PM\"},\"%S\":function(e){return i(e.jb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Ha||7},\"%U\":function(e){return i(Math.floor((e.Ka+7-e.Ha)/7),2)},\"%V\":function(e){var n=Math.floor((e.Ka+7-(e.Ha+6)%7)/7);if(2>=(e.Ha+371-e.Ka-2)%7&&n++,n)53==n&&(4==(t=(e.Ha+371-e.Ka)%7)||3==t&&$e(e.La)||(n=1));else{n=52;var t=(e.Ha+7-e.Ka-1)%7;(4==t||5==t&&$e(e.La%400-1))&&n++}return i(n,2)},\"%w\":function(e){return e.Ha},\"%W\":function(e){return i(Math.floor((e.Ka+7-(e.Ha+6)%7)/7),2)},\"%y\":function(e){return(e.La+1900).toString().substring(2)},\"%Y\":function(e){return e.La+1900},\"%z\":function(e){var n=0<=(e=e.hb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.kb},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](u)));return p=function(e){var n=Array(q(e)+1);return L(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}pe.bb();var rn=[null,ce,he,be,we,Oe,Te,Me,Ae,Se,Re,xe,Ee,ke,De,Ce,Ie,Pe,Ye,We,Be,ze,Je,Qe,Ke,Ze],an={L:function(e){cn(e,!b,1,!_),pe.Va()},h:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):se(e)},D:ve,e:we,S:Oe,z:Te,B:Me,s:Ae,Q:Se,I:Re,P:xe,k:Ee,A:ke,w:De,R:Ce,y:Ie,p:function(){},j:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},x:function(){re(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,n,t,r){if(e==n)setTimeout((()=>Fe(r)));else if(w)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=pe.Ja[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},V:function(e,n){e=new Date(1e3*He(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},m:function(e,n){e=new Date(1e3*He(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2>>>0]=a,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2>>>0]=e},n:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),u=new Date(n.getFullYear(),0,1),o=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=u.getTimezoneOffset(),s=Math.min(i,o);return 0>t?r()[e+32>>2>>>0]=Number(o!=i&&s==a):0<t!=(s==a)&&(o=Math.max(i,o),n.setTime(n.getTime()+6e4*((0<t?s:o)-a))),r()[e+24>>2>>>0]=n.getDay(),t=(n.getTime()-u.getTime())/864e5|0,r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},G:Pe,H:Ye,o:function e(n,t,r){e.Za||(e.Za=!0,We(n,t,r))},b:function(){re(\"\")},i:function(){if(!v&&!b){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";ge||(ge={}),ge[e]||(ge[e]=1,v&&(e=\"warning: \"+e),x(e))}},u:function(){return 4294901760},c:ye,O:function(e,n,r){t().copyWithin(e>>>0,n>>>0,n+r>>>0)},v:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},J:function(e,n,t){Le.length=n,t>>=3;for(var r=0;r<n;r++)Le[r]=u()[t+r>>>0];return(0>e?oe[-e-1]:rn[e]).apply(null,Le)},t:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var u=Math;a=Math.max(e,a),u=u.min.call(u,4294901760,a+(65536-a%65536)%65536);e:{try{k.grow(u-C.byteLength+65535>>>16),G(k.buffer);var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},T:function(){throw\"unwind\"},M:Be,N:ze,C:le,d:Je,g:Qe,q:Ke,f:Ze,a:k||o.wasmMemory,W:tn,r:function(e,n,t,r){return tn(e,n,t,r)}};!function(){function e(e,n){o.asm=e.exports,pe.Wa.push(o.asm.ua),z=o.asm.wa,Q.unshift(o.asm.X),D=n,w||(ee--,o.monitorRunDependencies&&o.monitorRunDependencies(ee),0==ee&&(null!==ne&&(clearInterval(ne),ne=null),te&&(e=te,te=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!S&&(_||b)){if(\"function\"==typeof fetch&&!$.startsWith(\"file://\"))return fetch($,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+$+\"'\";return e.arrayBuffer()})).catch((function(){return ue()}));if(c)return new Promise((function(e,n){c($,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return ue()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),re(e)}))}var r={a:an};if(w||(ee++,o.monitorRunDependencies&&o.monitorRunDependencies(ee)),o.instantiateWasm)try{return o.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(S||\"function\"!=typeof WebAssembly.instantiateStreaming||ae()||$.startsWith(\"file://\")||v||\"function\"!=typeof fetch?t(n):fetch($,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(s)}(),o.___wasm_call_ctors=function(){return(o.___wasm_call_ctors=o.asm.X).apply(null,arguments)},o._OrtInit=function(){return(o._OrtInit=o.asm.Y).apply(null,arguments)},o._OrtCreateSessionOptions=function(){return(o._OrtCreateSessionOptions=o.asm.Z).apply(null,arguments)},o._OrtAppendExecutionProvider=function(){return(o._OrtAppendExecutionProvider=o.asm._).apply(null,arguments)},o._OrtAddSessionConfigEntry=function(){return(o._OrtAddSessionConfigEntry=o.asm.$).apply(null,arguments)},o._OrtReleaseSessionOptions=function(){return(o._OrtReleaseSessionOptions=o.asm.aa).apply(null,arguments)},o._OrtCreateSession=function(){return(o._OrtCreateSession=o.asm.ba).apply(null,arguments)},o._OrtReleaseSession=function(){return(o._OrtReleaseSession=o.asm.ca).apply(null,arguments)},o._OrtGetInputCount=function(){return(o._OrtGetInputCount=o.asm.da).apply(null,arguments)},o._OrtGetOutputCount=function(){return(o._OrtGetOutputCount=o.asm.ea).apply(null,arguments)},o._OrtGetInputName=function(){return(o._OrtGetInputName=o.asm.fa).apply(null,arguments)},o._OrtGetOutputName=function(){return(o._OrtGetOutputName=o.asm.ga).apply(null,arguments)},o._OrtFree=function(){return(o._OrtFree=o.asm.ha).apply(null,arguments)},o._OrtCreateTensor=function(){return(o._OrtCreateTensor=o.asm.ia).apply(null,arguments)},o._OrtGetTensorData=function(){return(o._OrtGetTensorData=o.asm.ja).apply(null,arguments)},o._OrtReleaseTensor=function(){return(o._OrtReleaseTensor=o.asm.ka).apply(null,arguments)},o._OrtCreateRunOptions=function(){return(o._OrtCreateRunOptions=o.asm.la).apply(null,arguments)},o._OrtAddRunConfigEntry=function(){return(o._OrtAddRunConfigEntry=o.asm.ma).apply(null,arguments)},o._OrtReleaseRunOptions=function(){return(o._OrtReleaseRunOptions=o.asm.na).apply(null,arguments)},o._OrtRun=function(){return(o._OrtRun=o.asm.oa).apply(null,arguments)},o._OrtEndProfiling=function(){return(o._OrtEndProfiling=o.asm.pa).apply(null,arguments)};var un=o._pthread_self=function(){return(un=o._pthread_self=o.asm.qa).apply(null,arguments)},on=o._malloc=function(){return(on=o._malloc=o.asm.ra).apply(null,arguments)};o._free=function(){return(o._free=o.asm.sa).apply(null,arguments)};var sn=o._fflush=function(){return(sn=o._fflush=o.asm.ta).apply(null,arguments)};o.__emscripten_tls_init=function(){return(o.__emscripten_tls_init=o.asm.ua).apply(null,arguments)};var fn=o.___funcs_on_exit=function(){return(fn=o.___funcs_on_exit=o.asm.va).apply(null,arguments)},cn=o.__emscripten_thread_init=function(){return(cn=o.__emscripten_thread_init=o.asm.xa).apply(null,arguments)};o.__emscripten_thread_crashed=function(){return(o.__emscripten_thread_crashed=o.asm.ya).apply(null,arguments)};var ln,pn=o._emscripten_run_in_main_runtime_thread_js=function(){return(pn=o._emscripten_run_in_main_runtime_thread_js=o.asm.za).apply(null,arguments)},mn=o.__emscripten_proxy_execute_task_queue=function(){return(mn=o.__emscripten_proxy_execute_task_queue=o.asm.Aa).apply(null,arguments)},dn=o.__emscripten_thread_free_data=function(){return(dn=o.__emscripten_thread_free_data=o.asm.Ba).apply(null,arguments)},hn=o.__emscripten_thread_exit=function(){return(hn=o.__emscripten_thread_exit=o.asm.Ca).apply(null,arguments)},gn=o._emscripten_stack_set_limits=function(){return(gn=o._emscripten_stack_set_limits=o.asm.Da).apply(null,arguments)},yn=o.stackSave=function(){return(yn=o.stackSave=o.asm.Ea).apply(null,arguments)},_n=o.stackRestore=function(){return(_n=o.stackRestore=o.asm.Fa).apply(null,arguments)},bn=o.stackAlloc=function(){return(bn=o.stackAlloc=o.asm.Ga).apply(null,arguments)};function vn(){function e(){if(!ln&&(ln=!0,o.calledRun=!0,!U)&&(w||me(Q),i(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!w)){if(o.postRun)for(\"function\"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;){var e=o.postRun.shift();X.unshift(e)}me(X)}}if(!(0<ee))if(w)i(o),w||me(Q),postMessage({cmd:\"loaded\"});else{if(o.preRun)for(\"function\"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)Z();me(J),0<ee||(o.setStatus?(o.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){o.setStatus(\"\")}),1),e()}),1)):e())}}if(o.UTF8ToString=N,o.stringToUTF8=function(e,n,r){return L(e,t(),n,r)},o.lengthBytesUTF8=q,o.keepRuntimeAlive=V,o.wasmMemory=k,o.stackSave=yn,o.stackRestore=_n,o.stackAlloc=bn,o.ExitStatus=ie,o.PThread=pe,te=function e(){ln||vn(),ln||(te=e)},o.preInit)for(\"function\"==typeof o.preInit&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return vn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm) {\n  ortWasm = ortWasm || {};\n\n\nvar b;b||(b=typeof ortWasm !== 'undefined' ? ortWasm : {});var k,r;b.ready=new Promise(function(a,c){k=a;r=c});var aa=Object.assign({},b),t=\"./this.program\",ba=\"object\"==typeof window,u=\"function\"==typeof importScripts,x=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,z=\"\",A,B,C,fs,D,E;\nif(x)z=u?require(\"path\").dirname(z)+\"/\":__dirname+\"/\",E=()=>{D||(fs=require(\"fs\"),D=require(\"path\"))},A=function(a,c){E();a=D.normalize(a);return fs.readFileSync(a,c?void 0:\"utf8\")},C=a=>{a=A(a,!0);a.buffer||(a=new Uint8Array(a));return a},B=(a,c,e)=>{E();a=D.normalize(a);fs.readFile(a,function(f,g){f?e(f):c(g.buffer)})},1<process.argv.length&&(t=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){throw a;}),process.on(\"unhandledRejection\",function(a){throw a;\n}),b.inspect=function(){return\"[Emscripten Module object]\"};else if(ba||u)u?z=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(z=document.currentScript.src),_scriptDir&&(z=_scriptDir),0!==z.indexOf(\"blob:\")?z=z.substr(0,z.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):z=\"\",A=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.send(null);return c.responseText},u&&(C=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.responseType=\"arraybuffer\";c.send(null);return new Uint8Array(c.response)}),\nB=(a,c,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?c(f.response):e()};f.onerror=e;f.send(null)};var ca=b.print||console.log.bind(console),F=b.printErr||console.warn.bind(console);Object.assign(b,aa);aa=null;b.thisProgram&&(t=b.thisProgram);var G;b.wasmBinary&&(G=b.wasmBinary);var noExitRuntime=b.noExitRuntime||!1;\"object\"!=typeof WebAssembly&&H(\"no native wasm support detected\");\nvar I,da=!1,ea=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction fa(a,c,e){c>>>=0;var f=c+e;for(e=c;a[e]&&!(e>=f);)++e;if(16<e-c&&a.buffer&&ea)return ea.decode(a.subarray(c,e));for(f=\"\";c<e;){var g=a[c++];if(g&128){var h=a[c++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[c++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[c++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function J(a,c){return(a>>>=0)?fa(K,a,c):\"\"}\nfunction L(a,c,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var p=a.charCodeAt(++h);l=65536+((l&1023)<<10)|p&1023}if(127>=l){if(e>=f)break;c[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;c[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;c[e++>>>0]=224|l>>12}else{if(e+3>=f)break;c[e++>>>0]=240|l>>18;c[e++>>>0]=128|l>>12&63}c[e++>>>0]=128|l>>6&63}c[e++>>>0]=128|l&63}}c[e>>>0]=0;return e-g}\nfunction M(a){for(var c=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?c++:2047>=f?c+=2:55296<=f&&57343>=f?(c+=4,++e):c+=3}return c}var ha,N,K,O,P;function ia(){var a=I.buffer;ha=a;b.HEAP8=N=new Int8Array(a);b.HEAP16=new Int16Array(a);b.HEAP32=O=new Int32Array(a);b.HEAPU8=K=new Uint8Array(a);b.HEAPU16=new Uint16Array(a);b.HEAPU32=P=new Uint32Array(a);b.HEAPF32=new Float32Array(a);b.HEAPF64=new Float64Array(a)}var ja=[],ka=[],la=[];function ma(){var a=b.preRun.shift();ja.unshift(a)}\nvar Q=0,R=null,S=null;function H(a){if(b.onAbort)b.onAbort(a);a=\"Aborted(\"+a+\")\";F(a);da=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");r(a);throw a;}function na(){return T.startsWith(\"data:application/octet-stream;base64,\")}var T;T=\"ort-wasm.wasm\";if(!na()){var oa=T;T=b.locateFile?b.locateFile(oa,z):z+oa}function pa(){var a=T;try{if(a==T&&G)return new Uint8Array(G);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){H(c)}}\nfunction qa(){if(!G&&(ba||u)){if(\"function\"==typeof fetch&&!T.startsWith(\"file://\"))return fetch(T,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+T+\"'\";return a.arrayBuffer()}).catch(function(){return pa()});if(B)return new Promise(function(a,c){B(T,function(e){a(new Uint8Array(e))},c)})}return Promise.resolve().then(function(){return pa()})}function U(a){for(;0<a.length;)a.shift()(b)}function ra(a){var c=M(a)+1,e=sa(c);e&&L(a,N,e,c);return e}\nfunction ta(a,c,e){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var p=l.getTimezoneOffset();O[a>>2>>>0]=60*Math.max(g,p);O[c>>2>>>0]=Number(g!=p);a=f(h);c=f(l);a=ra(a);c=ra(c);p<g?(P[e>>2>>>0]=a,P[e+4>>2>>>0]=c):(P[e>>2>>>0]=c,P[e+4>>2>>>0]=a)}function V(a,c,e){V.ra||(V.ra=!0,ta(a,c,e))}var W={};\nfunction xa(){if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:t||\"./this.program\"},c;for(c in W)void 0===W[c]?delete a[c]:a[c]=W[c];var e=[];for(c in a)e.push(c+\"=\"+a[c]);X=e}return X}var X,ya=[null,[],[]];function Y(a){return 0===a%4&&(0!==a%100||0===a%400)}var za=[31,29,31,30,31,30,31,31,30,31,30,31],Aa=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Ba(a){var c=Array(M(a)+1);L(a,c,0,c.length);return c}\nfunction Ca(a,c,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function h(d,m){return g(d,m,\"0\")}function l(d,m){function n(ua){return 0>ua?-1:0<ua?1:0}var y;0===(y=n(d.getFullYear()-m.getFullYear()))&&0===(y=n(d.getMonth()-m.getMonth()))&&(y=n(d.getDate()-m.getDate()));return y}function p(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var m=d.ma;for(d=new Date((new Date(d.na+1900,0,1)).getTime());0<m;){var n=d.getMonth(),y=(Y(d.getFullYear())?za:Aa)[n];if(m>y-d.getDate())m-=y-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=p(new Date(d.getFullYear(),\n0,4));n=p(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var v=O[f+40>>2>>>0];f={ua:O[f>>2>>>0],ta:O[f+4>>2>>>0],oa:O[f+8>>2>>>0],qa:O[f+12>>2>>>0],pa:O[f+16>>2>>>0],na:O[f+20>>2>>>0],ia:O[f+24>>2>>>0],ma:O[f+28>>2>>>0],wa:O[f+32>>2>>>0],sa:O[f+36>>2>>>0],va:v?J(v):\"\"};e=J(e);v={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var q in v)e=e.replace(new RegExp(q,\"g\"),v[q]);var va=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),wa=\"January February March April May June July August September October November December\".split(\" \");v={\"%a\":function(d){return va[d.ia].substring(0,3)},\"%A\":function(d){return va[d.ia]},\"%b\":function(d){return wa[d.pa].substring(0,\n3)},\"%B\":function(d){return wa[d.pa]},\"%C\":function(d){return h((d.na+1900)/100|0,2)},\"%d\":function(d){return h(d.qa,2)},\"%e\":function(d){return g(d.qa,2,\" \")},\"%g\":function(d){return w(d).toString().substring(2)},\"%G\":function(d){return w(d)},\"%H\":function(d){return h(d.oa,2)},\"%I\":function(d){d=d.oa;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.pa-1;m+=(Y(d.na+1900)?za:Aa)[n++]);return h(d.qa+m,3)},\"%m\":function(d){return h(d.pa+1,2)},\"%M\":function(d){return h(d.ta,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.oa&&12>d.oa?\"AM\":\"PM\"},\"%S\":function(d){return h(d.ua,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ia||7},\"%U\":function(d){return h(Math.floor((d.ma+7-d.ia)/7),2)},\"%V\":function(d){var m=Math.floor((d.ma+7-(d.ia+6)%7)/7);2>=(d.ia+371-d.ma-2)%7&&m++;if(m)53==m&&(n=(d.ia+371-d.ma)%7,4==n||3==n&&Y(d.na)||(m=1));else{m=52;var n=(d.ia+7-d.ma-1)%7;(4==n||5==n&&Y(d.na%400-1))&&m++}return h(m,2)},\"%w\":function(d){return d.ia},\"%W\":function(d){return h(Math.floor((d.ma+\n7-(d.ia+6)%7)/7),2)},\"%y\":function(d){return(d.na+1900).toString().substring(2)},\"%Y\":function(d){return d.na+1900},\"%z\":function(d){d=d.sa;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.va},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(q in v)e.includes(q)&&(e=e.replace(new RegExp(q,\"g\"),v[q](f)));e=e.replace(/\\0\\0/g,\"%\");q=Ba(e);if(q.length>c)return 0;N.set(q,a>>>0);return q.length-1}\nvar Da={d:function(){return 0},I:function(){},w:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(){},F:function(){},h:function(){},x:function(){},t:function(){},H:function(){},v:function(){},n:function(){},u:function(){H(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},o:function(){H(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},i:function(){return Date.now()},\nJ:function(){return!0},j:function(a,c){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[c>>2>>>0]=a.getUTCSeconds();O[c+4>>2>>>0]=a.getUTCMinutes();O[c+8>>2>>>0]=a.getUTCHours();O[c+12>>2>>>0]=a.getUTCDate();O[c+16>>2>>>0]=a.getUTCMonth();O[c+20>>2>>>0]=a.getUTCFullYear()-1900;O[c+24>>2>>>0]=a.getUTCDay();O[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},k:function(a,c){a=new Date(1E3*(P[a>>>2]+4294967296*O[a+4>>>2]));O[c>>2>>>0]=a.getSeconds();O[c+4>>2>>>0]=a.getMinutes();\nO[c+8>>2>>>0]=a.getHours();O[c+12>>2>>>0]=a.getDate();O[c+16>>2>>>0]=a.getMonth();O[c+20>>2>>>0]=a.getFullYear()-1900;O[c+24>>2>>>0]=a.getDay();var e=new Date(a.getFullYear(),0,1);O[c+28>>2>>>0]=(a.getTime()-e.getTime())/864E5|0;O[c+36>>2>>>0]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();O[c+32>>2>>>0]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},l:function(a){var c=new Date(O[a+20>>2>>>0]+1900,O[a+16>>2>>>0],O[a+12>>2>>>0],O[a+8>>\n2>>>0],O[a+4>>2>>>0],O[a>>2>>>0],0),e=O[a+32>>2>>>0],f=c.getTimezoneOffset(),g=new Date(c.getFullYear(),0,1),h=(new Date(c.getFullYear(),6,1)).getTimezoneOffset(),l=g.getTimezoneOffset(),p=Math.min(l,h);0>e?O[a+32>>2>>>0]=Number(h!=l&&p==f):0<e!=(p==f)&&(h=Math.max(l,h),c.setTime(c.getTime()+6E4*((0<e?p:h)-f)));O[a+24>>2>>>0]=c.getDay();O[a+28>>2>>>0]=(c.getTime()-g.getTime())/864E5|0;O[a>>2>>>0]=c.getSeconds();O[a+4>>2>>>0]=c.getMinutes();O[a+8>>2>>>0]=c.getHours();O[a+12>>2>>>0]=c.getDate();O[a+\n16>>2>>>0]=c.getMonth();return c.getTime()/1E3|0},z:function(){return-52},A:function(){},m:V,a:function(){H(\"\")},s:function(){return 4294901760},e:x?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),E:function(a,c,e){K.copyWithin(a>>>0,c>>>0,c+e>>>0)},b:function(a){var c=K.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=c*(1+.2/e);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);g=g.min.call(g,4294901760,f+(65536-f%65536)%65536);a:{try{I.grow(g-ha.byteLength+\n65535>>>16);ia();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},C:function(a,c){var e=0;xa().forEach(function(f,g){var h=c+e;g=P[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)N[g++>>0>>>0]=f.charCodeAt(h);N[g>>0>>>0]=0;e+=f.length+1});return 0},D:function(a,c){var e=xa();P[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});P[c>>2>>>0]=f;return 0},c:function(){return 52},g:function(){return 52},p:function(){return 70},f:function(a,c,e,f){for(var g=0,h=0;h<e;h++){var l=P[c>>2>>>0],\np=P[c+4>>2>>>0];c+=8;for(var w=0;w<p;w++){var v=K[l+w>>>0],q=ya[a];0===v||10===v?((1===a?ca:F)(fa(q,0)),q.length=0):q.push(v)}g+=p}P[f>>2>>>0]=g;return 0},K:Ca,q:function(a,c,e,f){return Ca(a,c,e,f)}};\n(function(){function a(g){b.asm=g.exports;I=b.asm.L;ia();ka.unshift(b.asm.M);Q--;b.monitorRunDependencies&&b.monitorRunDependencies(Q);0==Q&&(null!==R&&(clearInterval(R),R=null),S&&(g=S,S=null,g()))}function c(g){a(g.instance)}function e(g){return qa().then(function(h){return WebAssembly.instantiate(h,f)}).then(function(h){return h}).then(g,function(h){F(\"failed to asynchronously prepare wasm: \"+h);H(h)})}var f={a:Da};Q++;b.monitorRunDependencies&&b.monitorRunDependencies(Q);if(b.instantiateWasm)try{return b.instantiateWasm(f,\na)}catch(g){return F(\"Module.instantiateWasm callback failed with error: \"+g),!1}(function(){return G||\"function\"!=typeof WebAssembly.instantiateStreaming||na()||T.startsWith(\"file://\")||x||\"function\"!=typeof fetch?e(c):fetch(T,{credentials:\"same-origin\"}).then(function(g){return WebAssembly.instantiateStreaming(g,f).then(c,function(h){F(\"wasm streaming compile failed: \"+h);F(\"falling back to ArrayBuffer instantiation\");return e(c)})})})().catch(r);return{}})();\nb.___wasm_call_ctors=function(){return(b.___wasm_call_ctors=b.asm.M).apply(null,arguments)};b._OrtInit=function(){return(b._OrtInit=b.asm.N).apply(null,arguments)};b._OrtCreateSessionOptions=function(){return(b._OrtCreateSessionOptions=b.asm.O).apply(null,arguments)};b._OrtAppendExecutionProvider=function(){return(b._OrtAppendExecutionProvider=b.asm.P).apply(null,arguments)};b._OrtAddSessionConfigEntry=function(){return(b._OrtAddSessionConfigEntry=b.asm.Q).apply(null,arguments)};\nb._OrtReleaseSessionOptions=function(){return(b._OrtReleaseSessionOptions=b.asm.R).apply(null,arguments)};b._OrtCreateSession=function(){return(b._OrtCreateSession=b.asm.S).apply(null,arguments)};b._OrtReleaseSession=function(){return(b._OrtReleaseSession=b.asm.T).apply(null,arguments)};b._OrtGetInputCount=function(){return(b._OrtGetInputCount=b.asm.U).apply(null,arguments)};b._OrtGetOutputCount=function(){return(b._OrtGetOutputCount=b.asm.V).apply(null,arguments)};\nb._OrtGetInputName=function(){return(b._OrtGetInputName=b.asm.W).apply(null,arguments)};b._OrtGetOutputName=function(){return(b._OrtGetOutputName=b.asm.X).apply(null,arguments)};b._OrtFree=function(){return(b._OrtFree=b.asm.Y).apply(null,arguments)};b._OrtCreateTensor=function(){return(b._OrtCreateTensor=b.asm.Z).apply(null,arguments)};b._OrtGetTensorData=function(){return(b._OrtGetTensorData=b.asm._).apply(null,arguments)};\nb._OrtReleaseTensor=function(){return(b._OrtReleaseTensor=b.asm.$).apply(null,arguments)};b._OrtCreateRunOptions=function(){return(b._OrtCreateRunOptions=b.asm.aa).apply(null,arguments)};b._OrtAddRunConfigEntry=function(){return(b._OrtAddRunConfigEntry=b.asm.ba).apply(null,arguments)};b._OrtReleaseRunOptions=function(){return(b._OrtReleaseRunOptions=b.asm.ca).apply(null,arguments)};b._OrtRun=function(){return(b._OrtRun=b.asm.da).apply(null,arguments)};\nb._OrtEndProfiling=function(){return(b._OrtEndProfiling=b.asm.ea).apply(null,arguments)};var sa=b._malloc=function(){return(sa=b._malloc=b.asm.fa).apply(null,arguments)};b._free=function(){return(b._free=b.asm.ga).apply(null,arguments)};b._fflush=function(){return(b._fflush=b.asm.ha).apply(null,arguments)};\nvar Ea=b.stackSave=function(){return(Ea=b.stackSave=b.asm.ja).apply(null,arguments)},Fa=b.stackRestore=function(){return(Fa=b.stackRestore=b.asm.ka).apply(null,arguments)},Ga=b.stackAlloc=function(){return(Ga=b.stackAlloc=b.asm.la).apply(null,arguments)};b.UTF8ToString=J;b.stringToUTF8=function(a,c,e){return L(a,K,c,e)};b.lengthBytesUTF8=M;b.stackSave=Ea;b.stackRestore=Fa;b.stackAlloc=Ga;var Z;S=function Ha(){Z||Ia();Z||(S=Ha)};\nfunction Ia(){function a(){if(!Z&&(Z=!0,b.calledRun=!0,!da)){U(ka);k(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();la.unshift(c)}U(la)}}if(!(0<Q)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)ma();U(ja);0<Q||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1);a()},1)):a())}}\nif(b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Ia();\n\n\n  return ortWasm.ready\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.naturalHeight;\n                let width = image.naturalWidth;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                canvas.width = width;\n                canvas.height = height;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        var _a, _b;\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (((_a = options.norm) === null || _a === void 0 ? void 0 : _a.mean) !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (((_b = options.norm) === null || _b === void 0 ? void 0 : _b.bias) !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\n\nlet ortInit: boolean;\n\n\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, getLogLevel(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    if (options?.graphOptimizationLevel === undefined) {\n      sessionOptions.graphOptimizationLevel = 'all';\n    }\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\n\n    if (options?.enableCpuMemArena === undefined) {\n      sessionOptions.enableCpuMemArena = true;\n    }\n\n    if (options?.enableMemPattern === undefined) {\n      sessionOptions.enableMemPattern = true;\n    }\n\n    if (options?.executionMode === undefined) {\n      sessionOptions.executionMode = 'sequential';\n    }\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\n\n    let logIdDataOffset = 0;\n    if (options?.logId !== undefined) {\n      logIdDataOffset = allocWasmString(options.logId, allocs);\n    }\n\n    if (options?.logSeverityLevel === undefined) {\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.enableProfiling === undefined) {\n      sessionOptions.enableProfiling = false;\n    }\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\n        !!sessionOptions.enableProfiling!, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\n        sessionOptions.logVerbosityLevel!);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (options?.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, options.executionProviders, allocs);\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nconst enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n\nconst tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\nconst tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run =\n    (sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n     options: InferenceSession.RunOptions): SerializableTensor[] => {\n      const wasm = getInstance();\n      const session = activeSessions.get(sessionId);\n      if (!session) {\n        throw new Error('invalid session id');\n      }\n      const sessionHandle = session[0];\n      const inputNamesUTF8Encoded = session[1];\n      const outputNamesUTF8Encoded = session[2];\n\n      const inputCount = inputIndices.length;\n      const outputCount = outputIndices.length;\n\n      let runOptionsHandle = 0;\n      let runOptionsAllocs: number[] = [];\n\n      const inputValues: number[] = [];\n      const inputAllocs: number[] = [];\n\n      try {\n        [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n        // create input tensors\n        for (let i = 0; i < inputCount; i++) {\n          const dataType = inputs[i][0];\n          const dims = inputs[i][1];\n          const data = inputs[i][2];\n\n          let dataOffset: number;\n          let dataByteLength: number;\n\n          if (Array.isArray(data)) {\n            // string tensor\n            dataByteLength = 4 * data.length;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < data.length; i++) {\n              if (typeof data[i] !== 'string') {\n                throw new TypeError(`tensor data at index ${i} is not a string`);\n              }\n              wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n            }\n          } else {\n            dataByteLength = data.byteLength;\n            dataOffset = wasm._malloc(dataByteLength);\n            inputAllocs.push(dataOffset);\n            wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n            if (tensor === 0) {\n              throw new Error('Can\\'t create a tensor');\n            }\n            inputValues.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        }\n\n        const beforeRunStack = wasm.stackSave();\n        const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n        const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n        const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n        const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n        try {\n          let inputValuesIndex = inputValuesOffset / 4;\n          let inputNamesIndex = inputNamesOffset / 4;\n          let outputValuesIndex = outputValuesOffset / 4;\n          let outputNamesIndex = outputNamesOffset / 4;\n          for (let i = 0; i < inputCount; i++) {\n            wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n            wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n          }\n          for (let i = 0; i < outputCount; i++) {\n            wasm.HEAPU32[outputValuesIndex++] = 0;\n            wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n          }\n\n          // support RunOptions\n          let errorCode = wasm._OrtRun(\n              sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n              outputValuesOffset, runOptionsHandle);\n\n          const output: SerializableTensor[] = [];\n\n          if (errorCode === 0) {\n            for (let i = 0; i < outputCount; i++) {\n              const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n              const beforeGetTensorDataStack = wasm.stackSave();\n              // stack allocate 4 pointer value\n              const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n              let type: Tensor.Type|undefined, dataOffset = 0;\n              try {\n                errorCode = wasm._OrtGetTensorData(\n                    tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n                if (errorCode !== 0) {\n                  throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n                }\n                let tensorDataIndex = tensorDataOffset / 4;\n                const dataType = wasm.HEAPU32[tensorDataIndex++];\n                dataOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n                const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n                const dims = [];\n                for (let i = 0; i < dimsLength; i++) {\n                  dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n                }\n                wasm._OrtFree(dimsOffset);\n\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n                type = tensorDataTypeEnumToString(dataType);\n                if (type === 'string') {\n                  const stringData: string[] = [];\n                  let dataIndex = dataOffset / 4;\n                  for (let i = 0; i < size; i++) {\n                    const offset = wasm.HEAPU32[dataIndex++];\n                    const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                    stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n                  }\n                  output.push([type, dims, stringData]);\n                } else {\n                  const typedArrayConstructor = numericTensorTypeToTypedArray(type);\n                  const data = new typedArrayConstructor(size);\n                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                      .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n                  output.push([type, dims, data]);\n                }\n              } finally {\n                wasm.stackRestore(beforeGetTensorDataStack);\n                if (type === 'string' && dataOffset) {\n                  wasm._free(dataOffset);\n                }\n                wasm._OrtReleaseTensor(tensor);\n              }\n            }\n          }\n\n          if (errorCode === 0) {\n            return output;\n          } else {\n            throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n          }\n        } finally {\n          wasm.stackRestore(beforeRunStack);\n        }\n      } finally {\n        inputValues.forEach(wasm._OrtReleaseTensor);\n        inputAllocs.forEach(wasm._free);\n\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\n        runOptionsAllocs.forEach(wasm._free);\n      }\n    };\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.14.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={474:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return C.buffer!=D&&G(C.buffer),F}function r(){return C.buffer!=D&&G(C.buffer),I}function a(){return C.buffer!=D&&G(C.buffer),U}function o(){return C.buffer!=D&&G(C.buffer),H}function i(){return C.buffer!=D&&G(C.buffer),L}var u,s,c;e=e||{},u||(u=void 0!==e?e:{}),u.ready=new Promise((function(e,t){s=e,c=t}));var l,f,p,d,m,g,h=Object.assign({},u),y=\\\"./this.program\\\",v=(e,t)=>{throw t},b=\\\"object\\\"==typeof window,_=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function A(e){return u.locateFile?u.locateFile(e,S):S+e}if(w){let t;S=_?n(908).dirname(S)+\\\"/\\\":\\\"//\\\",g=()=>{m||(d=n(384),m=n(908))},l=function(e,t){return g(),e=m.normalize(e),d.readFileSync(e,t?void 0:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{g(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof se))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,t)=>{if(Z())throw process.exitCode=e,t;t instanceof se||x(\\\"exiting due to exception: \\\"+t),process.exit(e)},u.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=t.Worker}else(b||_)&&(_?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},_&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);w&&(g(),T=e=>d.writeSync(1,e+\\\"\\\\n\\\"),E=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,R=u.print||T,x=u.printErr||E;Object.assign(u,h),h=null,u.thisProgram&&(y=u.thisProgram),u.quit&&(v=u.quit),u.wasmBinary&&(M=u.wasmBinary);var k=u.noExitRuntime||!1;\\\"object\\\"!=typeof WebAssembly&&ae(\\\"no native wasm support detected\\\");var C,P,D,F,I,U,H,L,W=!1,j=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function Y(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&j)return j.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?Y(r(),e,t):\\\"\\\"}function N(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function B(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function G(e){D=e,u.HEAP8=F=new Int8Array(e),u.HEAP16=new Int16Array(e),u.HEAP32=U=new Int32Array(e),u.HEAPU8=I=new Uint8Array(e),u.HEAPU16=new Uint16Array(e),u.HEAPU32=H=new Uint32Array(e),u.HEAPF32=new Float32Array(e),u.HEAPF64=L=new Float64Array(e)}O&&(D=u.buffer);var q=u.INITIAL_MEMORY||16777216;if(O)C=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)C=u.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");C&&(D=C.buffer),q=D.byteLength,G(D);var V,J=[],X=[],Q=[],K=[];function Z(){return k||!1}function $(){var e=u.preRun.shift();J.unshift(e)}var ee,te=0,ne=null,re=null;function ae(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):u.onAbort&&u.onAbort(e),x(e=\\\"Aborted(\\\"+e+\\\")\\\"),W=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function oe(){return ee.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ie(){var e=ee;try{if(e==ee&&M)return new Uint8Array(M);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ae(e)}}ee=\\\"ort-wasm-threaded.wasm\\\",oe()||(ee=A(ee));var ue={};function se(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function ce(e){(e=de.Ja[e])||ae(),de.Sa(e)}function le(e){var t=de.ab();if(!t)return 6;de.Oa.push(t),de.Ja[e.Ia]=t,t.Ia=e.Ia;var n={cmd:\\\"run\\\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ia};return t.Na=()=>{n.time=performance.now(),t.postMessage(n,e.lb)},t.loaded&&(t.Na(),delete t.Na),0}function fe(e){if(O)return Ye(1,1,e);Z()||(de.Ua(),u.onExit&&u.onExit(e),W=!0),v(e,new se(e))}function pe(e,t){if(!t&&O)throw he(e),\\\"unwind\\\";Z()||O||(ct(),me(Q),st(0),Ke[1].length&&Ze(1,10),Ke[2].length&&Ze(2,10),de.Ua()),fe(e)}var de={Ma:[],Oa:[],Wa:[],Ja:{},bb:function(){O&&de.cb()},nb:function(){},cb:function(){de.receiveObjectTransfer=de.fb,de.threadInitTLS=de.Va,de.setExitStatus=de.Ta,k=!1},Ta:function(){},Ua:function(){for(var e of Object.values(de.Ja))de.Sa(e);for(e of de.Ma)e.terminate();de.Ma=[]},Sa:function(e){var t=e.Ia;delete de.Ja[t],de.Ma.push(e),de.Oa.splice(de.Oa.indexOf(e),1),e.Ia=0,mt(t)},fb:function(){},Va:function(){de.Wa.forEach((e=>e()))},eb:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Ia&&(de.$a=e.Ia),n.targetThread&&n.targetThread!=it()){var a=de.Ja[n.ob];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?Ie(n.queue):\\\"spawnThread\\\"===r?le(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=de.Ja[n],delete de.Ja[n],r.terminate(),mt(n),de.Oa.splice(de.Oa.indexOf(r),1),r.Ia=0):\\\"cancelThread\\\"===r?de.Ja[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Na&&(e.Na(),delete e.Na)):\\\"print\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?u.onAbort&&u.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);de.$a=void 0},e.onerror=e=>{throw x(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:P})},Xa:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");de.Ma.push(new Worker(e))},ab:function(){return 0==de.Ma.length&&(de.Xa(),de.eb(de.Ma[0])),de.Ma.pop()}};function me(e){for(;0<e.length;)e.shift()(u)}function ge(e){var t=yt();return e=e(),vt(t),e}function he(e){if(O)return Ye(2,0,e);try{pe(e)}catch(e){e instanceof se||\\\"unwind\\\"==e||v(1,e)}}u.PThread=de,u.establishStackSpace=function(){var e=it(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],ht(t,t-e),vt(t)};var ye,ve,be=[];function _e(e,t,n,r){return O?Ye(3,1,e,t,n,r):we(e,t,n,r)}function we(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?_e(e,t,n,r):(e={gb:n,Ia:e,Ya:r,lb:a},O?(e.mb=\\\"spawnThread\\\",postMessage(e,a),0):le(e))}function Oe(e,t,n){return O?Ye(4,1,e,t,n):0}function Se(e,t){if(O)return Ye(5,1,e,t)}function Ae(e,t){if(O)return Ye(6,1,e,t)}function Te(e,t,n){if(O)return Ye(7,1,e,t,n)}function Ee(e,t,n){return O?Ye(8,1,e,t,n):0}function Me(e,t){if(O)return Ye(9,1,e,t)}function Re(e,t,n){if(O)return Ye(10,1,e,t,n)}function xe(e,t,n,r){if(O)return Ye(11,1,e,t,n,r)}function ke(e,t,n,r){if(O)return Ye(12,1,e,t,n,r)}function Ce(e,t,n,r){if(O)return Ye(13,1,e,t,n,r)}function Pe(e){if(O)return Ye(14,1,e)}function De(e,t){if(O)return Ye(15,1,e,t)}function Fe(e,t,n){if(O)return Ye(16,1,e,t,n)}function Ie(e){Atomics.store(a(),e>>2,1),it()&&dt(e),Atomics.compareExchange(a(),e>>2,1,0)}function Ue(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function He(e,t,n,r,a,o){return O?Ye(17,1,e,t,n,r,a,o):-52}function Le(e,t,n,r,a,o){if(O)return Ye(18,1,e,t,n,r,a,o)}function We(e){var n=B(e)+1,r=ut(n);return r&&N(e,t(),r,n),r}function je(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return Ye(19,1,e,t,n);var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var c=s.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(u),t=r(s),e=We(e),t=We(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function Ye(e,t){var n=arguments.length-2,r=arguments;return ge((()=>{for(var a=bt(8*n),o=a>>3,u=0;u<n;u++){var s=r[2+u];i()[o+u>>>0]=s}return pt(e,n,a,t)}))}u.invokeEntryPoint=function(e,t){var n=be[e];n||(e>=be.length&&(be.length=e+1),be[e]=n=V.get(e)),e=n(t),Z()?de.Ta(e):gt(e)},u.executeNotifiedProxyingQueue=Ie,ve=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var ze,Ne=[],Be={};function Ge(){if(!ze){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in Be)void 0===Be[e]?delete t[e]:t[e]=Be[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);ze=n}return ze}function qe(e,n){if(O)return Ye(20,1,e,n);var r=0;return Ge().forEach((function(a,i){var u=n+r;for(i=o()[e+4*i>>2>>>0]=u,u=0;u<a.length;++u)t()[i++>>0>>>0]=a.charCodeAt(u);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Ve(e,t){if(O)return Ye(21,1,e,t);var n=Ge();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function Je(e){return O?Ye(22,1,e):52}function Xe(e,t,n,r){return O?Ye(23,1,e,t,n,r):52}function Qe(e,t,n,r,a){return O?Ye(24,1,e,t,n,r,a):70}var Ke=[null,[],[]];function Ze(e,t){var n=Ke[e];0===t||10===t?((1===e?R:x)(Y(n,0)),n.length=0):n.push(t)}function $e(e,t,n,a){if(O)return Ye(25,1,e,t,n,a);for(var i=0,u=0;u<n;u++){var s=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++)Ze(e,r()[s+l>>>0]);i+=c}return o()[a>>2>>>0]=i,0}function et(e){return 0==e%4&&(0!=e%100||0==e%400)}var tt=[31,29,31,30,31,30,31,31,30,31,30,31],nt=[31,28,31,30,31,30,31,31,30,31,30,31];function rt(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function u(e,t){return i(e,t,\\\"0\\\")}function s(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Ka;for(e=new Date(new Date(e.La+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(et(e.getFullYear())?tt:nt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=s(t,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={jb:a()[o>>2>>>0],ib:a()[o+4>>2>>>0],Pa:a()[o+8>>2>>>0],Ra:a()[o+12>>2>>>0],Qa:a()[o+16>>2>>>0],La:a()[o+20>>2>>>0],Ha:a()[o+24>>2>>>0],Ka:a()[o+28>>2>>>0],pb:a()[o+32>>2>>>0],hb:a()[o+36>>2>>>0],kb:f?z(f):\\\"\\\"},r=z(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Ha].substring(0,3)},\\\"%A\\\":function(e){return d[e.Ha]},\\\"%b\\\":function(e){return m[e.Qa].substring(0,3)},\\\"%B\\\":function(e){return m[e.Qa]},\\\"%C\\\":function(e){return u((e.La+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.Ra,2)},\\\"%e\\\":function(e){return i(e.Ra,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return u(e.Pa,2)},\\\"%I\\\":function(e){return 0==(e=e.Pa)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Qa-1;t+=(et(e.La+1900)?tt:nt)[n++]);return u(e.Ra+t,3)},\\\"%m\\\":function(e){return u(e.Qa+1,2)},\\\"%M\\\":function(e){return u(e.ib,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Pa&&12>e.Pa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.jb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ha||7},\\\"%U\\\":function(e){return u(Math.floor((e.Ka+7-e.Ha)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Ka+7-(e.Ha+6)%7)/7);if(2>=(e.Ha+371-e.Ka-2)%7&&t++,t)53==t&&(4==(n=(e.Ha+371-e.Ka)%7)||3==n&&et(e.La)||(t=1));else{t=52;var n=(e.Ha+7-e.Ka-1)%7;(4==n||5==n&&et(e.La%400-1))&&t++}return u(t,2)},\\\"%w\\\":function(e){return e.Ha},\\\"%W\\\":function(e){return u(Math.floor((e.Ka+7-(e.Ha+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.La+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.La+1900},\\\"%z\\\":function(e){var t=0<=(e=e.hb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.kb},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(B(e)+1);return N(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}de.bb();var at=[null,fe,he,_e,Oe,Se,Ae,Te,Ee,Me,Re,xe,ke,Ce,Pe,De,Fe,He,Le,je,qe,Ve,Je,Xe,Qe,$e],ot={L:function(e){lt(e,!_,1,!b),de.Va()},h:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},D:we,e:Oe,S:Se,z:Ae,B:Te,s:Ee,Q:Me,I:Re,P:xe,k:ke,A:Ce,w:Pe,R:De,y:Fe,p:function(){},j:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},x:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){return Date.now()},E:function(){return 2097152},U:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>Ie(r)));else if(O)postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(e=de.Ja[e]))return;e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},K:function(){return-1},V:function(e,t){e=new Date(1e3*Ue(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},m:function(e,t){e=new Date(1e3*Ue(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},n:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=u&&s==r):0<n!=(s==r)&&(i=Math.max(u,i),t.setTime(t.getTime()+6e4*((0<n?s:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:He,H:Le,o:function e(t,n,r){e.Za||(e.Za=!0,je(t,n,r))},b:function(){ae(\\\"\\\")},i:function(){if(!w&&!_){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";ye||(ye={}),ye[e]||(ye[e]=1,w&&(e=\\\"warning: \\\"+e),x(e))}},u:function(){return 4294901760},c:ve,O:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},v:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Ne.length=t,n>>=3;for(var r=0;r<t;r++)Ne[r]=i()[n+r>>>0];return(0>e?ue[-e-1]:at[e]).apply(null,Ne)},t:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{C.grow(o-D.byteLength+65535>>>16),G(C.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},T:function(){throw\\\"unwind\\\"},M:qe,N:Ve,C:pe,d:Je,g:Xe,q:Qe,f:$e,a:C||u.wasmMemory,W:rt,r:function(e,t,n,r){return rt(e,t,n,r)}};!function(){function e(e,t){u.asm=e.exports,de.Wa.push(u.asm.ua),V=u.asm.wa,X.unshift(u.asm.X),P=t,O||(te--,u.monitorRunDependencies&&u.monitorRunDependencies(te),0==te&&(null!==ne&&(clearInterval(ne),ne=null),re&&(e=re,re=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(b||_)){if(\\\"function\\\"==typeof fetch&&!ee.startsWith(\\\"file://\\\"))return fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+ee+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ie()}));if(f)return new Promise((function(e,t){f(ee,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ie()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\\\"failed to asynchronously prepare wasm: \\\"+e),ae(e)}))}var r={a:ot};if(O||(te++,u.monitorRunDependencies&&u.monitorRunDependencies(te)),u.instantiateWasm)try{return u.instantiateWasm(r,e)}catch(e){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||oe()||ee.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?n(t):fetch(ee,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\\\"wasm streaming compile failed: \\\"+e),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.X).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Y).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Z).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm._).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.$).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm.aa).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.ba).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ca).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.da).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.ea).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.fa).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.ga).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.ha).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.ia).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.ja).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ka).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.la).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.ma).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.na).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.oa).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.pa).apply(null,arguments)};var it=u._pthread_self=function(){return(it=u._pthread_self=u.asm.qa).apply(null,arguments)},ut=u._malloc=function(){return(ut=u._malloc=u.asm.ra).apply(null,arguments)};u._free=function(){return(u._free=u.asm.sa).apply(null,arguments)};var st=u._fflush=function(){return(st=u._fflush=u.asm.ta).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.ua).apply(null,arguments)};var ct=u.___funcs_on_exit=function(){return(ct=u.___funcs_on_exit=u.asm.va).apply(null,arguments)},lt=u.__emscripten_thread_init=function(){return(lt=u.__emscripten_thread_init=u.asm.xa).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.ya).apply(null,arguments)};var ft,pt=u._emscripten_run_in_main_runtime_thread_js=function(){return(pt=u._emscripten_run_in_main_runtime_thread_js=u.asm.za).apply(null,arguments)},dt=u.__emscripten_proxy_execute_task_queue=function(){return(dt=u.__emscripten_proxy_execute_task_queue=u.asm.Aa).apply(null,arguments)},mt=u.__emscripten_thread_free_data=function(){return(mt=u.__emscripten_thread_free_data=u.asm.Ba).apply(null,arguments)},gt=u.__emscripten_thread_exit=function(){return(gt=u.__emscripten_thread_exit=u.asm.Ca).apply(null,arguments)},ht=u._emscripten_stack_set_limits=function(){return(ht=u._emscripten_stack_set_limits=u.asm.Da).apply(null,arguments)},yt=u.stackSave=function(){return(yt=u.stackSave=u.asm.Ea).apply(null,arguments)},vt=u.stackRestore=function(){return(vt=u.stackRestore=u.asm.Fa).apply(null,arguments)},bt=u.stackAlloc=function(){return(bt=u.stackAlloc=u.asm.Ga).apply(null,arguments)};function _t(){function e(){if(!ft&&(ft=!0,u.calledRun=!0,!W)&&(O||me(X),s(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for(\\\"function\\\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var e=u.postRun.shift();K.unshift(e)}me(K)}}if(!(0<te))if(O)s(u),O||me(X),postMessage({cmd:\\\"loaded\\\"});else{if(u.preRun)for(\\\"function\\\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)$();me(J),0<te||(u.setStatus?(u.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){u.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(u.UTF8ToString=z,u.stringToUTF8=function(e,t,n){return N(e,r(),t,n)},u.lengthBytesUTF8=B,u.keepRuntimeAlive=Z,u.wasmMemory=C,u.stackSave=yt,u.stackRestore=vt,u.stackAlloc=bt,u.ExitStatus=se,u.PThread=de,re=function e(){ft||_t(),ft||(re=e)},u.preInit)for(\\\"function\\\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return _t(),e.ready});e.exports=r},932:function(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,u,s,c,l,f=Object.assign({},t),p=\\\"./this.program\\\",d=\\\"object\\\"==typeof window,m=\\\"function\\\"==typeof importScripts,g=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";g?(h=m?n(908).dirname(h)+\\\"/\\\":\\\"//\\\",l=()=>{c||(s=n(384),c=n(908))},o=function(e,t){return l(),e=c.normalize(e),s.readFileSync(e,t?void 0:\\\"utf8\\\")},u=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),s.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(d||m)&&(m?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},m&&(u=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,v=t.print||console.log.bind(console),b=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.wasmBinary&&(y=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&Y(\\\"no native wasm support detected\\\");var _,w,O,S,A,T,E=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function R(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&M)return M.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function x(e,t){return(e>>>=0)?R(S,e,t):\\\"\\\"}function k(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function C(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function P(){var e=_.buffer;w=e,t.HEAP8=O=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=S=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=T=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var D=[],F=[],I=[];function U(){var e=t.preRun.shift();D.unshift(e)}var H,L=0,W=null,j=null;function Y(e){throw t.onAbort&&t.onAbort(e),b(e=\\\"Aborted(\\\"+e+\\\")\\\"),E=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function z(){return H.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(H=\\\"ort-wasm.wasm\\\",!z()){var N=H;H=t.locateFile?t.locateFile(N,h):h+N}function B(){var e=H;try{if(e==H&&y)return new Uint8Array(y);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){Y(e)}}function G(e){for(;0<e.length;)e.shift()(t)}function q(e){var t=C(e)+1,n=ne(t);return n&&k(e,O,n,t),n}var V={};function J(){if(!X){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in V)void 0===V[e]?delete t[e]:t[e]=V[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);X=n}return X}var X,Q=[null,[],[]];function K(e){return 0==e%4&&(0!=e%100||0==e%400)}var Z=[31,29,31,30,31,30,31,31,30,31,30,31],$=[31,28,31,30,31,30,31,31,30,31,30,31];function ee(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.ma;for(e=new Date(new Date(e.na+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(K(e.getFullYear())?Z:$)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=A[r+40>>2>>>0];for(var l in r={ua:A[r>>2>>>0],ta:A[r+4>>2>>>0],oa:A[r+8>>2>>>0],qa:A[r+12>>2>>>0],pa:A[r+16>>2>>>0],na:A[r+20>>2>>>0],ia:A[r+24>>2>>>0],ma:A[r+28>>2>>>0],wa:A[r+32>>2>>>0],sa:A[r+36>>2>>>0],va:c?x(c):\\\"\\\"},n=x(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ia].substring(0,3)},\\\"%A\\\":function(e){return f[e.ia]},\\\"%b\\\":function(e){return p[e.pa].substring(0,3)},\\\"%B\\\":function(e){return p[e.pa]},\\\"%C\\\":function(e){return o((e.na+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.qa,2)},\\\"%e\\\":function(e){return a(e.qa,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.oa,2)},\\\"%I\\\":function(e){return 0==(e=e.oa)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.pa-1;t+=(K(e.na+1900)?Z:$)[n++]);return o(e.qa+t,3)},\\\"%m\\\":function(e){return o(e.pa+1,2)},\\\"%M\\\":function(e){return o(e.ta,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.oa&&12>e.oa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.ua,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ia||7},\\\"%U\\\":function(e){return o(Math.floor((e.ma+7-e.ia)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.ma+7-(e.ia+6)%7)/7);if(2>=(e.ia+371-e.ma-2)%7&&t++,t)53==t&&(4==(n=(e.ia+371-e.ma)%7)||3==n&&K(e.na)||(t=1));else{t=52;var n=(e.ia+7-e.ma-1)%7;(4==n||5==n&&K(e.na%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ia},\\\"%W\\\":function(e){return o(Math.floor((e.ma+7-(e.ia+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.na+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.na+1900},\\\"%z\\\":function(e){var t=0<=(e=e.sa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.va},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(C(e)+1);return k(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(O.set(l,e>>>0),l.length-1)}var te={d:function(){return 0},I:function(){},w:function(){},y:function(){},r:function(){return 0},G:function(){},B:function(){},F:function(){},h:function(){},x:function(){},t:function(){},H:function(){},v:function(){},n:function(){},u:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},o:function(){Y(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},i:function(){return Date.now()},J:function(){return!0},j:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getUTCSeconds(),A[t+4>>2>>>0]=e.getUTCMinutes(),A[t+8>>2>>>0]=e.getUTCHours(),A[t+12>>2>>>0]=e.getUTCDate(),A[t+16>>2>>>0]=e.getUTCMonth(),A[t+20>>2>>>0]=e.getUTCFullYear()-1900,A[t+24>>2>>>0]=e.getUTCDay(),A[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},k:function(e,t){e=new Date(1e3*(T[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),A[t+20>>2>>>0]=e.getFullYear()-1900,A[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);A[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,A[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),A[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},l:function(e){var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),n=A[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),u=Math.min(i,o);return 0>n?A[e+32>>2>>>0]=Number(o!=i&&u==r):0<n!=(u==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?u:o)-r))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},z:function(){return-52},A:function(){},m:function e(t,n,r){e.ra||(e.ra=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();A[e>>2>>>0]=60*Math.max(a,u),A[t>>2>>>0]=Number(a!=u),e=r(o),t=r(i),e=q(e),t=q(t),u<a?(T[n>>2>>>0]=e,T[n+4>>2>>>0]=t):(T[n>>2>>>0]=t,T[n+4>>2>>>0]=e)}(t,n,r))},a:function(){Y(\\\"\\\")},s:function(){return 4294901760},e:g?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),E:function(e,t,n){S.copyWithin(e>>>0,t>>>0,t+n>>>0)},b:function(e){var t=S.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{_.grow(a-w.byteLength+65535>>>16),P();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},C:function(e,t){var n=0;return J().forEach((function(r,a){var o=t+n;for(a=T[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)O[a++>>0>>>0]=r.charCodeAt(o);O[a>>0>>>0]=0,n+=r.length+1})),0},D:function(e,t){var n=J();T[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),T[t>>2>>>0]=r,0},c:function(){return 52},g:function(){return 52},p:function(){return 70},f:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=T[t>>2>>>0],u=T[t+4>>2>>>0];t+=8;for(var s=0;s<u;s++){var c=S[i+s>>>0],l=Q[e];0===c||10===c?((1===e?v:b)(R(l,0)),l.length=0):l.push(c)}a+=u}return T[r>>2>>>0]=a,0},K:ee,q:function(e,t,n,r){return ee(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,_=t.asm.L,P(),F.unshift(t.asm.M),L--,t.monitorRunDependencies&&t.monitorRunDependencies(L),0==L&&(null!==W&&(clearInterval(W),W=null),j&&(e=j,j=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!y&&(d||m)){if(\\\"function\\\"==typeof fetch&&!H.startsWith(\\\"file://\\\"))return fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+H+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return B()}));if(i)return new Promise((function(e,t){i(H,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return B()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){b(\\\"failed to asynchronously prepare wasm: \\\"+e),Y(e)}))}var o={a:te};if(L++,t.monitorRunDependencies&&t.monitorRunDependencies(L),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return b(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||z()||H.startsWith(\\\"file://\\\")||g||\\\"function\\\"!=typeof fetch?r(n):fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return b(\\\"wasm streaming compile failed: \\\"+e),b(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.M).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.N).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.O).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.P).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.Q).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.R).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.S).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.T).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.U).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.V).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.W).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.X).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.Y).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.Z).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm._).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.$).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.aa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.ba).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ca).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.da).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ea).apply(null,arguments)};var ne=t._malloc=function(){return(ne=t._malloc=t.asm.fa).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ga).apply(null,arguments)},t._fflush=function(){return(t._fflush=t.asm.ha).apply(null,arguments)};var re,ae=t.stackSave=function(){return(ae=t.stackSave=t.asm.ja).apply(null,arguments)},oe=t.stackRestore=function(){return(oe=t.stackRestore=t.asm.ka).apply(null,arguments)},ie=t.stackAlloc=function(){return(ie=t.stackAlloc=t.asm.la).apply(null,arguments)};function ue(){function e(){if(!re&&(re=!0,t.calledRun=!0,!E)){if(G(F),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();I.unshift(e)}G(I)}}if(!(0<L)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)U();G(D),0<L||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.UTF8ToString=x,t.stringToUTF8=function(e,t,n){return k(e,S,t,n)},t.lengthBytesUTF8=C,t.stackSave=ae,t.stackRestore=oe,t.stackAlloc=ie,j=function e(){re||ue(),re||(j=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return ue(),e.ready});e.exports=r},967:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=function(e,r,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=n(e,2),u=i[0],s=i[1],c=r?r+u:u;if(\\\"object\\\"==typeof s)(0,t.iterateExtraOptions)(s,c+\\\".\\\",a,o);else if(\\\"string\\\"==typeof s||\\\"number\\\"==typeof s)o(c,s.toString());else{if(\\\"boolean\\\"!=typeof s)throw new Error(\\\"Can't handle extra config type: \\\".concat(typeof s));o(c,s?\\\"1\\\":\\\"0\\\")}}))}},586:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(967),a=n(983),o=n(361);t.setRunOptions=function(e){var t=(0,o.getInstance)(),n=0,i=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\".concat(e.logVerbosityLevel));void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);var s=0;if(void 0!==(null==e?void 0:e.tag)&&(s=(0,a.allocWasmString)(e.tag,i)),0===(n=t._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,s)))throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,(function(e,r){var o=(0,a.allocWasmString)(e,i),u=(0,a.allocWasmString)(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,u))throw new Error(\\\"Can't set a run config entry: \\\".concat(e,\\\" - \\\").concat(r))})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},919:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var a=n(967),o=n(983),i=n(361);t.setSessionOptions=function(e){var t=(0,i.getInstance)(),n=0,u=[],s=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\")}(s);try{void 0===(null==e?void 0:e.graphOptimizationLevel)&&(s.graphOptimizationLevel=\\\"all\\\");var c=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\".concat(e))}}(s.graphOptimizationLevel);void 0===(null==e?void 0:e.enableCpuMemArena)&&(s.enableCpuMemArena=!0),void 0===(null==e?void 0:e.enableMemPattern)&&(s.enableMemPattern=!0),void 0===(null==e?void 0:e.executionMode)&&(s.executionMode=\\\"sequential\\\");var l=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\".concat(e))}}(s.executionMode),f=0;if(void 0!==(null==e?void 0:e.logId)&&(f=(0,o.allocWasmString)(e.logId,u)),void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\".concat(e.logVerbosityLevel));if(void 0===(null==e?void 0:e.enableProfiling)&&(s.enableProfiling=!1),0===(n=t._OrtCreateSessionOptions(c,!!s.enableCpuMemArena,!!s.enableMemPattern,l,!!s.enableProfiling,0,f,s.logSeverityLevel,s.logVerbosityLevel)))throw new Error(\\\"Can't create session options\\\");return(null==e?void 0:e.executionProviders)&&function(e,t,n){var a,u;try{for(var s=r(t),c=s.next();!c.done;c=s.next()){var l=c.value,f=\\\"string\\\"==typeof l?l:l.name;switch(f){case\\\"xnnpack\\\":f=\\\"XNNPACK\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported EP: \\\".concat(f))}var p=(0,o.allocWasmString)(f,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(e,p))throw new Error(\\\"Can't append execution provider: \\\".concat(f))}}catch(e){a={error:e}}finally{try{c&&!c.done&&(u=s.return)&&u.call(s)}finally{if(a)throw a.error}}}(n,e.executionProviders,u),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,(function(e,r){var a=(0,o.allocWasmString)(e,u),i=(0,o.allocWasmString)(r,u);if(0!==t._OrtAddSessionConfigEntry(n,a,i))throw new Error(\\\"Can't set a session config entry: \\\".concat(e,\\\" - \\\").concat(r))})),[n,u]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),u.forEach(t._free),e}}},983:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;var r=n(361);t.allocWasmString=function(e,t){var n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},349:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=void 0;var o=n(586),i=n(919),u=n(983),s=n(361);t.initOrt=function(e,t){var n=(0,s.getInstance)()._OrtInit(e,t);if(0!==n)throw new Error(\\\"Can't initialize onnxruntime. error code = \\\".concat(n))};var c=new Map;t.createSessionAllocate=function(e){var t=(0,s.getInstance)(),n=t._malloc(e.byteLength);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=function(e,t){var n,a=(0,s.getInstance)(),o=0,u=0,l=[];try{if(u=(n=r((0,i.setSessionOptions)(t),2))[0],l=n[1],0===(o=a._OrtCreateSession(e[0],e[1],u)))throw new Error(\\\"Can't create a session\\\")}finally{a._free(e[0]),a._OrtReleaseSessionOptions(u),l.forEach(a._free)}for(var f=a._OrtGetInputCount(o),p=a._OrtGetOutputCount(o),d=[],m=[],g=[],h=[],y=0;y<f;y++){var v=a._OrtGetInputName(o,y);if(0===v)throw new Error(\\\"Can't get an input name\\\");m.push(v),d.push(a.UTF8ToString(v))}for(y=0;y<p;y++){var b=a._OrtGetOutputName(o,y);if(0===b)throw new Error(\\\"Can't get an output name\\\");h.push(b),g.push(a.UTF8ToString(b))}return c.set(o,[o,m,h]),[o,d,g]},t.createSession=function(e,n){var r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=function(e){var t=(0,s.getInstance)(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),c.delete(e)};var l=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},f=function(e){switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\".concat(e))}};t.run=function(e,t,n,a,i){var p,d=(0,s.getInstance)(),m=c.get(e);if(!m)throw new Error(\\\"invalid session id\\\");var g=m[0],h=m[1],y=m[2],v=t.length,b=a.length,_=0,w=[],O=[],S=[];try{_=(p=r((0,o.setRunOptions)(i),2))[0],w=p[1];for(var A=function(e){var t=n[e][0],r=n[e][1],a=n[e][2],o=void 0,i=void 0;if(Array.isArray(a)){i=4*a.length,o=d._malloc(i),S.push(o);for(var s=o/4,c=0;c<a.length;c++){if(\\\"string\\\"!=typeof a[c])throw new TypeError(\\\"tensor data at index \\\".concat(c,\\\" is not a string\\\"));d.HEAPU32[s++]=(0,u.allocWasmString)(a[c],S)}}else i=a.byteLength,o=d._malloc(i),S.push(o),d.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,i),o);var l=d.stackSave(),f=d.stackAlloc(4*r.length);try{var p=f/4;r.forEach((function(e){return d.HEAP32[p++]=e}));var m=d._OrtCreateTensor(function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\".concat(e))}}(t),o,i,f,r.length);if(0===m)throw new Error(\\\"Can't create a tensor\\\");O.push(m)}finally{d.stackRestore(l)}},T=0;T<v;T++)A(T);var E=d.stackSave(),M=d.stackAlloc(4*v),R=d.stackAlloc(4*v),x=d.stackAlloc(4*b),k=d.stackAlloc(4*b);try{var C=M/4,P=R/4,D=x/4,F=k/4;for(T=0;T<v;T++)d.HEAPU32[C++]=O[T],d.HEAPU32[P++]=h[t[T]];for(T=0;T<b;T++)d.HEAPU32[D++]=0,d.HEAPU32[F++]=y[a[T]];var I=d._OrtRun(g,R,M,v,k,b,x,_),U=[];if(0===I)for(T=0;T<b;T++){var H=d.HEAPU32[x/4+T],L=d.stackSave(),W=d.stackAlloc(16),j=void 0,Y=0;try{if(0!==(I=d._OrtGetTensorData(H,W,W+4,W+8,W+12)))throw new Error(\\\"Can't access output tensor data. error code = \\\".concat(I));var z=W/4,N=d.HEAPU32[z++];Y=d.HEAPU32[z++];for(var B=d.HEAPU32[z++],G=d.HEAPU32[z++],q=[],V=0;V<G;V++)q.push(d.HEAPU32[B/4+V]);d._OrtFree(B);var J=0===q.length?1:q.reduce((function(e,t){return e*t}));if(\\\"string\\\"===(j=l(N))){for(var X=[],Q=Y/4,K=0;K<J;K++){var Z=d.HEAPU32[Q++],$=K===J-1?void 0:d.HEAPU32[Q]-Z;X.push(d.UTF8ToString(Z,$))}U.push([j,q,X])}else{var ee=new(f(j))(J);new Uint8Array(ee.buffer,ee.byteOffset,ee.byteLength).set(d.HEAPU8.subarray(Y,Y+ee.byteLength)),U.push([j,q,ee])}}finally{d.stackRestore(L),\\\"string\\\"===j&&Y&&d._free(Y),d._OrtReleaseTensor(H)}}if(0===I)return U;throw new Error(\\\"failed to call OrtRun(). error code = \\\".concat(I,\\\".\\\"))}finally{d.stackRestore(E)}}finally{O.forEach(d._OrtReleaseTensor),S.forEach(d._free),d._OrtReleaseRunOptions(_),w.forEach(d._free)}},t.endProfiling=function(e){var t=(0,s.getInstance)(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var o=a(e),i=o.next();!i.done;i=o.next()){var u=i.value[2];!Array.isArray(u)&&u.buffer&&r.push(u.buffer)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return r}},361:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}))},u=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(s){return function(u){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,u[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&u[0]?r.return:u[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,u[1])).done)return a;switch(r=0,a&&(u=[2&u[0],a.value]),u[0]){case 0:case 1:a=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!a||u[1]>a[0]&&u[1]<a[3])){i.label=u[1];break}if(6===u[0]&&i.label<a[1]){i.label=a[1],a=u;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(u);break}a[2]&&i.ops.pop(),i.trys.pop();continue}u=t.call(e,i)}catch(e){u=[6,e],r=0}finally{n=a=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var c,l=o(n(449)),f=s(n(932)),p=n(474),d=!1,m=!1,g=!1,h=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"};t.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var t,r,a,o,i,s,y,v,b,_,w;return u(this,(function(u){switch(u.label){case 0:if(d)return[2,Promise.resolve()];if(m)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(g)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return m=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),s=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,y=h(!1,o),v=h(i,o),b=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[v]:void 0,_=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){_=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=o?p:f.default,a={locateFile:function(e,t){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):e===y?null!=b?b:(null!=s?s:t)+v:t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=l.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\".concat(r.toString(),\\\"})();\\\");a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(t){m=!1,d=!0,c=t,e()}),(function(e){m=!1,g=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(u.sent(),_)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\".concat(t,\\\"ms\\\"));return[2]}}))}))},t.getInstance=function(){if(d&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!d||m||g||(m=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,m=!1,d=!1,g=!0)}},154:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},384:function(){},993:function(){},908:function(){},953:function(){},925:function(){},449:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),function(){\\\"use strict\\\";var e=n(349),t=n(361);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":(0,t.initializeWebAssembly)(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}));break;case\\\"init-ort\\\":try{var r=n.data.in,a=r.numThreads,o=r.loggingLevel;(0,e.initOrt)(a,o),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{var i=n.data.in.model,u=(0,e.createSessionAllocate)(i);postMessage({type:\\\"create_allocate\\\",out:u})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{var s=n.data.in,c=(u=s.modeldata,s.options),l=(0,e.createSessionFinalize)(u,c);postMessage({type:\\\"create_finalize\\\",out:l})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{var f=n.data.in;i=f.model,c=f.options,l=(0,e.createSession)(i,c),postMessage({type:\\\"create\\\",out:l})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var p=n.data.in;(0,e.releaseSession)(p),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var d=n.data.in,m=d.sessionId,g=d.inputIndices,h=d.inputs,y=d.outputIndices,v=(c=d.options,(0,e.run)(m,g,h,y,c));postMessage({type:\\\"run\\\",out:v},(0,e.extractTransferableBuffers)(v))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{p=n.data.in,(0,e.endProfiling)(p),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"names":["root","factory","exports","module","define","amd","self","_scriptDir","e","document","currentScript","src","n","k","buffer","C","G","I","t","F","r","H","a","P","u","Y","o","i","s","ready","Promise","f","c","l","p","m","d","h","Object","assign","g","y","_","window","b","importScripts","v","process","versions","node","w","ENVIRONMENT_IS_PTHREAD","O","T","locateFile","__dirname","normalize","readFileSync","Uint8Array","readFile","argv","length","replace","slice","on","ie","V","exitCode","x","exit","inspect","console","error","Worker","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","M","log","bind","A","warn","writeSync","S","R","print","printErr","thisProgram","quit","wasmBinary","E","noExitRuntime","WebAssembly","re","D","U","W","TextDecoder","j","decode","SharedArrayBuffer","subarray","String","fromCharCode","N","L","charCodeAt","q","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","B","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Error","byteLength","z","J","Q","K","X","Z","preRun","shift","unshift","$","ee","ne","te","postMessage","cmd","arg","onAbort","RuntimeError","ae","startsWith","ue","oe","this","name","message","se","pe","Ja","Sa","fe","ab","Oa","push","Ia","start_routine","gb","Ya","pthread_ptr","Na","time","now","lb","loaded","ce","je","Ua","onExit","le","he","fn","me","sn","Xe","Ve","Ma","Wa","bb","cb","nb","receiveObjectTransfer","fb","threadInitTLS","Va","setExitStatus","Ta","values","terminate","splice","dn","forEach","eb","onmessage","data","$a","targetThread","un","ob","transferList","Fe","queue","thread","threadId","text","alert","target","filename","lineno","urlOrBlob","mainScriptUrlOrBlob","wasmModule","Xa","pop","de","yn","_n","PThread","establishStackSpace","gn","ge","ye","_e","be","ve","mb","we","Oe","Te","Me","Ae","Se","Re","xe","Ee","ke","De","Ce","Ie","Atomics","store","mn","compareExchange","He","Pe","Ye","Ue","We","toTimeString","match","Date","getFullYear","getTimezoneOffset","Math","max","Number","arguments","bn","pn","invokeEntryPoint","get","hn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","Ne","Le","qe","Ge","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","Be","ze","Je","Qe","Ke","Ze","$e","en","nn","tn","toString","getMonth","getDate","getDay","Ka","La","getTime","setDate","setMonth","setFullYear","jb","ib","Pa","Ra","Qa","Ha","pb","hb","kb","RegExp","split","substring","floor","abs","includes","Array","set","rn","an","cn","setTimeout","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","min","setTime","Za","copyWithin","hardwareConcurrency","apply","call","grow","asm","ua","wa","monitorRunDependencies","clearInterval","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_OrtInit","_OrtCreateSessionOptions","_OrtAppendExecutionProvider","_OrtAddSessionConfigEntry","_OrtReleaseSessionOptions","aa","_OrtCreateSession","ba","_OrtReleaseSession","ca","_OrtGetInputCount","da","_OrtGetOutputCount","ea","_OrtGetInputName","fa","_OrtGetOutputName","ga","_OrtFree","ha","_OrtCreateTensor","ia","_OrtGetTensorData","ja","_OrtReleaseTensor","ka","_OrtCreateRunOptions","la","_OrtAddRunConfigEntry","ma","_OrtReleaseRunOptions","na","_OrtRun","oa","_OrtEndProfiling","pa","_pthread_self","qa","_malloc","ra","_free","sa","_fflush","ta","__emscripten_tls_init","___funcs_on_exit","va","__emscripten_thread_init","xa","__emscripten_thread_crashed","ya","ln","_emscripten_run_in_main_runtime_thread_js","za","__emscripten_proxy_execute_task_queue","Aa","__emscripten_thread_free_data","Ba","__emscripten_thread_exit","Ca","_emscripten_stack_set_limits","Da","stackSave","Ea","stackRestore","Fa","stackAlloc","Ga","vn","calledRun","onRuntimeInitialized","postRun","setStatus","UTF8ToString","stringToUTF8","lengthBytesUTF8","keepRuntimeAlive","ExitStatus","preInit","ortWasm","undefined","fs","ctx","params","offset","index","pending","reject","err","base64","string","charAt","ceil","b64","s64","encode","start","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","args","f32","f8b","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","keys","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","__esModule","Guid","guid","TypeError","value","EMPTY","isGuid","validator","create","gen","createEmpty","parse","raw","count","out","random","equals","other","isEmpty","toJSON","Long","wasm","Instance","Module","low","high","unsigned","isLong","obj","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","radixToPower","result","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","bytes","fromBytesLE","fromBytesBE","valuesById","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","refAttrName","docString","type","newBuffer","emptyArray","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","int32","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","version","backends","backendsSortedByPriority","registerBackend","backend","priority","init","createSessionHandler","currentBackend","env","webgl","logLevelInternal","logLevel","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","arg0","arg1","arg2","typedArrayConstructor","firstElementType","mappedType","isSafeInteger","calculateSize","static","height","width","norm","normMean","normBias","mean","bias","inputformat","bitmapFormat","outputformat","tensorFormat","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isURL","tensorConfig","canvas","createElement","pixels2DContext","getContext","naturalHeight","naturalWidth","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","context","newImage","Image","crossOrigin","img","format","tempCanvas","putImageData","toImageData","_a","_b","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","getOwnPropertyNames","inputNames","results","run","returnValue","arg3","filePathOrUint8Array","ArrayBuffer","byteOffset","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","resolveBackend","startProfiling","endProfiling","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","finish","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","initTimeout","simd","proxy","numThreads","numCpuLogicalCores","cpus","initWasm","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","_cacheKey","sort","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","attr","Attribute","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","initialize","dispose","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","glsl","getGlsl","floatTextureSetRGBASource","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","line1","line2","texture2D","programInfo","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","swapLastDimsSnippet","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","isLittleEndian","decodeUint8","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","scale","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getFetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","orank","irank","iDrank","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","declareC","broadcastC","calculateC","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","getBiasMethod","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","getOutputCoordsSnippet","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","padFunction","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","poolingCode","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","padCode","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","oRank","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","toISOString","previousConfig","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","bb_pos","__init","getRootAsShape","Shape","readInt32","getSizePrefixedRootAsShape","setPosition","SIZE_PREFIX_LENGTH","__offset","__indirect","__vector","__vector_len","startShape","builder","startObject","addDim","addFieldOffset","createDimVector","startVector","addOffset","endVector","startDimVector","numElems","endShape","endObject","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","__string","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","readInt8","UNKNOWN","readInt64","createLong","startDimensionValue","addDimType","addFieldInt8","addDimValue","addFieldInt64","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addFieldInt32","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","readUint32","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","prep","writeInt32","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","addInt32","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","addInt64","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","addInt8","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","readFloat32","floatsLength","graphsLength","startAttribute","addF","addFieldFloat32","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","addFloat32","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","requiredField","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","__has_identifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","graphInputTypes","graphInputDims","_model","promisify","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","prefix","seen","entries","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","scriptSrc","wasmPaths","in","initializeWebAssembly","initOrt","loggingLevel","core","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","allocWasmString","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","getLogLevel","path","modelData","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","ep","epName","epNameDataOffset","setExecutionProviders","dataLength","dataOffset","errorCode","activeSessions","modelDataOffset","sessionHandle","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","maxBytesToRead","profileFileName","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","Blob","URL","createObjectURL","scriptSourceCode","what","race","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}