{"version":3,"file":"ort.webgl.min.js","mappings":"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G,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAA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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/backend-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/env.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/env-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/tensor-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/tensor.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/inference-session-impl.js","webpack://ort/./node_modules/onnxruntime-common/dist/lib/inference-session.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\nif (isBigInt64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n}\nif (isBigUint64ArrayAvailable) {\n    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n}\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.naturalHeight;\n                let width = image.naturalWidth;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                canvas.width = width;\n                canvas.height = height;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        var _a, _b;\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (((_a = options.norm) === null || _a === void 0 ? void 0 : _a.mean) !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (((_b = options.norm) === null || _b === void 0 ? void 0 : _b.bias) !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend(),\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"names":["root","factory","exports","module","define","amd","self","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","undefined","Error","test","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","Float32Array","f32","f8b","Uint8Array","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","replace","Object","keys","e","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","__esModule","Guid","guid","TypeError","value","EMPTY","isGuid","toString","validator","create","gen","createEmpty","parse","raw","count","out","random","substring","equals","other","isEmpty","toJSON","RegExp","Long","wasm","WebAssembly","Instance","Module","low","high","unsigned","isLong","obj","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","RangeError","indexOf","radixToPower","result","min","parseInt","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","bytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","strings","tensors","graphs","name","refAttrName","docString","type","f","s","newBuffer","g","emptyArray","message","writer","hasOwnProperty","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","int32","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","error","isArray","fromObject","object","Number","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","node","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","get","oneOfGetter","set","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","version","backends","backendsSortedByPriority","registerBackend","backend","priority","init","createSessionHandler","currentBackend","env","webgl","logLevelInternal","logLevel","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Int8Array","Uint16Array","Int16Array","Int32Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","arg0","arg1","arg2","data","typedArrayConstructor","firstElementType","mappedType","isSafeInteger","calculateSize","static","height","width","norm","normMean","normBias","mean","bias","inputformat","bitmapFormat","outputformat","tensorFormat","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isURL","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","naturalHeight","naturalWidth","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toImageData","_a","_b","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","getOwnPropertyNames","v","inputNames","results","run","returnValue","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","resolveBackend","startProfiling","endProfiling","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","finish","response","setTimeout","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","stack","pool","isNode","process","versions","global","window","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","AttributeWithCacheKeyImpl","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","o","initialize","dispose","isBackend","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","keptDims","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","EncodingGlslLib","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","a","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","sliceProgramMetadata","createSliceProgramInfo","starts","ends","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","computeMaxProgramInfo","createComputeMaxProgramInfo","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","GraphImpl","Value","_from","_to","tensorValueTypeFromProto","Node","_nodeProto","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","ind","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","Date","toISOString","previousConfig","Event","startTime","endCallback","timer","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawDataLength","rawDataArray","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}